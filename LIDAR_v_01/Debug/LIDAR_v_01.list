
LIDAR_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f68  08005f68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000c50  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000cc0  20000cc0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001603d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f1  00000000  00000000  000360dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  000389d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  00039bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026152  00000000  00000000  0003ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ffa  00000000  00000000  00060e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4789  00000000  00000000  00074e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001595fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005608  00000000  00000000  00159650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e7c 	.word	0x08005e7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005e7c 	.word	0x08005e7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fef0 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f848 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f9d0 	bl	8000944 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a4:	f000 f8ae 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f974 	bl	8000894 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f99c 	bl	80008e8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_TIM1_Init>
  MX_UART5_Init();
 80005b4:	f000 f944 	bl	8000840 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  RX_Struct_Init();
 80005b8:	f000 fadc 	bl	8000b74 <RX_Struct_Init>
  RX_Init();
 80005bc:	f000 fae6 	bl	8000b8c <RX_Init>
  printf(" Inin OK!!\n\n\r");
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <main+0x84>)
 80005c2:	f004 fbff 	bl	8004dc4 <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <main+0x88>)
 80005c8:	f002 fc1e 	bl	8002e08 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RX MSG Check
	  RX_Doing();
 80005cc:	f000 faf6 	bl	8000bbc <RX_Doing>

	  // LED Timer
	  if (led_1)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0x8c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d006      	beq.n	80005e6 <main+0x52>
	  {
		  led_1 = false;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <main+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005de:	2101      	movs	r1, #1
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0x90>)
 80005e2:	f001 fdf2 	bl	80021ca <HAL_GPIO_TogglePin>
	  }

	  if (led_2)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0x94>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <main+0x68>
	  {
		  led_2 = false;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x90>)
 80005f8:	f001 fde7 	bl	80021ca <HAL_GPIO_TogglePin>
	  }

	  if (led_3)
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <main+0x98>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0e3      	beq.n	80005cc <main+0x38>
	  {
		  led_3 = false;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <main+0x90>)
 8000610:	f001 fddb 	bl	80021ca <HAL_GPIO_TogglePin>
	  RX_Doing();
 8000614:	e7da      	b.n	80005cc <main+0x38>
 8000616:	bf00      	nop
 8000618:	08005e94 	.word	0x08005e94
 800061c:	200002b4 	.word	0x200002b4
 8000620:	20000894 	.word	0x20000894
 8000624:	40020400 	.word	0x40020400
 8000628:	20000895 	.word	0x20000895
 800062c:	20000896 	.word	0x20000896

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fbb8 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 febf 	bl	8002438 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fa52 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f920 	bl	8002928 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fa3b 	bl	8000b68 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x84>)
 8000756:	f001 f84b 	bl	80017f0 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 fa02 	bl	8000b68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_ETH_Init+0x98>)
 800076a:	f004 fb23 	bl	8004db4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	; 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000204 	.word	0x20000204
 800078c:	40028000 	.word	0x40028000
 8000790:	20000898 	.word	0x20000898
 8000794:	20000164 	.word	0x20000164
 8000798:	200000c4 	.word	0x200000c4
 800079c:	2000008c 	.word	0x2000008c

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM1_Init+0x98>)
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <MX_TIM1_Init+0x9c>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM1_Init+0x98>)
 80007c4:	2253      	movs	r2, #83	; 0x53
 80007c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM1_Init+0x98>)
 80007d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM1_Init+0x98>)
 80007ea:	f002 fabd 	bl	8002d68 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f9b8 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM1_Init+0x98>)
 8000806:	f002 fc77 	bl	80030f8 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 f9aa 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM1_Init+0x98>)
 8000822:	f002 fe93 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 f99c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002b4 	.word	0x200002b4
 800083c:	40010000 	.word	0x40010000

08000840 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_UART5_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_UART5_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_UART5_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_UART5_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_UART5_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_UART5_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_UART5_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_UART5_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_UART5_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_UART5_Init+0x4c>)
 8000878:	f002 fef8 	bl	800366c <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f971 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002fc 	.word	0x200002fc
 8000890:	40005000 	.word	0x40005000

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART3_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008cc:	f002 fece 	bl	800366c <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f947 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000340 	.word	0x20000340
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2202      	movs	r2, #2
 800090a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2201      	movs	r2, #1
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	f001 fc67 	bl	80021fe <HAL_PCD_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f917 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000384 	.word	0x20000384

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4b      	ldr	r2, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3d      	ldr	r2, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_GPIO_Init+0x150>)
 8000a0a:	f001 fbc5 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a14:	f001 fbc0 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <MX_GPIO_Init+0x158>)
 8000a30:	f001 fa06 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x150>)
 8000a4e:	f001 f9f7 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a6a:	f001 f9e9 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a82:	f001 f9dd 	bl	8001e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	// basic 100[us]
	if (htim->Instance == TIM1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d146      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		time_1ms++;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aba:	6013      	str	r3, [r2, #0]
		time_1ms %= MAX_TIME;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000ac6:	bf2c      	ite	cs
 8000ac8:	2301      	movcs	r3, #1
 8000aca:	2300      	movcc	r3, #0
 8000acc:	425b      	negs	r3, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ad4:	601a      	str	r2, [r3, #0]

		if (!(time_1ms % 200)) led_1 = true;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000adc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ae0:	1199      	asrs	r1, r3, #6
 8000ae2:	17d3      	asrs	r3, r2, #31
 8000ae4:	1acb      	subs	r3, r1, r3
 8000ae6:	21c8      	movs	r1, #200	; 0xc8
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
		if (!(time_1ms % 400)) led_2 = true;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000afe:	fb83 1302 	smull	r1, r3, r3, r2
 8000b02:	11d9      	asrs	r1, r3, #7
 8000b04:	17d3      	asrs	r3, r2, #31
 8000b06:	1acb      	subs	r3, r1, r3
 8000b08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000b0c:	fb01 f303 	mul.w	r3, r1, r3
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
		if (!(time_1ms % 600)) led_3 = true;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b22:	fb83 1302 	smull	r1, r3, r3, r2
 8000b26:	1199      	asrs	r1, r3, #6
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1acb      	subs	r3, r1, r3
 8000b2c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000b30:	fb01 f303 	mul.w	r3, r1, r3
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	20000890 	.word	0x20000890
 8000b54:	51eb851f 	.word	0x51eb851f
 8000b58:	20000894 	.word	0x20000894
 8000b5c:	20000895 	.word	0x20000895
 8000b60:	1b4e81b5 	.word	0x1b4e81b5
 8000b64:	20000896 	.word	0x20000896

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <RX_Struct_Init>:
extern UART_HandleTypeDef huart3;
//
_sRX sRX;

void RX_Struct_Init()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	memset(&sRX, 0, sizeof(struct _sRX));
 8000b78:	f240 4206 	movw	r2, #1030	; 0x406
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <RX_Struct_Init+0x14>)
 8000b80:	f004 f918 	bl	8004db4 <memset>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200008a0 	.word	0x200008a0

08000b8c <RX_Init>:

void RX_Init()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <RX_Init+0x24>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6898      	ldr	r0, [r3, #8]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2202      	movs	r2, #2
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f004 f92a 	bl	8004df4 <setvbuf>
	HAL_UART_Receive_IT(&huart5, &sRX.tmp, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <RX_Init+0x28>)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <RX_Init+0x2c>)
 8000ba6:	f002 fe40 	bl	800382a <HAL_UART_Receive_IT>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	200008a0 	.word	0x200008a0
 8000bb8:	200002fc 	.word	0x200002fc

08000bbc <RX_Doing>:

void RX_Doing()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	if (sRX.pop_cnt != sRX.push_cnt)
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <RX_Doing+0x78>)
 8000bc4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <RX_Doing+0x78>)
 8000bca:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d02c      	beq.n	8000c2c <RX_Doing+0x70>
	{
		uint8_t tmp = sRX.rxbuf[sRX.pop_cnt++];
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <RX_Doing+0x78>)
 8000bd4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <RX_Doing+0x78>)
 8000bde:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <RX_Doing+0x78>)
 8000be6:	4413      	add	r3, r2
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	71fb      	strb	r3, [r7, #7]
		sRX.pop_cnt %= RX_SIZE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <RX_Doing+0x78>)
 8000bee:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <RX_Doing+0x78>)
 8000bfa:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		// debug check
		printf(" %02X", tmp);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <RX_Doing+0x7c>)
 8000c04:	f004 f8de 	bl	8004dc4 <iprintf>
		if (!(sRX.pop_cnt % 10))
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <RX_Doing+0x78>)
 8000c0a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <RX_Doing+0x80>)
 8000c10:	fba3 1302 	umull	r1, r3, r3, r2
 8000c14:	08d9      	lsrs	r1, r3, #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <RX_Doing+0x70>
		{
			printf("\n\r");
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <RX_Doing+0x84>)
 8000c28:	f004 f8cc 	bl	8004dc4 <iprintf>
		}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200008a0 	.word	0x200008a0
 8000c38:	08005ea4 	.word	0x08005ea4
 8000c3c:	cccccccd 	.word	0xcccccccd
 8000c40:	08005eac 	.word	0x08005eac

08000c44 <__io_putchar>:

int __io_putchar(int ch)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	while (HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1) != HAL_OK);
 8000c4c:	bf00      	nop
 8000c4e:	1d39      	adds	r1, r7, #4
 8000c50:	2301      	movs	r3, #1
 8000c52:	2201      	movs	r2, #1
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <__io_putchar+0x28>)
 8000c56:	f002 fd56 	bl	8003706 <HAL_UART_Transmit>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f6      	bne.n	8000c4e <__io_putchar+0xa>
	return ch;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000340 	.word	0x20000340

08000c70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart5.Instance)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d11b      	bne.n	8000cbc <HAL_UART_RxCpltCallback+0x4c>
	{
		sRX.rxbuf[sRX.push_cnt++] = sRX.tmp;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000c86:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	b291      	uxth	r1, r2
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000c90:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000c94:	4619      	mov	r1, r3
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000c9c:	440b      	add	r3, r1
 8000c9e:	705a      	strb	r2, [r3, #1]
		sRX.push_cnt %= RX_SIZE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000ca2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000cae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		HAL_UART_Receive_IT(&huart5, &sRX.tmp, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4904      	ldr	r1, [pc, #16]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000cb8:	f002 fdb7 	bl	800382a <HAL_UART_Receive_IT>
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200002fc 	.word	0x200002fc
 8000cc8:	200008a0 	.word	0x200008a0

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_ETH_MspInit+0x174>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f040 80a4 	bne.w	8000e88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e04:	2332      	movs	r3, #50	; 0x32
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e14:	230b      	movs	r3, #11
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <HAL_ETH_MspInit+0x17c>)
 8000e20:	f001 f80e 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e24:	2386      	movs	r3, #134	; 0x86
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e34:	230b      	movs	r3, #11
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <HAL_ETH_MspInit+0x180>)
 8000e40:	f000 fffe 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <HAL_ETH_MspInit+0x184>)
 8000e62:	f000 ffed 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <HAL_ETH_MspInit+0x188>)
 8000e84:	f000 ffdc 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40028000 	.word	0x40028000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40021800 	.word	0x40021800

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_TIM_Base_MspInit+0x58>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11d      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2018      	movs	r0, #24
 8000edc:	f000 fbbf 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ee0:	2018      	movs	r0, #24
 8000ee2:	f000 fbd8 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2019      	movs	r0, #25
 8000eec:	f000 fbb7 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ef0:	2019      	movs	r0, #25
 8000ef2:	f000 fbd0 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010000 	.word	0x40010000
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_UART_MspInit+0x148>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d153      	bne.n	8000fd2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b46      	ldr	r3, [pc, #280]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b42      	ldr	r3, [pc, #264]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a41      	ldr	r2, [pc, #260]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f90:	2308      	movs	r3, #8
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482f      	ldr	r0, [pc, #188]	; (8001058 <HAL_UART_MspInit+0x150>)
 8000f9c:	f000 ff50 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4828      	ldr	r0, [pc, #160]	; (800105c <HAL_UART_MspInit+0x154>)
 8000fbc:	f000 ff40 	bl	8001e40 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2035      	movs	r0, #53	; 0x35
 8000fc6:	f000 fb4a 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000fca:	2035      	movs	r0, #53	; 0x35
 8000fcc:	f000 fb63 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd0:	e039      	b.n	8001046 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <HAL_UART_MspInit+0x158>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d134      	bne.n	8001046 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_UART_MspInit+0x14c>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_UART_MspInit+0x14c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001026:	2307      	movs	r3, #7
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <HAL_UART_MspInit+0x154>)
 8001032:	f000 ff05 	bl	8001e40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2027      	movs	r0, #39	; 0x27
 800103c:	f000 fb0f 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001040:	2027      	movs	r0, #39	; 0x27
 8001042:	f000 fb28 	bl	8001696 <HAL_NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	; 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40005000 	.word	0x40005000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40004800 	.word	0x40004800

08001064 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001084:	d13f      	bne.n	8001106 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_PCD_MspInit+0xac>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a20      	ldr	r2, [pc, #128]	; (8001110 <HAL_PCD_MspInit+0xac>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_PCD_MspInit+0xac>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010b4:	230a      	movs	r3, #10
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <HAL_PCD_MspInit+0xb0>)
 80010c0:	f000 febe 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <HAL_PCD_MspInit+0xb0>)
 80010da:	f000 feb1 	bl	8001e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_PCD_MspInit+0xac>)
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_PCD_MspInit+0xac>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6353      	str	r3, [r2, #52]	; 0x34
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_PCD_MspInit+0xac>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_PCD_MspInit+0xac>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_PCD_MspInit+0xac>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 f95c 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001172:	f001 feb9 	bl	8002ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002b4 	.word	0x200002b4

08001180 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001186:	f001 feaf 	bl	8002ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002b4 	.word	0x200002b4

08001194 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <USART3_IRQHandler+0x10>)
 800119a:	f002 fb77 	bl	800388c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000340 	.word	0x20000340

080011a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <UART5_IRQHandler+0x10>)
 80011ae:	f002 fb6d 	bl	800388c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002fc 	.word	0x200002fc

080011bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00a      	b.n	80011e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ce:	f3af 8000 	nop.w
 80011d2:	4601      	mov	r1, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <_read+0x12>
  }

  return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e009      	b.n	800121c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	60ba      	str	r2, [r7, #8]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd17 	bl	8000c44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf1      	blt.n	8001208 <_write+0x12>
  }
  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_close>:

int _close(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001256:	605a      	str	r2, [r3, #4]
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_isatty>:

int _isatty(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f003 fd4a 	bl	8004d60 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20030000 	.word	0x20030000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	20000ca8 	.word	0x20000ca8
 8001300:	20000cc0 	.word	0x20000cc0

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001344:	4c0b      	ldr	r4, [pc, #44]	; (8001374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001352:	f7ff ffd7 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f003 fd09 	bl	8004d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f91b 	bl	8000594 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001360:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800136c:	08005f70 	.word	0x08005f70
  ldr r2, =_sbss
 8001370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001374:	20000cc0 	.word	0x20000cc0

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_Init+0x40>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_Init+0x40>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x40>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f94f 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fc8c 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f967 	bl	80016b2 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f92f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000cac 	.word	0x20000cac

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000cac 	.word	0x20000cac

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff feb6 	bl	8001448 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d008      	beq.n	80016fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e052      	b.n	80017a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0216 	bic.w	r2, r2, #22
 800170a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_DMA_Abort+0x62>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0208 	bic.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	e013      	b.n	8001776 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174e:	f7ff fe7b 	bl	8001448 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b05      	cmp	r3, #5
 800175a:	d90c      	bls.n	8001776 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e015      	b.n	80017a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e4      	bne.n	800174e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e00c      	b.n	80017e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2205      	movs	r2, #5
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06c      	b.n	80018dc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2223      	movs	r2, #35	; 0x23
 8001810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fa81 	bl	8000d1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_ETH_Init+0xf4>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a30      	ldr	r2, [pc, #192]	; (80018e4 <HAL_ETH_Init+0xf4>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_ETH_Init+0xf4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_ETH_Init+0xf8>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <HAL_ETH_Init+0xf8>)
 800183c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001840:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_ETH_Init+0xf8>)
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4927      	ldr	r1, [pc, #156]	; (80018e8 <HAL_ETH_Init+0xf8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_ETH_Init+0xf8>)
 8001852:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800186a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fdec 	bl	8001448 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001872:	e011      	b.n	8001898 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001874:	f7ff fde8 	bl	8001448 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001882:	d909      	bls.n	8001898 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	22e0      	movs	r2, #224	; 0xe0
 8001890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e021      	b.n	80018dc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e4      	bne.n	8001874 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f958 	bl	8001b60 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f9ff 	bl	8001cb4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa55 	bl	8001d66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	461a      	mov	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f9bd 	bl	8001c44 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2210      	movs	r2, #16
 80018d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800

080018ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <ETH_SetMACConfig+0x15c>)
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7c1b      	ldrb	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <ETH_SetMACConfig+0x28>
 800190e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001912:	e000      	b.n	8001916 <ETH_SetMACConfig+0x2a>
 8001914:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	7c5b      	ldrb	r3, [r3, #17]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <ETH_SetMACConfig+0x38>
 800191e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001922:	e000      	b.n	8001926 <ETH_SetMACConfig+0x3a>
 8001924:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001926:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800192c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7fdb      	ldrb	r3, [r3, #31]
 8001932:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001934:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800193a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	7f92      	ldrb	r2, [r2, #30]
 8001940:	2a00      	cmp	r2, #0
 8001942:	d102      	bne.n	800194a <ETH_SetMACConfig+0x5e>
 8001944:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001948:	e000      	b.n	800194c <ETH_SetMACConfig+0x60>
 800194a:	2200      	movs	r2, #0
                        macconf->Speed |
 800194c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	7f1b      	ldrb	r3, [r3, #28]
 8001952:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001954:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800195a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	f892 2020 	ldrb.w	r2, [r2, #32]
 800196a:	2a00      	cmp	r2, #0
 800196c:	d102      	bne.n	8001974 <ETH_SetMACConfig+0x88>
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	e000      	b.n	8001976 <ETH_SetMACConfig+0x8a>
 8001974:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001976:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7bdb      	ldrb	r3, [r3, #15]
 800197c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800197e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001984:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800198c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800198e:	4313      	orrs	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fd5a 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019c2:	4013      	ands	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d101      	bne.n	80019da <ETH_SetMACConfig+0xee>
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	e000      	b.n	80019dc <ETH_SetMACConfig+0xf0>
 80019da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80019ea:	2a01      	cmp	r2, #1
 80019ec:	d101      	bne.n	80019f2 <ETH_SetMACConfig+0x106>
 80019ee:	2208      	movs	r2, #8
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0x108>
 80019f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80019f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d101      	bne.n	8001a04 <ETH_SetMACConfig+0x118>
 8001a00:	2204      	movs	r2, #4
 8001a02:	e000      	b.n	8001a06 <ETH_SetMACConfig+0x11a>
 8001a04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a0e:	2a01      	cmp	r2, #1
 8001a10:	d101      	bne.n	8001a16 <ETH_SetMACConfig+0x12a>
 8001a12:	2202      	movs	r2, #2
 8001a14:	e000      	b.n	8001a18 <ETH_SetMACConfig+0x12c>
 8001a16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fd15 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	ff20810f 	.word	0xff20810f

08001a4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <ETH_SetDMAConfig+0x110>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	7b1b      	ldrb	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <ETH_SetDMAConfig+0x2c>
 8001a72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a76:	e000      	b.n	8001a7a <ETH_SetDMAConfig+0x2e>
 8001a78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7b5b      	ldrb	r3, [r3, #13]
 8001a7e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a80:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	7f52      	ldrb	r2, [r2, #29]
 8001a86:	2a00      	cmp	r2, #0
 8001a88:	d102      	bne.n	8001a90 <ETH_SetDMAConfig+0x44>
 8001a8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a8e:	e000      	b.n	8001a92 <ETH_SetDMAConfig+0x46>
 8001a90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7b9b      	ldrb	r3, [r3, #14]
 8001a98:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a9a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001aa0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7f1b      	ldrb	r3, [r3, #28]
 8001aa6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001aa8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7f9b      	ldrb	r3, [r3, #30]
 8001aae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ab0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ab6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001abe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff fcbc 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	461a      	mov	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	791b      	ldrb	r3, [r3, #4]
 8001afa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b00:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b06:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b0c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b14:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b16:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b1e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b24:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b32:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fc8d 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	f8de3f23 	.word	0xf8de3f23

08001b60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0a6      	sub	sp, #152	; 0x98
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe86 	bl	80018ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c14:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff08 	bl	8001a4c <ETH_SetDMAConfig>
}
 8001c3c:	bf00      	nop
 8001c3e:	3798      	adds	r7, #152	; 0x98
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3305      	adds	r3, #5
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3204      	adds	r2, #4
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <ETH_MACAddressConfig+0x68>)
 8001c66:	4413      	add	r3, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3303      	adds	r3, #3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	061a      	lsls	r2, r3, #24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3302      	adds	r3, #2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3301      	adds	r3, #1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <ETH_MACAddressConfig+0x6c>)
 8001c96:	4413      	add	r3, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40028040 	.word	0x40028040
 8001cb0:	40028044 	.word	0x40028044

08001cb4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e03e      	b.n	8001d40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68d9      	ldr	r1, [r3, #12]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	3206      	adds	r2, #6
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d80c      	bhi.n	8001d24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	e004      	b.n	8001d2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d9bd      	bls.n	8001cc2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d58:	611a      	str	r2, [r3, #16]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e046      	b.n	8001e02 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6919      	ldr	r1, [r3, #16]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001db0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001db8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	3212      	adds	r2, #18
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d80c      	bhi.n	8001df2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6919      	ldr	r1, [r3, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	e004      	b.n	8001dfc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d9b5      	bls.n	8001d74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	60da      	str	r2, [r3, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e177      	b.n	800214c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8166 	bne.w	8002146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80c0 	beq.w	8002146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b66      	ldr	r3, [pc, #408]	; (8002164 <HAL_GPIO_Init+0x324>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a65      	ldr	r2, [pc, #404]	; (8002164 <HAL_GPIO_Init+0x324>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_GPIO_Init+0x324>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a61      	ldr	r2, [pc, #388]	; (8002168 <HAL_GPIO_Init+0x328>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d037      	beq.n	800207e <HAL_GPIO_Init+0x23e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d031      	beq.n	800207a <HAL_GPIO_Init+0x23a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a56      	ldr	r2, [pc, #344]	; (8002174 <HAL_GPIO_Init+0x334>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02b      	beq.n	8002076 <HAL_GPIO_Init+0x236>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a55      	ldr	r2, [pc, #340]	; (8002178 <HAL_GPIO_Init+0x338>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d025      	beq.n	8002072 <HAL_GPIO_Init+0x232>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a54      	ldr	r2, [pc, #336]	; (800217c <HAL_GPIO_Init+0x33c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <HAL_GPIO_Init+0x22e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a53      	ldr	r2, [pc, #332]	; (8002180 <HAL_GPIO_Init+0x340>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x22a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_GPIO_Init+0x344>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x226>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a51      	ldr	r2, [pc, #324]	; (8002188 <HAL_GPIO_Init+0x348>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x222>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a50      	ldr	r2, [pc, #320]	; (800218c <HAL_GPIO_Init+0x34c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x21e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_GPIO_Init+0x350>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x21a>
 8002056:	2309      	movs	r3, #9
 8002058:	e012      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800205a:	230a      	movs	r3, #10
 800205c:	e010      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800205e:	2308      	movs	r3, #8
 8002060:	e00e      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002062:	2307      	movs	r3, #7
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002066:	2306      	movs	r3, #6
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x328>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_GPIO_Init+0x354>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <HAL_GPIO_Init+0x354>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_GPIO_Init+0x354>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a29      	ldr	r2, [pc, #164]	; (8002194 <HAL_GPIO_Init+0x354>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_GPIO_Init+0x354>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_GPIO_Init+0x354>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_GPIO_Init+0x354>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_GPIO_Init+0x354>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae84 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40021400 	.word	0x40021400
 8002184:	40021800 	.word	0x40021800
 8002188:	40021c00 	.word	0x40021c00
 800218c:	40022000 	.word	0x40022000
 8002190:	40022400 	.word	0x40022400
 8002194:	40013c00 	.word	0x40013c00

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	041a      	lsls	r2, r3, #16
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	400b      	ands	r3, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002200:	b08f      	sub	sp, #60	; 0x3c
 8002202:	af0a      	add	r7, sp, #40	; 0x28
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e10f      	b.n	8002430 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe ff1a 	bl	8001064 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fae5 	bl	800481e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	687e      	ldr	r6, [r7, #4]
 800225c:	466d      	mov	r5, sp
 800225e:	f106 0410 	add.w	r4, r6, #16
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002272:	1d33      	adds	r3, r6, #4
 8002274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f002 fa70 	bl	800475c <USB_CoreInit>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0d0      	b.n	8002430 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fad3 	bl	8004840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e04a      	b.n	8002336 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	333d      	adds	r3, #61	; 0x3d
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	333c      	adds	r3, #60	; 0x3c
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	b298      	uxth	r0, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3344      	adds	r3, #68	; 0x44
 80022dc:	4602      	mov	r2, r0
 80022de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3340      	adds	r3, #64	; 0x40
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3348      	adds	r3, #72	; 0x48
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334c      	adds	r3, #76	; 0x4c
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3354      	adds	r3, #84	; 0x54
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	3301      	adds	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3af      	bcc.n	80022a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e044      	b.n	80023d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3b5      	bcc.n	8002346 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	687e      	ldr	r6, [r7, #4]
 80023e2:	466d      	mov	r5, sp
 80023e4:	f106 0410 	add.w	r4, r6, #16
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f8:	1d33      	adds	r3, r6, #4
 80023fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f002 fa6b 	bl	80048d8 <USB_DevInit>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e00d      	b.n	8002430 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fc36 	bl	8004c9a <USB_DevDisconnect>

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e267      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4b85      	ldr	r3, [pc, #532]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d112      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b82      	ldr	r3, [pc, #520]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e242      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b70      	ldr	r3, [pc, #448]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6f      	ldr	r2, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b69      	ldr	r3, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a68      	ldr	r2, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ffaa 	bl	8001448 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ffa6 	bl	8001448 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e207      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff96 	bl	8001448 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ff92 	bl	8001448 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1f3      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b51      	ldr	r3, [pc, #324]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b44      	ldr	r3, [pc, #272]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c7      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_OscConfig+0x244>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff4b 	bl	8001448 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe ff47 	bl	8001448 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1a8      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4925      	ldr	r1, [pc, #148]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x244>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff2a 	bl	8001448 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff26 	bl	8001448 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e187      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d036      	beq.n	8002690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x248>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe ff0a 	bl	8001448 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe ff06 	bl	8001448 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e167      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
 8002656:	e01b      	b.n	8002690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_OscConfig+0x248>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7fe fef3 	bl	8001448 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e00e      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe feef 	bl	8001448 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d907      	bls.n	8002684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e150      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
 8002678:	40023800 	.word	0x40023800
 800267c:	42470000 	.word	0x42470000
 8002680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ea      	bne.n	8002666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8097 	beq.w	80027cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe feaf 	bl	8001448 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe feab 	bl	8001448 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e10c      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x2ea>
 8002714:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x324>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b05      	cmp	r3, #5
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x30c>
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a5e      	ldr	r2, [pc, #376]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0x324>
 8002744:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fe70 	bl	8001448 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fe6c 	bl	8001448 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0cb      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ee      	beq.n	800276c <HAL_RCC_OscConfig+0x334>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe fe5a 	bl	8001448 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fe56 	bl	8001448 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0b5      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ee      	bne.n	8002798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a1 	beq.w	8002918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d05c      	beq.n	800289c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d141      	bne.n	800286e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe2a 	bl	8001448 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fe26 	bl	8001448 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e087      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	491b      	ldr	r1, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fdff 	bl	8001448 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fdfb 	bl	8001448 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e05c      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x416>
 800286c:	e054      	b.n	8002918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fde8 	bl	8001448 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fde4 	bl	8001448 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e045      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x444>
 800289a:	e03d      	b.n	8002918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e038      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d028      	beq.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d121      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	3b01      	subs	r3, #1
 80028fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0cc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d90c      	bls.n	8002964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d044      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e067      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fd16 	bl	8001448 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe fd12 	bl	8001448 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d20c      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fc76 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08005eb0 	.word	0x08005eb0
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b094      	sub	sp, #80	; 0x50
 8002afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
 8002b00:	2300      	movs	r3, #0
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b04:	2300      	movs	r3, #0
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0c:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d00d      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x40>
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	f200 80e1 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b26:	e0db      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b73      	ldr	r3, [pc, #460]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b2c:	e0db      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b32:	e0d8      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	4b6f      	ldr	r3, [pc, #444]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	2200      	movs	r2, #0
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
 8002b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b66:	4622      	mov	r2, r4
 8002b68:	462b      	mov	r3, r5
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	6139      	str	r1, [r7, #16]
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bac:	4659      	mov	r1, fp
 8002bae:	eb63 0901 	sbc.w	r9, r3, r1
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	eb18 0303 	adds.w	r3, r8, r3
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	eb49 0303 	adc.w	r3, r9, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002be6:	4629      	mov	r1, r5
 8002be8:	024b      	lsls	r3, r1, #9
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	024a      	lsls	r2, r1, #9
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c04:	f7fd fb44 	bl	8000290 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c10:	e058      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	464b      	mov	r3, r9
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0159      	lsls	r1, r3, #5
 8002c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3e:	0150      	lsls	r0, r2, #5
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4641      	mov	r1, r8
 8002c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c64:	ebb2 040a 	subs.w	r4, r2, sl
 8002c68:	eb63 050b 	sbc.w	r5, r3, fp
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	464b      	mov	r3, r9
 8002c88:	eb45 0303 	adc.w	r3, r5, r3
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	61fa      	str	r2, [r7, #28]
 8002cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb8:	f7fd faea 	bl	8000290 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3750      	adds	r7, #80	; 0x50
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08005ec0 	.word	0x08005ec0

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffdc 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0b5b      	lsrs	r3, r3, #13
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08005ec0 	.word	0x08005ec0

08002d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e041      	b.n	8002dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fe f88a 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 fa96 	bl	80032d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e04e      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d01d      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x80>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d010      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e007      	b.n	8002ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40000c00 	.word	0x40000c00
 8002edc:	40010400 	.word	0x40010400
 8002ee0:	40014000 	.word	0x40014000
 8002ee4:	40001800 	.word	0x40001800

08002ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0202 	mvn.w	r2, #2
 8002f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f9b5 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9a7 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f9b8 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0204 	mvn.w	r2, #4
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f98b 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f97d 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f98e 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0208 	mvn.w	r2, #8
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f961 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f953 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f964 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2208      	movs	r2, #8
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f937 	bl	800329a <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f929 	bl	8003286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f93a 	bl	80032ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0201 	mvn.w	r2, #1
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fd1a 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d107      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fae0 	bl	8003658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8ff 	bl	80032c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0220 	mvn.w	r2, #32
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 faaa 	bl	8003644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_TIM_ConfigClockSource+0x1c>
 8003110:	2302      	movs	r3, #2
 8003112:	e0b4      	b.n	800327e <HAL_TIM_ConfigClockSource+0x186>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800313a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314c:	d03e      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0xd4>
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003152:	f200 8087 	bhi.w	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315a:	f000 8086 	beq.w	800326a <HAL_TIM_ConfigClockSource+0x172>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	d87f      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b70      	cmp	r3, #112	; 0x70
 8003166:	d01a      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xa6>
 8003168:	2b70      	cmp	r3, #112	; 0x70
 800316a:	d87b      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b60      	cmp	r3, #96	; 0x60
 800316e:	d050      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x11a>
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d877      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b50      	cmp	r3, #80	; 0x50
 8003176:	d03c      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003178:	2b50      	cmp	r3, #80	; 0x50
 800317a:	d873      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d058      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x13a>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d86f      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b30      	cmp	r3, #48	; 0x30
 8003186:	d064      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	2b30      	cmp	r3, #48	; 0x30
 800318a:	d86b      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b20      	cmp	r3, #32
 800318e:	d060      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	2b20      	cmp	r3, #32
 8003192:	d867      	bhi.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05c      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x15a>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d05a      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x15a>
 800319c:	e062      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f000 f9ad 	bl	800350c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	609a      	str	r2, [r3, #8]
      break;
 80031ca:	e04f      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f000 f996 	bl	800350c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ee:	609a      	str	r2, [r3, #8]
      break;
 80031f0:	e03c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 f90a 	bl	8003418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2150      	movs	r1, #80	; 0x50
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f963 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8003210:	e02c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 f929 	bl	8003476 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2160      	movs	r1, #96	; 0x60
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f953 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8003230:	e01c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 f8ea 	bl	8003418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f943 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8003250:	e00c      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f000 f93a 	bl	80034d6 <TIM_ITRx_SetConfig>
      break;
 8003262:	e003      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e000      	b.n	800326c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800326a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <TIM_Base_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f6:	d00f      	beq.n	8003318 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3d      	ldr	r2, [pc, #244]	; (80033f0 <TIM_Base_SetConfig+0x118>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <TIM_Base_SetConfig+0x11c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <TIM_Base_SetConfig+0x120>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3a      	ldr	r2, [pc, #232]	; (80033fc <TIM_Base_SetConfig+0x124>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d108      	bne.n	800332a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <TIM_Base_SetConfig+0x114>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d027      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <TIM_Base_SetConfig+0x118>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d023      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <TIM_Base_SetConfig+0x11c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01f      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <TIM_Base_SetConfig+0x120>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01b      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <TIM_Base_SetConfig+0x124>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d017      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a28      	ldr	r2, [pc, #160]	; (8003400 <TIM_Base_SetConfig+0x128>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <TIM_Base_SetConfig+0x12c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00f      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <TIM_Base_SetConfig+0x130>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a25      	ldr	r2, [pc, #148]	; (800340c <TIM_Base_SetConfig+0x134>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <TIM_Base_SetConfig+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <TIM_Base_SetConfig+0x13c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_Base_SetConfig+0xf8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <TIM_Base_SetConfig+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40010400 	.word	0x40010400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	40001800 	.word	0x40001800
 8003410:	40001c00 	.word	0x40001c00
 8003414:	40002000 	.word	0x40002000

08003418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 030a 	bic.w	r3, r3, #10
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0210 	bic.w	r2, r3, #16
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f043 0307 	orr.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	431a      	orrs	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e05a      	b.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d01d      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800

08003644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e03f      	b.n	80036fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fc38 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fddf 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b08a      	sub	sp, #40	; 0x28
 800370a:	af02      	add	r7, sp, #8
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	d17c      	bne.n	8003820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_UART_Transmit+0x2c>
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e075      	b.n	8003822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UART_Transmit+0x3e>
 8003740:	2302      	movs	r3, #2
 8003742:	e06e      	b.n	8003822 <HAL_UART_Transmit+0x11c>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2221      	movs	r2, #33	; 0x21
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375a:	f7fd fe75 	bl	8001448 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d108      	bne.n	8003788 <HAL_UART_Transmit+0x82>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e003      	b.n	8003790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003798:	e02a      	b.n	80037f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fb1f 	bl	8003de8 <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e036      	b.n	8003822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3302      	adds	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	e007      	b.n	80037e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1cf      	bne.n	800379a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 faef 	bl	8003de8 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e006      	b.n	8003822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d11d      	bne.n	8003880 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_UART_Receive_IT+0x26>
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e016      	b.n	8003882 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_UART_Receive_IT+0x38>
 800385e:	2302      	movs	r3, #2
 8003860:	e00f      	b.n	8003882 <HAL_UART_Receive_IT+0x58>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	461a      	mov	r2, r3
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fb24 	bl	8003ec4 <UART_Start_Receive_IT>
 800387c:	4603      	mov	r3, r0
 800387e:	e000      	b.n	8003882 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0ba      	sub	sp, #232	; 0xe8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fc07 	bl	80040fe <UART_Receive_IT>
      return;
 80038f0:	e256      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80de 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
 80038fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80d1 	beq.w	8003ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
 8003946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
 800396a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 81ed 	beq.w	8003d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb92 	bl	80040fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_UART_IRQHandler+0x17a>
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04f      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa9a 	bl	8003f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d141      	bne.n	8003a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1d9      	bne.n	8003a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	4a7d      	ldr	r2, [pc, #500]	; (8003c68 <HAL_UART_IRQHandler+0x3dc>)
 8003a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fe95 	bl	80017aa <HAL_DMA_Abort_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a90:	4610      	mov	r0, r2
 8003a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00e      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f990 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00a      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f98c 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e006      	b.n	8003ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f988 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ab2:	e170      	b.n	8003d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	bf00      	nop
    return;
 8003ab6:	e16e      	b.n	8003d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 814a 	bne.w	8003d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8143 	beq.w	8003d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 813c 	beq.w	8003d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	f040 80b4 	bne.w	8003c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8140 	beq.w	8003d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f080 8139 	bcs.w	8003d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3a:	f000 8088 	beq.w	8003c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	330c      	adds	r3, #12
 8003b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1d9      	bne.n	8003b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3314      	adds	r3, #20
 8003b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e1      	bne.n	8003b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e3      	bne.n	8003c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd fd3e 	bl	80016ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8b6 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c64:	e099      	b.n	8003d9a <HAL_UART_IRQHandler+0x50e>
 8003c66:	bf00      	nop
 8003c68:	08004007 	.word	0x08004007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 808b 	beq.w	8003d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8086 	beq.w	8003d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3314      	adds	r3, #20
 8003cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cee:	633a      	str	r2, [r7, #48]	; 0x30
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e3      	bne.n	8003cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0310 	bic.w	r3, r3, #16
 8003d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d34:	61fa      	str	r2, [r7, #28]
 8003d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	617b      	str	r3, [r7, #20]
   return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e3      	bne.n	8003d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f83e 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d54:	e023      	b.n	8003d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_UART_IRQHandler+0x4ea>
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f95d 	bl	800402e <UART_Transmit_IT>
    return;
 8003d74:	e014      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <HAL_UART_IRQHandler+0x514>
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f99d 	bl	80040ce <UART_EndTransmit_IT>
    return;
 8003d94:	e004      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
    return;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
      return;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_UART_IRQHandler+0x514>
      return;
 8003d9e:	bf00      	nop
  }
}
 8003da0:	37e8      	adds	r7, #232	; 0xe8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b090      	sub	sp, #64	; 0x40
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df8:	e050      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d04c      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e08:	f7fd fb1e 	bl	8001448 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d241      	bcs.n	8003e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e38:	637a      	str	r2, [r7, #52]	; 0x34
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6c:	623a      	str	r2, [r7, #32]
 8003e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	69f9      	ldr	r1, [r7, #28]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e00f      	b.n	8003ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d09f      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3740      	adds	r7, #64	; 0x40
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2222      	movs	r2, #34	; 0x22
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b095      	sub	sp, #84	; 0x54
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f68:	643a      	str	r2, [r7, #64]	; 0x40
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d119      	bne.n	8003fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f023 0310 	bic.w	r3, r3, #16
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd8:	61ba      	str	r2, [r7, #24]
 8003fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ffa:	bf00      	nop
 8003ffc:	3754      	adds	r7, #84	; 0x54
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fecb 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b21      	cmp	r3, #33	; 0x21
 8004040:	d13e      	bne.n	80040c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d114      	bne.n	8004076 <UART_Transmit_IT+0x48>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]
 8004074:	e008      	b.n	8004088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6211      	str	r1, [r2, #32]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4619      	mov	r1, r3
 8004096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10f      	bne.n	80040bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fe5a 	bl	8003da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b08c      	sub	sp, #48	; 0x30
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b22      	cmp	r3, #34	; 0x22
 8004110:	f040 80ab 	bne.w	800426a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d117      	bne.n	800414e <UART_Receive_IT+0x50>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d113      	bne.n	800414e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	b29a      	uxth	r2, r3
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28
 800414c:	e026      	b.n	800419c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d007      	beq.n	8004172 <UART_Receive_IT+0x74>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <UART_Receive_IT+0x82>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e008      	b.n	8004192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418c:	b2da      	uxtb	r2, r3
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4619      	mov	r1, r3
 80041aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d15a      	bne.n	8004266 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0220 	bic.w	r2, r2, #32
 80041be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d135      	bne.n	800425c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	613b      	str	r3, [r7, #16]
   return(result);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f023 0310 	bic.w	r3, r3, #16
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004216:	623a      	str	r2, [r7, #32]
 8004218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	69f9      	ldr	r1, [r7, #28]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	61bb      	str	r3, [r7, #24]
   return(result);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d10a      	bne.n	800424e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fdbb 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
 800425a:	e002      	b.n	8004262 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fc fd07 	bl	8000c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e002      	b.n	800426c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3730      	adds	r7, #48	; 0x30
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b0c0      	sub	sp, #256	; 0x100
 800427a:	af00      	add	r7, sp, #0
 800427c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	ea40 0301 	orr.w	r3, r0, r1
 800429c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042cc:	f021 010c 	bic.w	r1, r1, #12
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042da:	430b      	orrs	r3, r1
 80042dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	6999      	ldr	r1, [r3, #24]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	ea40 0301 	orr.w	r3, r0, r1
 80042fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <UART_SetConfig+0x2cc>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <UART_SetConfig+0xa0>
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <UART_SetConfig+0x2d0>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d104      	bne.n	800431e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7fe fd14 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8004318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800431c:	e003      	b.n	8004326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7fe fcfb 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8004322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	f040 810c 	bne.w	800454c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800433e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	1891      	adds	r1, r2, r2
 800434c:	65b9      	str	r1, [r7, #88]	; 0x58
 800434e:	415b      	adcs	r3, r3
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004356:	4621      	mov	r1, r4
 8004358:	eb12 0801 	adds.w	r8, r2, r1
 800435c:	4629      	mov	r1, r5
 800435e:	eb43 0901 	adc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004384:	462b      	mov	r3, r5
 8004386:	eb49 0303 	adc.w	r3, r9, r3
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800439a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800439e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043a2:	460b      	mov	r3, r1
 80043a4:	18db      	adds	r3, r3, r3
 80043a6:	653b      	str	r3, [r7, #80]	; 0x50
 80043a8:	4613      	mov	r3, r2
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	657b      	str	r3, [r7, #84]	; 0x54
 80043b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043b8:	f7fb ff6a 	bl	8000290 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b61      	ldr	r3, [pc, #388]	; (8004548 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011c      	lsls	r4, r3, #4
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043e4:	415b      	adcs	r3, r3
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ec:	4641      	mov	r1, r8
 80043ee:	eb12 0a01 	adds.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb43 0b01 	adc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440c:	4692      	mov	sl, r2
 800440e:	469b      	mov	fp, r3
 8004410:	4643      	mov	r3, r8
 8004412:	eb1a 0303 	adds.w	r3, sl, r3
 8004416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800441a:	464b      	mov	r3, r9
 800441c:	eb4b 0303 	adc.w	r3, fp, r3
 8004420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004438:	460b      	mov	r3, r1
 800443a:	18db      	adds	r3, r3, r3
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
 800443e:	4613      	mov	r3, r2
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	647b      	str	r3, [r7, #68]	; 0x44
 8004446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800444a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800444e:	f7fb ff1f 	bl	8000290 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <UART_SetConfig+0x2d4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <UART_SetConfig+0x2d4>)
 8004470:	fba3 2302 	umull	r2, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800447c:	441c      	add	r4, r3
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800448c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	63b9      	str	r1, [r7, #56]	; 0x38
 8004498:	415b      	adcs	r3, r3
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6339      	str	r1, [r7, #48]	; 0x30
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800450a:	f7fb fec1 	bl	8000290 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <UART_SetConfig+0x2d4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	; 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	3332      	adds	r3, #50	; 0x32
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <UART_SetConfig+0x2d4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4422      	add	r2, r4
 800453a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800453c:	e105      	b.n	800474a <UART_SetConfig+0x4d6>
 800453e:	bf00      	nop
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800455a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	6239      	str	r1, [r7, #32]
 8004566:	415b      	adcs	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800456e:	4641      	mov	r1, r8
 8004570:	1854      	adds	r4, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0501 	adc.w	r5, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	00eb      	lsls	r3, r5, #3
 8004582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	4614      	mov	r4, r2
 800458a:	461d      	mov	r5, r3
 800458c:	4643      	mov	r3, r8
 800458e:	18e3      	adds	r3, r4, r3
 8004590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004594:	464b      	mov	r3, r9
 8004596:	eb45 0303 	adc.w	r3, r5, r3
 800459a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ba:	4629      	mov	r1, r5
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4621      	mov	r1, r4
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045cc:	f7fb fe60 	bl	8000290 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b60      	ldr	r3, [pc, #384]	; (8004758 <UART_SetConfig+0x4e4>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	011c      	lsls	r4, r3, #4
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	61b9      	str	r1, [r7, #24]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6139      	str	r1, [r7, #16]
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	67bb      	str	r3, [r7, #120]	; 0x78
 800464a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800466a:	f7fb fe11 	bl	8000290 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <UART_SetConfig+0x4e4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a34      	ldr	r2, [pc, #208]	; (8004758 <UART_SetConfig+0x4e4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004692:	441c      	add	r4, r3
 8004694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004698:	2200      	movs	r2, #0
 800469a:	673b      	str	r3, [r7, #112]	; 0x70
 800469c:	677a      	str	r2, [r7, #116]	; 0x74
 800469e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046a2:	4642      	mov	r2, r8
 80046a4:	464b      	mov	r3, r9
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	415b      	adcs	r3, r3
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b2:	4641      	mov	r1, r8
 80046b4:	1851      	adds	r1, r2, r1
 80046b6:	6039      	str	r1, [r7, #0]
 80046b8:	4649      	mov	r1, r9
 80046ba:	414b      	adcs	r3, r1
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ca:	4659      	mov	r1, fp
 80046cc:	00cb      	lsls	r3, r1, #3
 80046ce:	4651      	mov	r1, sl
 80046d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d4:	4651      	mov	r1, sl
 80046d6:	00ca      	lsls	r2, r1, #3
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	4603      	mov	r3, r0
 80046de:	4642      	mov	r2, r8
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e4:	464b      	mov	r3, r9
 80046e6:	460a      	mov	r2, r1
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
 80046f8:	667a      	str	r2, [r7, #100]	; 0x64
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004706:	4649      	mov	r1, r9
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	4641      	mov	r1, r8
 800470c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004710:	4641      	mov	r1, r8
 8004712:	008a      	lsls	r2, r1, #2
 8004714:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004718:	f7fb fdba 	bl	8000290 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <UART_SetConfig+0x4e4>)
 8004722:	fba3 1302 	umull	r1, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2164      	movs	r1, #100	; 0x64
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <UART_SetConfig+0x4e4>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4422      	add	r2, r4
 8004748:	609a      	str	r2, [r3, #8]
}
 800474a:	bf00      	nop
 800474c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004756:	bf00      	nop
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800475c:	b084      	sub	sp, #16
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	f107 001c 	add.w	r0, r7, #28
 800476a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b01      	cmp	r3, #1
 8004772:	d122      	bne.n	80047ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 faa2 	bl	8004cf8 <USB_CoreReset>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e01a      	b.n	80047f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa96 	bl	8004cf8 <USB_CoreReset>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
 80047e2:	e005      	b.n	80047f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10b      	bne.n	800480e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f043 0206 	orr.w	r2, r3, #6
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481a:	b004      	add	sp, #16
 800481c:	4770      	bx	lr

0800481e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486e:	2001      	movs	r0, #1
 8004870:	f7fc fdf6 	bl	8001460 <HAL_Delay>
      ms++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa2e 	bl	8004cdc <USB_GetMode>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d01e      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b31      	cmp	r3, #49	; 0x31
 800488a:	d9f0      	bls.n	800486e <USB_SetCurrentMode+0x2e>
 800488c:	e01a      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d115      	bne.n	80048c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fc fddd 	bl	8001460 <HAL_Delay>
      ms++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fa15 	bl	8004cdc <USB_GetMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b31      	cmp	r3, #49	; 0x31
 80048bc:	d9f0      	bls.n	80048a0 <USB_SetCurrentMode+0x60>
 80048be:	e001      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e005      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b32      	cmp	r3, #50	; 0x32
 80048c8:	d101      	bne.n	80048ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048d8:	b084      	sub	sp, #16
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e009      	b.n	800490c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3340      	adds	r3, #64	; 0x40
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3301      	adds	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0e      	cmp	r3, #14
 8004910:	d9f2      	bls.n	80048f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11c      	bne.n	8004952 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
 8004950:	e00b      	b.n	800496a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	4619      	mov	r1, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	461a      	mov	r2, r3
 8004986:	680b      	ldr	r3, [r1, #0]
 8004988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10c      	bne.n	80049aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004996:	2100      	movs	r1, #0
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f965 	bl	8004c68 <USB_SetDevSpeed>
 800499e:	e008      	b.n	80049b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049a0:	2101      	movs	r1, #1
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f960 	bl	8004c68 <USB_SetDevSpeed>
 80049a8:	e003      	b.n	80049b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049aa:	2103      	movs	r1, #3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f95b 	bl	8004c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049b2:	2110      	movs	r1, #16
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8f3 	bl	8004ba0 <USB_FlushTxFifo>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f91f 	bl	8004c08 <USB_FlushRxFifo>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	461a      	mov	r2, r3
 80049e8:	2300      	movs	r3, #0
 80049ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e043      	b.n	8004a86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a14:	d118      	bne.n	8004a48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e013      	b.n	8004a5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e008      	b.n	8004a5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3301      	adds	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b7      	bcc.n	80049fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e043      	b.n	8004b1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aaa:	d118      	bne.n	8004ade <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e013      	b.n	8004af0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e008      	b.n	8004af0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3b7      	bcc.n	8004a94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 0210 	orr.w	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <USB_DevInit+0x2c4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f043 0208 	orr.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d107      	bne.n	8004b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	803c3800 	.word	0x803c3800

08004ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e01b      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	daf2      	bge.n	8004bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <USB_FlushTxFifo+0x64>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e006      	b.n	8004bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d0f0      	beq.n	8004bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	00030d40 	.word	0x00030d40

08004c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e018      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	daf2      	bge.n	8004c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2210      	movs	r2, #16
 8004c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e006      	b.n	8004c58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d0f0      	beq.n	8004c38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	00030d40 	.word	0x00030d40

08004c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb4:	f023 0303 	bic.w	r3, r3, #3
 8004cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <USB_CoreReset+0x64>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01b      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	daf2      	bge.n	8004d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <USB_CoreReset+0x64>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d0f0      	beq.n	8004d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	00030d40 	.word	0x00030d40

08004d60 <__errno>:
 8004d60:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <__errno+0x8>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <__libc_init_array>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4d0d      	ldr	r5, [pc, #52]	; (8004da4 <__libc_init_array+0x38>)
 8004d70:	4c0d      	ldr	r4, [pc, #52]	; (8004da8 <__libc_init_array+0x3c>)
 8004d72:	1b64      	subs	r4, r4, r5
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	2600      	movs	r6, #0
 8004d78:	42a6      	cmp	r6, r4
 8004d7a:	d109      	bne.n	8004d90 <__libc_init_array+0x24>
 8004d7c:	4d0b      	ldr	r5, [pc, #44]	; (8004dac <__libc_init_array+0x40>)
 8004d7e:	4c0c      	ldr	r4, [pc, #48]	; (8004db0 <__libc_init_array+0x44>)
 8004d80:	f001 f87c 	bl	8005e7c <_init>
 8004d84:	1b64      	subs	r4, r4, r5
 8004d86:	10a4      	asrs	r4, r4, #2
 8004d88:	2600      	movs	r6, #0
 8004d8a:	42a6      	cmp	r6, r4
 8004d8c:	d105      	bne.n	8004d9a <__libc_init_array+0x2e>
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d94:	4798      	blx	r3
 8004d96:	3601      	adds	r6, #1
 8004d98:	e7ee      	b.n	8004d78 <__libc_init_array+0xc>
 8004d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9e:	4798      	blx	r3
 8004da0:	3601      	adds	r6, #1
 8004da2:	e7f2      	b.n	8004d8a <__libc_init_array+0x1e>
 8004da4:	08005f68 	.word	0x08005f68
 8004da8:	08005f68 	.word	0x08005f68
 8004dac:	08005f68 	.word	0x08005f68
 8004db0:	08005f6c 	.word	0x08005f6c

08004db4 <memset>:
 8004db4:	4402      	add	r2, r0
 8004db6:	4603      	mov	r3, r0
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <iprintf>:
 8004dc4:	b40f      	push	{r0, r1, r2, r3}
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <iprintf+0x2c>)
 8004dc8:	b513      	push	{r0, r1, r4, lr}
 8004dca:	681c      	ldr	r4, [r3, #0]
 8004dcc:	b124      	cbz	r4, 8004dd8 <iprintf+0x14>
 8004dce:	69a3      	ldr	r3, [r4, #24]
 8004dd0:	b913      	cbnz	r3, 8004dd8 <iprintf+0x14>
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f000 f9ee 	bl	80051b4 <__sinit>
 8004dd8:	ab05      	add	r3, sp, #20
 8004dda:	9a04      	ldr	r2, [sp, #16]
 8004ddc:	68a1      	ldr	r1, [r4, #8]
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fbff 	bl	80055e4 <_vfiprintf_r>
 8004de6:	b002      	add	sp, #8
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	b004      	add	sp, #16
 8004dee:	4770      	bx	lr
 8004df0:	2000000c 	.word	0x2000000c

08004df4 <setvbuf>:
 8004df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	461d      	mov	r5, r3
 8004dfa:	4b5d      	ldr	r3, [pc, #372]	; (8004f70 <setvbuf+0x17c>)
 8004dfc:	681f      	ldr	r7, [r3, #0]
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460e      	mov	r6, r1
 8004e02:	4690      	mov	r8, r2
 8004e04:	b127      	cbz	r7, 8004e10 <setvbuf+0x1c>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	b913      	cbnz	r3, 8004e10 <setvbuf+0x1c>
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f000 f9d2 	bl	80051b4 <__sinit>
 8004e10:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <setvbuf+0x180>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d167      	bne.n	8004ee6 <setvbuf+0xf2>
 8004e16:	687c      	ldr	r4, [r7, #4]
 8004e18:	f1b8 0f02 	cmp.w	r8, #2
 8004e1c:	d006      	beq.n	8004e2c <setvbuf+0x38>
 8004e1e:	f1b8 0f01 	cmp.w	r8, #1
 8004e22:	f200 809f 	bhi.w	8004f64 <setvbuf+0x170>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	f2c0 809c 	blt.w	8004f64 <setvbuf+0x170>
 8004e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e2e:	07db      	lsls	r3, r3, #31
 8004e30:	d405      	bmi.n	8004e3e <setvbuf+0x4a>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	0598      	lsls	r0, r3, #22
 8004e36:	d402      	bmi.n	8004e3e <setvbuf+0x4a>
 8004e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3a:	f000 fa59 	bl	80052f0 <__retarget_lock_acquire_recursive>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4638      	mov	r0, r7
 8004e42:	f000 f923 	bl	800508c <_fflush_r>
 8004e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e48:	b141      	cbz	r1, 8004e5c <setvbuf+0x68>
 8004e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	d002      	beq.n	8004e58 <setvbuf+0x64>
 8004e52:	4638      	mov	r0, r7
 8004e54:	f000 fabc 	bl	80053d0 <_free_r>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6363      	str	r3, [r4, #52]	; 0x34
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61a3      	str	r3, [r4, #24]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	0619      	lsls	r1, r3, #24
 8004e66:	d503      	bpl.n	8004e70 <setvbuf+0x7c>
 8004e68:	6921      	ldr	r1, [r4, #16]
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 fab0 	bl	80053d0 <_free_r>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	f1b8 0f02 	cmp.w	r8, #2
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	d06c      	beq.n	8004f5c <setvbuf+0x168>
 8004e82:	ab01      	add	r3, sp, #4
 8004e84:	466a      	mov	r2, sp
 8004e86:	4621      	mov	r1, r4
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f000 fa33 	bl	80052f4 <__swhatbuf_r>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	4318      	orrs	r0, r3
 8004e92:	81a0      	strh	r0, [r4, #12]
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	d130      	bne.n	8004efa <setvbuf+0x106>
 8004e98:	9d00      	ldr	r5, [sp, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 fa90 	bl	80053c0 <malloc>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d155      	bne.n	8004f52 <setvbuf+0x15e>
 8004ea6:	f8dd 9000 	ldr.w	r9, [sp]
 8004eaa:	45a9      	cmp	r9, r5
 8004eac:	d14a      	bne.n	8004f44 <setvbuf+0x150>
 8004eae:	f04f 35ff 	mov.w	r5, #4294967295
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	60a2      	str	r2, [r4, #8]
 8004eb6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004eba:	6022      	str	r2, [r4, #0]
 8004ebc:	6122      	str	r2, [r4, #16]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec4:	6162      	str	r2, [r4, #20]
 8004ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	07d2      	lsls	r2, r2, #31
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	d405      	bmi.n	8004ede <setvbuf+0xea>
 8004ed2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004ed6:	d102      	bne.n	8004ede <setvbuf+0xea>
 8004ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eda:	f000 fa0a 	bl	80052f2 <__retarget_lock_release_recursive>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	b003      	add	sp, #12
 8004ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <setvbuf+0x184>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	d101      	bne.n	8004ef0 <setvbuf+0xfc>
 8004eec:	68bc      	ldr	r4, [r7, #8]
 8004eee:	e793      	b.n	8004e18 <setvbuf+0x24>
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <setvbuf+0x188>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	bf08      	it	eq
 8004ef6:	68fc      	ldreq	r4, [r7, #12]
 8004ef8:	e78e      	b.n	8004e18 <setvbuf+0x24>
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d0cd      	beq.n	8004e9a <setvbuf+0xa6>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	b913      	cbnz	r3, 8004f08 <setvbuf+0x114>
 8004f02:	4638      	mov	r0, r7
 8004f04:	f000 f956 	bl	80051b4 <__sinit>
 8004f08:	f1b8 0f01 	cmp.w	r8, #1
 8004f0c:	bf08      	it	eq
 8004f0e:	89a3      	ldrheq	r3, [r4, #12]
 8004f10:	6026      	str	r6, [r4, #0]
 8004f12:	bf04      	itt	eq
 8004f14:	f043 0301 	orreq.w	r3, r3, #1
 8004f18:	81a3      	strheq	r3, [r4, #12]
 8004f1a:	89a2      	ldrh	r2, [r4, #12]
 8004f1c:	f012 0308 	ands.w	r3, r2, #8
 8004f20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004f24:	d01c      	beq.n	8004f60 <setvbuf+0x16c>
 8004f26:	07d3      	lsls	r3, r2, #31
 8004f28:	bf41      	itttt	mi
 8004f2a:	2300      	movmi	r3, #0
 8004f2c:	426d      	negmi	r5, r5
 8004f2e:	60a3      	strmi	r3, [r4, #8]
 8004f30:	61a5      	strmi	r5, [r4, #24]
 8004f32:	bf58      	it	pl
 8004f34:	60a5      	strpl	r5, [r4, #8]
 8004f36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004f38:	f015 0501 	ands.w	r5, r5, #1
 8004f3c:	d115      	bne.n	8004f6a <setvbuf+0x176>
 8004f3e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004f42:	e7c8      	b.n	8004ed6 <setvbuf+0xe2>
 8004f44:	4648      	mov	r0, r9
 8004f46:	f000 fa3b 	bl	80053c0 <malloc>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0ae      	beq.n	8004eae <setvbuf+0xba>
 8004f50:	464d      	mov	r5, r9
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	e7d0      	b.n	8004efe <setvbuf+0x10a>
 8004f5c:	2500      	movs	r5, #0
 8004f5e:	e7a8      	b.n	8004eb2 <setvbuf+0xbe>
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	e7e8      	b.n	8004f36 <setvbuf+0x142>
 8004f64:	f04f 35ff 	mov.w	r5, #4294967295
 8004f68:	e7b9      	b.n	8004ede <setvbuf+0xea>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	e7b7      	b.n	8004ede <setvbuf+0xea>
 8004f6e:	bf00      	nop
 8004f70:	2000000c 	.word	0x2000000c
 8004f74:	08005eec 	.word	0x08005eec
 8004f78:	08005f0c 	.word	0x08005f0c
 8004f7c:	08005ecc 	.word	0x08005ecc

08004f80 <__sflush_r>:
 8004f80:	898a      	ldrh	r2, [r1, #12]
 8004f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f86:	4605      	mov	r5, r0
 8004f88:	0710      	lsls	r0, r2, #28
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	d458      	bmi.n	8005040 <__sflush_r+0xc0>
 8004f8e:	684b      	ldr	r3, [r1, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc05      	bgt.n	8004fa0 <__sflush_r+0x20>
 8004f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dc02      	bgt.n	8004fa0 <__sflush_r+0x20>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d0f9      	beq.n	8004f9a <__sflush_r+0x1a>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fac:	682f      	ldr	r7, [r5, #0]
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	d032      	beq.n	8005018 <__sflush_r+0x98>
 8004fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	075a      	lsls	r2, r3, #29
 8004fb8:	d505      	bpl.n	8004fc6 <__sflush_r+0x46>
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	1ac0      	subs	r0, r0, r3
 8004fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fc0:	b10b      	cbz	r3, 8004fc6 <__sflush_r+0x46>
 8004fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc4:	1ac0      	subs	r0, r0, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b0      	blx	r6
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	d106      	bne.n	8004fe6 <__sflush_r+0x66>
 8004fd8:	6829      	ldr	r1, [r5, #0]
 8004fda:	291d      	cmp	r1, #29
 8004fdc:	d82c      	bhi.n	8005038 <__sflush_r+0xb8>
 8004fde:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <__sflush_r+0x108>)
 8004fe0:	40ca      	lsrs	r2, r1
 8004fe2:	07d6      	lsls	r6, r2, #31
 8004fe4:	d528      	bpl.n	8005038 <__sflush_r+0xb8>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6062      	str	r2, [r4, #4]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	d504      	bpl.n	8004ffc <__sflush_r+0x7c>
 8004ff2:	1c42      	adds	r2, r0, #1
 8004ff4:	d101      	bne.n	8004ffa <__sflush_r+0x7a>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	b903      	cbnz	r3, 8004ffc <__sflush_r+0x7c>
 8004ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8004ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffe:	602f      	str	r7, [r5, #0]
 8005000:	2900      	cmp	r1, #0
 8005002:	d0ca      	beq.n	8004f9a <__sflush_r+0x1a>
 8005004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005008:	4299      	cmp	r1, r3
 800500a:	d002      	beq.n	8005012 <__sflush_r+0x92>
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f9df 	bl	80053d0 <_free_r>
 8005012:	2000      	movs	r0, #0
 8005014:	6360      	str	r0, [r4, #52]	; 0x34
 8005016:	e7c1      	b.n	8004f9c <__sflush_r+0x1c>
 8005018:	6a21      	ldr	r1, [r4, #32]
 800501a:	2301      	movs	r3, #1
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	1c41      	adds	r1, r0, #1
 8005022:	d1c7      	bne.n	8004fb4 <__sflush_r+0x34>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0c4      	beq.n	8004fb4 <__sflush_r+0x34>
 800502a:	2b1d      	cmp	r3, #29
 800502c:	d001      	beq.n	8005032 <__sflush_r+0xb2>
 800502e:	2b16      	cmp	r3, #22
 8005030:	d101      	bne.n	8005036 <__sflush_r+0xb6>
 8005032:	602f      	str	r7, [r5, #0]
 8005034:	e7b1      	b.n	8004f9a <__sflush_r+0x1a>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	e7ad      	b.n	8004f9c <__sflush_r+0x1c>
 8005040:	690f      	ldr	r7, [r1, #16]
 8005042:	2f00      	cmp	r7, #0
 8005044:	d0a9      	beq.n	8004f9a <__sflush_r+0x1a>
 8005046:	0793      	lsls	r3, r2, #30
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	bf08      	it	eq
 800504c:	694b      	ldreq	r3, [r1, #20]
 800504e:	600f      	str	r7, [r1, #0]
 8005050:	bf18      	it	ne
 8005052:	2300      	movne	r3, #0
 8005054:	eba6 0807 	sub.w	r8, r6, r7
 8005058:	608b      	str	r3, [r1, #8]
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	dd9c      	ble.n	8004f9a <__sflush_r+0x1a>
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005064:	4643      	mov	r3, r8
 8005066:	463a      	mov	r2, r7
 8005068:	4628      	mov	r0, r5
 800506a:	47b0      	blx	r6
 800506c:	2800      	cmp	r0, #0
 800506e:	dc06      	bgt.n	800507e <__sflush_r+0xfe>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e78e      	b.n	8004f9c <__sflush_r+0x1c>
 800507e:	4407      	add	r7, r0
 8005080:	eba8 0800 	sub.w	r8, r8, r0
 8005084:	e7e9      	b.n	800505a <__sflush_r+0xda>
 8005086:	bf00      	nop
 8005088:	20400001 	.word	0x20400001

0800508c <_fflush_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	4605      	mov	r5, r0
 8005092:	460c      	mov	r4, r1
 8005094:	b913      	cbnz	r3, 800509c <_fflush_r+0x10>
 8005096:	2500      	movs	r5, #0
 8005098:	4628      	mov	r0, r5
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	b118      	cbz	r0, 80050a6 <_fflush_r+0x1a>
 800509e:	6983      	ldr	r3, [r0, #24]
 80050a0:	b90b      	cbnz	r3, 80050a6 <_fflush_r+0x1a>
 80050a2:	f000 f887 	bl	80051b4 <__sinit>
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <_fflush_r+0x6c>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	d11b      	bne.n	80050e4 <_fflush_r+0x58>
 80050ac:	686c      	ldr	r4, [r5, #4]
 80050ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ef      	beq.n	8005096 <_fflush_r+0xa>
 80050b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050b8:	07d0      	lsls	r0, r2, #31
 80050ba:	d404      	bmi.n	80050c6 <_fflush_r+0x3a>
 80050bc:	0599      	lsls	r1, r3, #22
 80050be:	d402      	bmi.n	80050c6 <_fflush_r+0x3a>
 80050c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c2:	f000 f915 	bl	80052f0 <__retarget_lock_acquire_recursive>
 80050c6:	4628      	mov	r0, r5
 80050c8:	4621      	mov	r1, r4
 80050ca:	f7ff ff59 	bl	8004f80 <__sflush_r>
 80050ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d0:	07da      	lsls	r2, r3, #31
 80050d2:	4605      	mov	r5, r0
 80050d4:	d4e0      	bmi.n	8005098 <_fflush_r+0xc>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	059b      	lsls	r3, r3, #22
 80050da:	d4dd      	bmi.n	8005098 <_fflush_r+0xc>
 80050dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050de:	f000 f908 	bl	80052f2 <__retarget_lock_release_recursive>
 80050e2:	e7d9      	b.n	8005098 <_fflush_r+0xc>
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_fflush_r+0x70>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d101      	bne.n	80050ee <_fflush_r+0x62>
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	e7df      	b.n	80050ae <_fflush_r+0x22>
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <_fflush_r+0x74>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	bf08      	it	eq
 80050f4:	68ec      	ldreq	r4, [r5, #12]
 80050f6:	e7da      	b.n	80050ae <_fflush_r+0x22>
 80050f8:	08005eec 	.word	0x08005eec
 80050fc:	08005f0c 	.word	0x08005f0c
 8005100:	08005ecc 	.word	0x08005ecc

08005104 <std>:
 8005104:	2300      	movs	r3, #0
 8005106:	b510      	push	{r4, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	e9c0 3300 	strd	r3, r3, [r0]
 800510e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005112:	6083      	str	r3, [r0, #8]
 8005114:	8181      	strh	r1, [r0, #12]
 8005116:	6643      	str	r3, [r0, #100]	; 0x64
 8005118:	81c2      	strh	r2, [r0, #14]
 800511a:	6183      	str	r3, [r0, #24]
 800511c:	4619      	mov	r1, r3
 800511e:	2208      	movs	r2, #8
 8005120:	305c      	adds	r0, #92	; 0x5c
 8005122:	f7ff fe47 	bl	8004db4 <memset>
 8005126:	4b05      	ldr	r3, [pc, #20]	; (800513c <std+0x38>)
 8005128:	6263      	str	r3, [r4, #36]	; 0x24
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <std+0x3c>)
 800512c:	62a3      	str	r3, [r4, #40]	; 0x28
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <std+0x40>)
 8005130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x44>)
 8005134:	6224      	str	r4, [r4, #32]
 8005136:	6323      	str	r3, [r4, #48]	; 0x30
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	08005b8d 	.word	0x08005b8d
 8005140:	08005baf 	.word	0x08005baf
 8005144:	08005be7 	.word	0x08005be7
 8005148:	08005c0b 	.word	0x08005c0b

0800514c <_cleanup_r>:
 800514c:	4901      	ldr	r1, [pc, #4]	; (8005154 <_cleanup_r+0x8>)
 800514e:	f000 b8af 	b.w	80052b0 <_fwalk_reent>
 8005152:	bf00      	nop
 8005154:	0800508d 	.word	0x0800508d

08005158 <__sfmoreglue>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2268      	movs	r2, #104	; 0x68
 800515c:	1e4d      	subs	r5, r1, #1
 800515e:	4355      	muls	r5, r2
 8005160:	460e      	mov	r6, r1
 8005162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005166:	f000 f99f 	bl	80054a8 <_malloc_r>
 800516a:	4604      	mov	r4, r0
 800516c:	b140      	cbz	r0, 8005180 <__sfmoreglue+0x28>
 800516e:	2100      	movs	r1, #0
 8005170:	e9c0 1600 	strd	r1, r6, [r0]
 8005174:	300c      	adds	r0, #12
 8005176:	60a0      	str	r0, [r4, #8]
 8005178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800517c:	f7ff fe1a 	bl	8004db4 <memset>
 8005180:	4620      	mov	r0, r4
 8005182:	bd70      	pop	{r4, r5, r6, pc}

08005184 <__sfp_lock_acquire>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__sfp_lock_acquire+0x8>)
 8005186:	f000 b8b3 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	20000cb1 	.word	0x20000cb1

08005190 <__sfp_lock_release>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_release+0x8>)
 8005192:	f000 b8ae 	b.w	80052f2 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	20000cb1 	.word	0x20000cb1

0800519c <__sinit_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sinit_lock_acquire+0x8>)
 800519e:	f000 b8a7 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000cb2 	.word	0x20000cb2

080051a8 <__sinit_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sinit_lock_release+0x8>)
 80051aa:	f000 b8a2 	b.w	80052f2 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000cb2 	.word	0x20000cb2

080051b4 <__sinit>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fff0 	bl	800519c <__sinit_lock_acquire>
 80051bc:	69a3      	ldr	r3, [r4, #24]
 80051be:	b11b      	cbz	r3, 80051c8 <__sinit+0x14>
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	f7ff bff0 	b.w	80051a8 <__sinit_lock_release>
 80051c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051cc:	6523      	str	r3, [r4, #80]	; 0x50
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <__sinit+0x68>)
 80051d0:	4a13      	ldr	r2, [pc, #76]	; (8005220 <__sinit+0x6c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	bf04      	itt	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	61a3      	streq	r3, [r4, #24]
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f820 	bl	8005224 <__sfp>
 80051e4:	6060      	str	r0, [r4, #4]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f81c 	bl	8005224 <__sfp>
 80051ec:	60a0      	str	r0, [r4, #8]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 f818 	bl	8005224 <__sfp>
 80051f4:	2200      	movs	r2, #0
 80051f6:	60e0      	str	r0, [r4, #12]
 80051f8:	2104      	movs	r1, #4
 80051fa:	6860      	ldr	r0, [r4, #4]
 80051fc:	f7ff ff82 	bl	8005104 <std>
 8005200:	68a0      	ldr	r0, [r4, #8]
 8005202:	2201      	movs	r2, #1
 8005204:	2109      	movs	r1, #9
 8005206:	f7ff ff7d 	bl	8005104 <std>
 800520a:	68e0      	ldr	r0, [r4, #12]
 800520c:	2202      	movs	r2, #2
 800520e:	2112      	movs	r1, #18
 8005210:	f7ff ff78 	bl	8005104 <std>
 8005214:	2301      	movs	r3, #1
 8005216:	61a3      	str	r3, [r4, #24]
 8005218:	e7d2      	b.n	80051c0 <__sinit+0xc>
 800521a:	bf00      	nop
 800521c:	08005ec8 	.word	0x08005ec8
 8005220:	0800514d 	.word	0x0800514d

08005224 <__sfp>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	4607      	mov	r7, r0
 8005228:	f7ff ffac 	bl	8005184 <__sfp_lock_acquire>
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <__sfp+0x84>)
 800522e:	681e      	ldr	r6, [r3, #0]
 8005230:	69b3      	ldr	r3, [r6, #24]
 8005232:	b913      	cbnz	r3, 800523a <__sfp+0x16>
 8005234:	4630      	mov	r0, r6
 8005236:	f7ff ffbd 	bl	80051b4 <__sinit>
 800523a:	3648      	adds	r6, #72	; 0x48
 800523c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005240:	3b01      	subs	r3, #1
 8005242:	d503      	bpl.n	800524c <__sfp+0x28>
 8005244:	6833      	ldr	r3, [r6, #0]
 8005246:	b30b      	cbz	r3, 800528c <__sfp+0x68>
 8005248:	6836      	ldr	r6, [r6, #0]
 800524a:	e7f7      	b.n	800523c <__sfp+0x18>
 800524c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005250:	b9d5      	cbnz	r5, 8005288 <__sfp+0x64>
 8005252:	4b16      	ldr	r3, [pc, #88]	; (80052ac <__sfp+0x88>)
 8005254:	60e3      	str	r3, [r4, #12]
 8005256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800525a:	6665      	str	r5, [r4, #100]	; 0x64
 800525c:	f000 f847 	bl	80052ee <__retarget_lock_init_recursive>
 8005260:	f7ff ff96 	bl	8005190 <__sfp_lock_release>
 8005264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800526c:	6025      	str	r5, [r4, #0]
 800526e:	61a5      	str	r5, [r4, #24]
 8005270:	2208      	movs	r2, #8
 8005272:	4629      	mov	r1, r5
 8005274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005278:	f7ff fd9c 	bl	8004db4 <memset>
 800527c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005284:	4620      	mov	r0, r4
 8005286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005288:	3468      	adds	r4, #104	; 0x68
 800528a:	e7d9      	b.n	8005240 <__sfp+0x1c>
 800528c:	2104      	movs	r1, #4
 800528e:	4638      	mov	r0, r7
 8005290:	f7ff ff62 	bl	8005158 <__sfmoreglue>
 8005294:	4604      	mov	r4, r0
 8005296:	6030      	str	r0, [r6, #0]
 8005298:	2800      	cmp	r0, #0
 800529a:	d1d5      	bne.n	8005248 <__sfp+0x24>
 800529c:	f7ff ff78 	bl	8005190 <__sfp_lock_release>
 80052a0:	230c      	movs	r3, #12
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	e7ee      	b.n	8005284 <__sfp+0x60>
 80052a6:	bf00      	nop
 80052a8:	08005ec8 	.word	0x08005ec8
 80052ac:	ffff0001 	.word	0xffff0001

080052b0 <_fwalk_reent>:
 80052b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	4606      	mov	r6, r0
 80052b6:	4688      	mov	r8, r1
 80052b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052bc:	2700      	movs	r7, #0
 80052be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052c2:	f1b9 0901 	subs.w	r9, r9, #1
 80052c6:	d505      	bpl.n	80052d4 <_fwalk_reent+0x24>
 80052c8:	6824      	ldr	r4, [r4, #0]
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	d1f7      	bne.n	80052be <_fwalk_reent+0xe>
 80052ce:	4638      	mov	r0, r7
 80052d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d4:	89ab      	ldrh	r3, [r5, #12]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d907      	bls.n	80052ea <_fwalk_reent+0x3a>
 80052da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052de:	3301      	adds	r3, #1
 80052e0:	d003      	beq.n	80052ea <_fwalk_reent+0x3a>
 80052e2:	4629      	mov	r1, r5
 80052e4:	4630      	mov	r0, r6
 80052e6:	47c0      	blx	r8
 80052e8:	4307      	orrs	r7, r0
 80052ea:	3568      	adds	r5, #104	; 0x68
 80052ec:	e7e9      	b.n	80052c2 <_fwalk_reent+0x12>

080052ee <__retarget_lock_init_recursive>:
 80052ee:	4770      	bx	lr

080052f0 <__retarget_lock_acquire_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_release_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <__swhatbuf_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	460e      	mov	r6, r1
 80052f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fc:	2900      	cmp	r1, #0
 80052fe:	b096      	sub	sp, #88	; 0x58
 8005300:	4614      	mov	r4, r2
 8005302:	461d      	mov	r5, r3
 8005304:	da08      	bge.n	8005318 <__swhatbuf_r+0x24>
 8005306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	602a      	str	r2, [r5, #0]
 800530e:	061a      	lsls	r2, r3, #24
 8005310:	d410      	bmi.n	8005334 <__swhatbuf_r+0x40>
 8005312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005316:	e00e      	b.n	8005336 <__swhatbuf_r+0x42>
 8005318:	466a      	mov	r2, sp
 800531a:	f000 fd5d 	bl	8005dd8 <_fstat_r>
 800531e:	2800      	cmp	r0, #0
 8005320:	dbf1      	blt.n	8005306 <__swhatbuf_r+0x12>
 8005322:	9a01      	ldr	r2, [sp, #4]
 8005324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800532c:	425a      	negs	r2, r3
 800532e:	415a      	adcs	r2, r3
 8005330:	602a      	str	r2, [r5, #0]
 8005332:	e7ee      	b.n	8005312 <__swhatbuf_r+0x1e>
 8005334:	2340      	movs	r3, #64	; 0x40
 8005336:	2000      	movs	r0, #0
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	b016      	add	sp, #88	; 0x58
 800533c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005340 <__smakebuf_r>:
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005344:	079d      	lsls	r5, r3, #30
 8005346:	4606      	mov	r6, r0
 8005348:	460c      	mov	r4, r1
 800534a:	d507      	bpl.n	800535c <__smakebuf_r+0x1c>
 800534c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	2301      	movs	r3, #1
 8005356:	6163      	str	r3, [r4, #20]
 8005358:	b002      	add	sp, #8
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	ab01      	add	r3, sp, #4
 800535e:	466a      	mov	r2, sp
 8005360:	f7ff ffc8 	bl	80052f4 <__swhatbuf_r>
 8005364:	9900      	ldr	r1, [sp, #0]
 8005366:	4605      	mov	r5, r0
 8005368:	4630      	mov	r0, r6
 800536a:	f000 f89d 	bl	80054a8 <_malloc_r>
 800536e:	b948      	cbnz	r0, 8005384 <__smakebuf_r+0x44>
 8005370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005374:	059a      	lsls	r2, r3, #22
 8005376:	d4ef      	bmi.n	8005358 <__smakebuf_r+0x18>
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	e7e3      	b.n	800534c <__smakebuf_r+0xc>
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <__smakebuf_r+0x7c>)
 8005386:	62b3      	str	r3, [r6, #40]	; 0x28
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	6020      	str	r0, [r4, #0]
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	9b00      	ldr	r3, [sp, #0]
 8005394:	6163      	str	r3, [r4, #20]
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	6120      	str	r0, [r4, #16]
 800539a:	b15b      	cbz	r3, 80053b4 <__smakebuf_r+0x74>
 800539c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 fd2b 	bl	8005dfc <_isatty_r>
 80053a6:	b128      	cbz	r0, 80053b4 <__smakebuf_r+0x74>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	89a0      	ldrh	r0, [r4, #12]
 80053b6:	4305      	orrs	r5, r0
 80053b8:	81a5      	strh	r5, [r4, #12]
 80053ba:	e7cd      	b.n	8005358 <__smakebuf_r+0x18>
 80053bc:	0800514d 	.word	0x0800514d

080053c0 <malloc>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <malloc+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f000 b86f 	b.w	80054a8 <_malloc_r>
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <_free_r>:
 80053d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d044      	beq.n	8005460 <_free_r+0x90>
 80053d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053da:	9001      	str	r0, [sp, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f1a1 0404 	sub.w	r4, r1, #4
 80053e2:	bfb8      	it	lt
 80053e4:	18e4      	addlt	r4, r4, r3
 80053e6:	f000 fd2b 	bl	8005e40 <__malloc_lock>
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <_free_r+0x94>)
 80053ec:	9801      	ldr	r0, [sp, #4]
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	b933      	cbnz	r3, 8005400 <_free_r+0x30>
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	6014      	str	r4, [r2, #0]
 80053f6:	b003      	add	sp, #12
 80053f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053fc:	f000 bd26 	b.w	8005e4c <__malloc_unlock>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d908      	bls.n	8005416 <_free_r+0x46>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf01      	itttt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	1949      	addeq	r1, r1, r5
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	e7ed      	b.n	80053f2 <_free_r+0x22>
 8005416:	461a      	mov	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b10b      	cbz	r3, 8005420 <_free_r+0x50>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d9fa      	bls.n	8005416 <_free_r+0x46>
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	1855      	adds	r5, r2, r1
 8005424:	42a5      	cmp	r5, r4
 8005426:	d10b      	bne.n	8005440 <_free_r+0x70>
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	4421      	add	r1, r4
 800542c:	1854      	adds	r4, r2, r1
 800542e:	42a3      	cmp	r3, r4
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	d1e0      	bne.n	80053f6 <_free_r+0x26>
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	6053      	str	r3, [r2, #4]
 800543a:	4421      	add	r1, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	e7da      	b.n	80053f6 <_free_r+0x26>
 8005440:	d902      	bls.n	8005448 <_free_r+0x78>
 8005442:	230c      	movs	r3, #12
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	e7d6      	b.n	80053f6 <_free_r+0x26>
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	1961      	adds	r1, r4, r5
 800544c:	428b      	cmp	r3, r1
 800544e:	bf04      	itt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	bf04      	itt	eq
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	6054      	str	r4, [r2, #4]
 800545e:	e7ca      	b.n	80053f6 <_free_r+0x26>
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	20000cb4 	.word	0x20000cb4

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0e      	ldr	r6, [pc, #56]	; (80054a4 <sbrk_aligned+0x3c>)
 800546c:	460c      	mov	r4, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	4605      	mov	r5, r0
 8005472:	b911      	cbnz	r1, 800547a <sbrk_aligned+0x12>
 8005474:	f000 fb7a 	bl	8005b6c <_sbrk_r>
 8005478:	6030      	str	r0, [r6, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 fb75 	bl	8005b6c <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d00a      	beq.n	800549c <sbrk_aligned+0x34>
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d007      	beq.n	80054a0 <sbrk_aligned+0x38>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fb6a 	bl	8005b6c <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d101      	bne.n	80054a0 <sbrk_aligned+0x38>
 800549c:	f04f 34ff 	mov.w	r4, #4294967295
 80054a0:	4620      	mov	r0, r4
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	20000cb8 	.word	0x20000cb8

080054a8 <_malloc_r>:
 80054a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	1ccd      	adds	r5, r1, #3
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	4607      	mov	r7, r0
 80054be:	db01      	blt.n	80054c4 <_malloc_r+0x1c>
 80054c0:	42a9      	cmp	r1, r5
 80054c2:	d905      	bls.n	80054d0 <_malloc_r+0x28>
 80054c4:	230c      	movs	r3, #12
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	2600      	movs	r6, #0
 80054ca:	4630      	mov	r0, r6
 80054cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d0:	4e2e      	ldr	r6, [pc, #184]	; (800558c <_malloc_r+0xe4>)
 80054d2:	f000 fcb5 	bl	8005e40 <__malloc_lock>
 80054d6:	6833      	ldr	r3, [r6, #0]
 80054d8:	461c      	mov	r4, r3
 80054da:	bb34      	cbnz	r4, 800552a <_malloc_r+0x82>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff ffc2 	bl	8005468 <sbrk_aligned>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	4604      	mov	r4, r0
 80054e8:	d14d      	bne.n	8005586 <_malloc_r+0xde>
 80054ea:	6834      	ldr	r4, [r6, #0]
 80054ec:	4626      	mov	r6, r4
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d140      	bne.n	8005574 <_malloc_r+0xcc>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4631      	mov	r1, r6
 80054f6:	4638      	mov	r0, r7
 80054f8:	eb04 0803 	add.w	r8, r4, r3
 80054fc:	f000 fb36 	bl	8005b6c <_sbrk_r>
 8005500:	4580      	cmp	r8, r0
 8005502:	d13a      	bne.n	800557a <_malloc_r+0xd2>
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	3503      	adds	r5, #3
 8005508:	1a6d      	subs	r5, r5, r1
 800550a:	f025 0503 	bic.w	r5, r5, #3
 800550e:	3508      	adds	r5, #8
 8005510:	2d0c      	cmp	r5, #12
 8005512:	bf38      	it	cc
 8005514:	250c      	movcc	r5, #12
 8005516:	4629      	mov	r1, r5
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ffa5 	bl	8005468 <sbrk_aligned>
 800551e:	3001      	adds	r0, #1
 8005520:	d02b      	beq.n	800557a <_malloc_r+0xd2>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	442b      	add	r3, r5
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	e00e      	b.n	8005548 <_malloc_r+0xa0>
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	d41e      	bmi.n	800556e <_malloc_r+0xc6>
 8005530:	2a0b      	cmp	r2, #11
 8005532:	d916      	bls.n	8005562 <_malloc_r+0xba>
 8005534:	1961      	adds	r1, r4, r5
 8005536:	42a3      	cmp	r3, r4
 8005538:	6025      	str	r5, [r4, #0]
 800553a:	bf18      	it	ne
 800553c:	6059      	strne	r1, [r3, #4]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	bf08      	it	eq
 8005542:	6031      	streq	r1, [r6, #0]
 8005544:	5162      	str	r2, [r4, r5]
 8005546:	604b      	str	r3, [r1, #4]
 8005548:	4638      	mov	r0, r7
 800554a:	f104 060b 	add.w	r6, r4, #11
 800554e:	f000 fc7d 	bl	8005e4c <__malloc_unlock>
 8005552:	f026 0607 	bic.w	r6, r6, #7
 8005556:	1d23      	adds	r3, r4, #4
 8005558:	1af2      	subs	r2, r6, r3
 800555a:	d0b6      	beq.n	80054ca <_malloc_r+0x22>
 800555c:	1b9b      	subs	r3, r3, r6
 800555e:	50a3      	str	r3, [r4, r2]
 8005560:	e7b3      	b.n	80054ca <_malloc_r+0x22>
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	bf0c      	ite	eq
 8005568:	6032      	streq	r2, [r6, #0]
 800556a:	605a      	strne	r2, [r3, #4]
 800556c:	e7ec      	b.n	8005548 <_malloc_r+0xa0>
 800556e:	4623      	mov	r3, r4
 8005570:	6864      	ldr	r4, [r4, #4]
 8005572:	e7b2      	b.n	80054da <_malloc_r+0x32>
 8005574:	4634      	mov	r4, r6
 8005576:	6876      	ldr	r6, [r6, #4]
 8005578:	e7b9      	b.n	80054ee <_malloc_r+0x46>
 800557a:	230c      	movs	r3, #12
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4638      	mov	r0, r7
 8005580:	f000 fc64 	bl	8005e4c <__malloc_unlock>
 8005584:	e7a1      	b.n	80054ca <_malloc_r+0x22>
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	e7de      	b.n	8005548 <_malloc_r+0xa0>
 800558a:	bf00      	nop
 800558c:	20000cb4 	.word	0x20000cb4

08005590 <__sfputc_r>:
 8005590:	6893      	ldr	r3, [r2, #8]
 8005592:	3b01      	subs	r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	b410      	push	{r4}
 8005598:	6093      	str	r3, [r2, #8]
 800559a:	da08      	bge.n	80055ae <__sfputc_r+0x1e>
 800559c:	6994      	ldr	r4, [r2, #24]
 800559e:	42a3      	cmp	r3, r4
 80055a0:	db01      	blt.n	80055a6 <__sfputc_r+0x16>
 80055a2:	290a      	cmp	r1, #10
 80055a4:	d103      	bne.n	80055ae <__sfputc_r+0x1e>
 80055a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055aa:	f000 bb33 	b.w	8005c14 <__swbuf_r>
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	1c58      	adds	r0, r3, #1
 80055b2:	6010      	str	r0, [r2, #0]
 80055b4:	7019      	strb	r1, [r3, #0]
 80055b6:	4608      	mov	r0, r1
 80055b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055bc:	4770      	bx	lr

080055be <__sfputs_r>:
 80055be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c0:	4606      	mov	r6, r0
 80055c2:	460f      	mov	r7, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	18d5      	adds	r5, r2, r3
 80055c8:	42ac      	cmp	r4, r5
 80055ca:	d101      	bne.n	80055d0 <__sfputs_r+0x12>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e007      	b.n	80055e0 <__sfputs_r+0x22>
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	463a      	mov	r2, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ffda 	bl	8005590 <__sfputc_r>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d1f3      	bne.n	80055c8 <__sfputs_r+0xa>
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e4 <_vfiprintf_r>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	460d      	mov	r5, r1
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4614      	mov	r4, r2
 80055ee:	4698      	mov	r8, r3
 80055f0:	4606      	mov	r6, r0
 80055f2:	b118      	cbz	r0, 80055fc <_vfiprintf_r+0x18>
 80055f4:	6983      	ldr	r3, [r0, #24]
 80055f6:	b90b      	cbnz	r3, 80055fc <_vfiprintf_r+0x18>
 80055f8:	f7ff fddc 	bl	80051b4 <__sinit>
 80055fc:	4b89      	ldr	r3, [pc, #548]	; (8005824 <_vfiprintf_r+0x240>)
 80055fe:	429d      	cmp	r5, r3
 8005600:	d11b      	bne.n	800563a <_vfiprintf_r+0x56>
 8005602:	6875      	ldr	r5, [r6, #4]
 8005604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005606:	07d9      	lsls	r1, r3, #31
 8005608:	d405      	bmi.n	8005616 <_vfiprintf_r+0x32>
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	059a      	lsls	r2, r3, #22
 800560e:	d402      	bmi.n	8005616 <_vfiprintf_r+0x32>
 8005610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005612:	f7ff fe6d 	bl	80052f0 <__retarget_lock_acquire_recursive>
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	d501      	bpl.n	8005620 <_vfiprintf_r+0x3c>
 800561c:	692b      	ldr	r3, [r5, #16]
 800561e:	b9eb      	cbnz	r3, 800565c <_vfiprintf_r+0x78>
 8005620:	4629      	mov	r1, r5
 8005622:	4630      	mov	r0, r6
 8005624:	f000 fb5a 	bl	8005cdc <__swsetup_r>
 8005628:	b1c0      	cbz	r0, 800565c <_vfiprintf_r+0x78>
 800562a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800562c:	07dc      	lsls	r4, r3, #31
 800562e:	d50e      	bpl.n	800564e <_vfiprintf_r+0x6a>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	b01d      	add	sp, #116	; 0x74
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <_vfiprintf_r+0x244>)
 800563c:	429d      	cmp	r5, r3
 800563e:	d101      	bne.n	8005644 <_vfiprintf_r+0x60>
 8005640:	68b5      	ldr	r5, [r6, #8]
 8005642:	e7df      	b.n	8005604 <_vfiprintf_r+0x20>
 8005644:	4b79      	ldr	r3, [pc, #484]	; (800582c <_vfiprintf_r+0x248>)
 8005646:	429d      	cmp	r5, r3
 8005648:	bf08      	it	eq
 800564a:	68f5      	ldreq	r5, [r6, #12]
 800564c:	e7da      	b.n	8005604 <_vfiprintf_r+0x20>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	0598      	lsls	r0, r3, #22
 8005652:	d4ed      	bmi.n	8005630 <_vfiprintf_r+0x4c>
 8005654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005656:	f7ff fe4c 	bl	80052f2 <__retarget_lock_release_recursive>
 800565a:	e7e9      	b.n	8005630 <_vfiprintf_r+0x4c>
 800565c:	2300      	movs	r3, #0
 800565e:	9309      	str	r3, [sp, #36]	; 0x24
 8005660:	2320      	movs	r3, #32
 8005662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005666:	f8cd 800c 	str.w	r8, [sp, #12]
 800566a:	2330      	movs	r3, #48	; 0x30
 800566c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005830 <_vfiprintf_r+0x24c>
 8005670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005674:	f04f 0901 	mov.w	r9, #1
 8005678:	4623      	mov	r3, r4
 800567a:	469a      	mov	sl, r3
 800567c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005680:	b10a      	cbz	r2, 8005686 <_vfiprintf_r+0xa2>
 8005682:	2a25      	cmp	r2, #37	; 0x25
 8005684:	d1f9      	bne.n	800567a <_vfiprintf_r+0x96>
 8005686:	ebba 0b04 	subs.w	fp, sl, r4
 800568a:	d00b      	beq.n	80056a4 <_vfiprintf_r+0xc0>
 800568c:	465b      	mov	r3, fp
 800568e:	4622      	mov	r2, r4
 8005690:	4629      	mov	r1, r5
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff ff93 	bl	80055be <__sfputs_r>
 8005698:	3001      	adds	r0, #1
 800569a:	f000 80aa 	beq.w	80057f2 <_vfiprintf_r+0x20e>
 800569e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a0:	445a      	add	r2, fp
 80056a2:	9209      	str	r2, [sp, #36]	; 0x24
 80056a4:	f89a 3000 	ldrb.w	r3, [sl]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80a2 	beq.w	80057f2 <_vfiprintf_r+0x20e>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295
 80056b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b8:	f10a 0a01 	add.w	sl, sl, #1
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	9307      	str	r3, [sp, #28]
 80056c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c4:	931a      	str	r3, [sp, #104]	; 0x68
 80056c6:	4654      	mov	r4, sl
 80056c8:	2205      	movs	r2, #5
 80056ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ce:	4858      	ldr	r0, [pc, #352]	; (8005830 <_vfiprintf_r+0x24c>)
 80056d0:	f7fa fd8e 	bl	80001f0 <memchr>
 80056d4:	9a04      	ldr	r2, [sp, #16]
 80056d6:	b9d8      	cbnz	r0, 8005710 <_vfiprintf_r+0x12c>
 80056d8:	06d1      	lsls	r1, r2, #27
 80056da:	bf44      	itt	mi
 80056dc:	2320      	movmi	r3, #32
 80056de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e2:	0713      	lsls	r3, r2, #28
 80056e4:	bf44      	itt	mi
 80056e6:	232b      	movmi	r3, #43	; 0x2b
 80056e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ec:	f89a 3000 	ldrb.w	r3, [sl]
 80056f0:	2b2a      	cmp	r3, #42	; 0x2a
 80056f2:	d015      	beq.n	8005720 <_vfiprintf_r+0x13c>
 80056f4:	9a07      	ldr	r2, [sp, #28]
 80056f6:	4654      	mov	r4, sl
 80056f8:	2000      	movs	r0, #0
 80056fa:	f04f 0c0a 	mov.w	ip, #10
 80056fe:	4621      	mov	r1, r4
 8005700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005704:	3b30      	subs	r3, #48	; 0x30
 8005706:	2b09      	cmp	r3, #9
 8005708:	d94e      	bls.n	80057a8 <_vfiprintf_r+0x1c4>
 800570a:	b1b0      	cbz	r0, 800573a <_vfiprintf_r+0x156>
 800570c:	9207      	str	r2, [sp, #28]
 800570e:	e014      	b.n	800573a <_vfiprintf_r+0x156>
 8005710:	eba0 0308 	sub.w	r3, r0, r8
 8005714:	fa09 f303 	lsl.w	r3, r9, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	46a2      	mov	sl, r4
 800571e:	e7d2      	b.n	80056c6 <_vfiprintf_r+0xe2>
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	1d19      	adds	r1, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9103      	str	r1, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfbb      	ittet	lt
 800572c:	425b      	neglt	r3, r3
 800572e:	f042 0202 	orrlt.w	r2, r2, #2
 8005732:	9307      	strge	r3, [sp, #28]
 8005734:	9307      	strlt	r3, [sp, #28]
 8005736:	bfb8      	it	lt
 8005738:	9204      	strlt	r2, [sp, #16]
 800573a:	7823      	ldrb	r3, [r4, #0]
 800573c:	2b2e      	cmp	r3, #46	; 0x2e
 800573e:	d10c      	bne.n	800575a <_vfiprintf_r+0x176>
 8005740:	7863      	ldrb	r3, [r4, #1]
 8005742:	2b2a      	cmp	r3, #42	; 0x2a
 8005744:	d135      	bne.n	80057b2 <_vfiprintf_r+0x1ce>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	1d1a      	adds	r2, r3, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	9203      	str	r2, [sp, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfb8      	it	lt
 8005752:	f04f 33ff 	movlt.w	r3, #4294967295
 8005756:	3402      	adds	r4, #2
 8005758:	9305      	str	r3, [sp, #20]
 800575a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005840 <_vfiprintf_r+0x25c>
 800575e:	7821      	ldrb	r1, [r4, #0]
 8005760:	2203      	movs	r2, #3
 8005762:	4650      	mov	r0, sl
 8005764:	f7fa fd44 	bl	80001f0 <memchr>
 8005768:	b140      	cbz	r0, 800577c <_vfiprintf_r+0x198>
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	eba0 000a 	sub.w	r0, r0, sl
 8005770:	fa03 f000 	lsl.w	r0, r3, r0
 8005774:	9b04      	ldr	r3, [sp, #16]
 8005776:	4303      	orrs	r3, r0
 8005778:	3401      	adds	r4, #1
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005780:	482c      	ldr	r0, [pc, #176]	; (8005834 <_vfiprintf_r+0x250>)
 8005782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005786:	2206      	movs	r2, #6
 8005788:	f7fa fd32 	bl	80001f0 <memchr>
 800578c:	2800      	cmp	r0, #0
 800578e:	d03f      	beq.n	8005810 <_vfiprintf_r+0x22c>
 8005790:	4b29      	ldr	r3, [pc, #164]	; (8005838 <_vfiprintf_r+0x254>)
 8005792:	bb1b      	cbnz	r3, 80057dc <_vfiprintf_r+0x1f8>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	3307      	adds	r3, #7
 8005798:	f023 0307 	bic.w	r3, r3, #7
 800579c:	3308      	adds	r3, #8
 800579e:	9303      	str	r3, [sp, #12]
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	443b      	add	r3, r7
 80057a4:	9309      	str	r3, [sp, #36]	; 0x24
 80057a6:	e767      	b.n	8005678 <_vfiprintf_r+0x94>
 80057a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ac:	460c      	mov	r4, r1
 80057ae:	2001      	movs	r0, #1
 80057b0:	e7a5      	b.n	80056fe <_vfiprintf_r+0x11a>
 80057b2:	2300      	movs	r3, #0
 80057b4:	3401      	adds	r4, #1
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f04f 0c0a 	mov.w	ip, #10
 80057be:	4620      	mov	r0, r4
 80057c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c4:	3a30      	subs	r2, #48	; 0x30
 80057c6:	2a09      	cmp	r2, #9
 80057c8:	d903      	bls.n	80057d2 <_vfiprintf_r+0x1ee>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0c5      	beq.n	800575a <_vfiprintf_r+0x176>
 80057ce:	9105      	str	r1, [sp, #20]
 80057d0:	e7c3      	b.n	800575a <_vfiprintf_r+0x176>
 80057d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057d6:	4604      	mov	r4, r0
 80057d8:	2301      	movs	r3, #1
 80057da:	e7f0      	b.n	80057be <_vfiprintf_r+0x1da>
 80057dc:	ab03      	add	r3, sp, #12
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	462a      	mov	r2, r5
 80057e2:	4b16      	ldr	r3, [pc, #88]	; (800583c <_vfiprintf_r+0x258>)
 80057e4:	a904      	add	r1, sp, #16
 80057e6:	4630      	mov	r0, r6
 80057e8:	f3af 8000 	nop.w
 80057ec:	4607      	mov	r7, r0
 80057ee:	1c78      	adds	r0, r7, #1
 80057f0:	d1d6      	bne.n	80057a0 <_vfiprintf_r+0x1bc>
 80057f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057f4:	07d9      	lsls	r1, r3, #31
 80057f6:	d405      	bmi.n	8005804 <_vfiprintf_r+0x220>
 80057f8:	89ab      	ldrh	r3, [r5, #12]
 80057fa:	059a      	lsls	r2, r3, #22
 80057fc:	d402      	bmi.n	8005804 <_vfiprintf_r+0x220>
 80057fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005800:	f7ff fd77 	bl	80052f2 <__retarget_lock_release_recursive>
 8005804:	89ab      	ldrh	r3, [r5, #12]
 8005806:	065b      	lsls	r3, r3, #25
 8005808:	f53f af12 	bmi.w	8005630 <_vfiprintf_r+0x4c>
 800580c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800580e:	e711      	b.n	8005634 <_vfiprintf_r+0x50>
 8005810:	ab03      	add	r3, sp, #12
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	462a      	mov	r2, r5
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <_vfiprintf_r+0x258>)
 8005818:	a904      	add	r1, sp, #16
 800581a:	4630      	mov	r0, r6
 800581c:	f000 f880 	bl	8005920 <_printf_i>
 8005820:	e7e4      	b.n	80057ec <_vfiprintf_r+0x208>
 8005822:	bf00      	nop
 8005824:	08005eec 	.word	0x08005eec
 8005828:	08005f0c 	.word	0x08005f0c
 800582c:	08005ecc 	.word	0x08005ecc
 8005830:	08005f2c 	.word	0x08005f2c
 8005834:	08005f36 	.word	0x08005f36
 8005838:	00000000 	.word	0x00000000
 800583c:	080055bf 	.word	0x080055bf
 8005840:	08005f32 	.word	0x08005f32

08005844 <_printf_common>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	4616      	mov	r6, r2
 800584a:	4699      	mov	r9, r3
 800584c:	688a      	ldr	r2, [r1, #8]
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005854:	4293      	cmp	r3, r2
 8005856:	bfb8      	it	lt
 8005858:	4613      	movlt	r3, r2
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005860:	4607      	mov	r7, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b10a      	cbz	r2, 800586a <_printf_common+0x26>
 8005866:	3301      	adds	r3, #1
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	0699      	lsls	r1, r3, #26
 800586e:	bf42      	ittt	mi
 8005870:	6833      	ldrmi	r3, [r6, #0]
 8005872:	3302      	addmi	r3, #2
 8005874:	6033      	strmi	r3, [r6, #0]
 8005876:	6825      	ldr	r5, [r4, #0]
 8005878:	f015 0506 	ands.w	r5, r5, #6
 800587c:	d106      	bne.n	800588c <_printf_common+0x48>
 800587e:	f104 0a19 	add.w	sl, r4, #25
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	6832      	ldr	r2, [r6, #0]
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	42ab      	cmp	r3, r5
 800588a:	dc26      	bgt.n	80058da <_printf_common+0x96>
 800588c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005890:	1e13      	subs	r3, r2, #0
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	bf18      	it	ne
 8005896:	2301      	movne	r3, #1
 8005898:	0692      	lsls	r2, r2, #26
 800589a:	d42b      	bmi.n	80058f4 <_printf_common+0xb0>
 800589c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c0      	blx	r8
 80058a6:	3001      	adds	r0, #1
 80058a8:	d01e      	beq.n	80058e8 <_printf_common+0xa4>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	68e5      	ldr	r5, [r4, #12]
 80058ae:	6832      	ldr	r2, [r6, #0]
 80058b0:	f003 0306 	and.w	r3, r3, #6
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	bf08      	it	eq
 80058b8:	1aad      	subeq	r5, r5, r2
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	bf0c      	ite	eq
 80058c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c4:	2500      	movne	r5, #0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bfc4      	itt	gt
 80058ca:	1a9b      	subgt	r3, r3, r2
 80058cc:	18ed      	addgt	r5, r5, r3
 80058ce:	2600      	movs	r6, #0
 80058d0:	341a      	adds	r4, #26
 80058d2:	42b5      	cmp	r5, r6
 80058d4:	d11a      	bne.n	800590c <_printf_common+0xc8>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e008      	b.n	80058ec <_printf_common+0xa8>
 80058da:	2301      	movs	r3, #1
 80058dc:	4652      	mov	r2, sl
 80058de:	4649      	mov	r1, r9
 80058e0:	4638      	mov	r0, r7
 80058e2:	47c0      	blx	r8
 80058e4:	3001      	adds	r0, #1
 80058e6:	d103      	bne.n	80058f0 <_printf_common+0xac>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	3501      	adds	r5, #1
 80058f2:	e7c6      	b.n	8005882 <_printf_common+0x3e>
 80058f4:	18e1      	adds	r1, r4, r3
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	2030      	movs	r0, #48	; 0x30
 80058fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058fe:	4422      	add	r2, r4
 8005900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005908:	3302      	adds	r3, #2
 800590a:	e7c7      	b.n	800589c <_printf_common+0x58>
 800590c:	2301      	movs	r3, #1
 800590e:	4622      	mov	r2, r4
 8005910:	4649      	mov	r1, r9
 8005912:	4638      	mov	r0, r7
 8005914:	47c0      	blx	r8
 8005916:	3001      	adds	r0, #1
 8005918:	d0e6      	beq.n	80058e8 <_printf_common+0xa4>
 800591a:	3601      	adds	r6, #1
 800591c:	e7d9      	b.n	80058d2 <_printf_common+0x8e>
	...

08005920 <_printf_i>:
 8005920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	7e0f      	ldrb	r7, [r1, #24]
 8005926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005928:	2f78      	cmp	r7, #120	; 0x78
 800592a:	4691      	mov	r9, r2
 800592c:	4680      	mov	r8, r0
 800592e:	460c      	mov	r4, r1
 8005930:	469a      	mov	sl, r3
 8005932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005936:	d807      	bhi.n	8005948 <_printf_i+0x28>
 8005938:	2f62      	cmp	r7, #98	; 0x62
 800593a:	d80a      	bhi.n	8005952 <_printf_i+0x32>
 800593c:	2f00      	cmp	r7, #0
 800593e:	f000 80d8 	beq.w	8005af2 <_printf_i+0x1d2>
 8005942:	2f58      	cmp	r7, #88	; 0x58
 8005944:	f000 80a3 	beq.w	8005a8e <_printf_i+0x16e>
 8005948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800594c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005950:	e03a      	b.n	80059c8 <_printf_i+0xa8>
 8005952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005956:	2b15      	cmp	r3, #21
 8005958:	d8f6      	bhi.n	8005948 <_printf_i+0x28>
 800595a:	a101      	add	r1, pc, #4	; (adr r1, 8005960 <_printf_i+0x40>)
 800595c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005960:	080059b9 	.word	0x080059b9
 8005964:	080059cd 	.word	0x080059cd
 8005968:	08005949 	.word	0x08005949
 800596c:	08005949 	.word	0x08005949
 8005970:	08005949 	.word	0x08005949
 8005974:	08005949 	.word	0x08005949
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005949 	.word	0x08005949
 8005980:	08005949 	.word	0x08005949
 8005984:	08005949 	.word	0x08005949
 8005988:	08005949 	.word	0x08005949
 800598c:	08005ad9 	.word	0x08005ad9
 8005990:	080059fd 	.word	0x080059fd
 8005994:	08005abb 	.word	0x08005abb
 8005998:	08005949 	.word	0x08005949
 800599c:	08005949 	.word	0x08005949
 80059a0:	08005afb 	.word	0x08005afb
 80059a4:	08005949 	.word	0x08005949
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005949 	.word	0x08005949
 80059b0:	08005949 	.word	0x08005949
 80059b4:	08005ac3 	.word	0x08005ac3
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	602a      	str	r2, [r5, #0]
 80059c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0a3      	b.n	8005b14 <_printf_i+0x1f4>
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	6829      	ldr	r1, [r5, #0]
 80059d0:	0606      	lsls	r6, r0, #24
 80059d2:	f101 0304 	add.w	r3, r1, #4
 80059d6:	d50a      	bpl.n	80059ee <_printf_i+0xce>
 80059d8:	680e      	ldr	r6, [r1, #0]
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	2e00      	cmp	r6, #0
 80059de:	da03      	bge.n	80059e8 <_printf_i+0xc8>
 80059e0:	232d      	movs	r3, #45	; 0x2d
 80059e2:	4276      	negs	r6, r6
 80059e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e8:	485e      	ldr	r0, [pc, #376]	; (8005b64 <_printf_i+0x244>)
 80059ea:	230a      	movs	r3, #10
 80059ec:	e019      	b.n	8005a22 <_printf_i+0x102>
 80059ee:	680e      	ldr	r6, [r1, #0]
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059f6:	bf18      	it	ne
 80059f8:	b236      	sxthne	r6, r6
 80059fa:	e7ef      	b.n	80059dc <_printf_i+0xbc>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	1d19      	adds	r1, r3, #4
 8005a02:	6029      	str	r1, [r5, #0]
 8005a04:	0601      	lsls	r1, r0, #24
 8005a06:	d501      	bpl.n	8005a0c <_printf_i+0xec>
 8005a08:	681e      	ldr	r6, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <_printf_i+0xf2>
 8005a0c:	0646      	lsls	r6, r0, #25
 8005a0e:	d5fb      	bpl.n	8005a08 <_printf_i+0xe8>
 8005a10:	881e      	ldrh	r6, [r3, #0]
 8005a12:	4854      	ldr	r0, [pc, #336]	; (8005b64 <_printf_i+0x244>)
 8005a14:	2f6f      	cmp	r7, #111	; 0x6f
 8005a16:	bf0c      	ite	eq
 8005a18:	2308      	moveq	r3, #8
 8005a1a:	230a      	movne	r3, #10
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a22:	6865      	ldr	r5, [r4, #4]
 8005a24:	60a5      	str	r5, [r4, #8]
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	bfa2      	ittt	ge
 8005a2a:	6821      	ldrge	r1, [r4, #0]
 8005a2c:	f021 0104 	bicge.w	r1, r1, #4
 8005a30:	6021      	strge	r1, [r4, #0]
 8005a32:	b90e      	cbnz	r6, 8005a38 <_printf_i+0x118>
 8005a34:	2d00      	cmp	r5, #0
 8005a36:	d04d      	beq.n	8005ad4 <_printf_i+0x1b4>
 8005a38:	4615      	mov	r5, r2
 8005a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a42:	5dc7      	ldrb	r7, [r0, r7]
 8005a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a48:	4637      	mov	r7, r6
 8005a4a:	42bb      	cmp	r3, r7
 8005a4c:	460e      	mov	r6, r1
 8005a4e:	d9f4      	bls.n	8005a3a <_printf_i+0x11a>
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d10b      	bne.n	8005a6c <_printf_i+0x14c>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	07de      	lsls	r6, r3, #31
 8005a58:	d508      	bpl.n	8005a6c <_printf_i+0x14c>
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	6861      	ldr	r1, [r4, #4]
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	bfde      	ittt	le
 8005a62:	2330      	movle	r3, #48	; 0x30
 8005a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a6c:	1b52      	subs	r2, r2, r5
 8005a6e:	6122      	str	r2, [r4, #16]
 8005a70:	f8cd a000 	str.w	sl, [sp]
 8005a74:	464b      	mov	r3, r9
 8005a76:	aa03      	add	r2, sp, #12
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fee2 	bl	8005844 <_printf_common>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d14c      	bne.n	8005b1e <_printf_i+0x1fe>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	b004      	add	sp, #16
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	4835      	ldr	r0, [pc, #212]	; (8005b64 <_printf_i+0x244>)
 8005a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a94:	6829      	ldr	r1, [r5, #0]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a9c:	6029      	str	r1, [r5, #0]
 8005a9e:	061d      	lsls	r5, r3, #24
 8005aa0:	d514      	bpl.n	8005acc <_printf_i+0x1ac>
 8005aa2:	07df      	lsls	r7, r3, #31
 8005aa4:	bf44      	itt	mi
 8005aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8005aaa:	6023      	strmi	r3, [r4, #0]
 8005aac:	b91e      	cbnz	r6, 8005ab6 <_printf_i+0x196>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f023 0320 	bic.w	r3, r3, #32
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	e7b0      	b.n	8005a1c <_printf_i+0xfc>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	f043 0320 	orr.w	r3, r3, #32
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	2378      	movs	r3, #120	; 0x78
 8005ac4:	4828      	ldr	r0, [pc, #160]	; (8005b68 <_printf_i+0x248>)
 8005ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aca:	e7e3      	b.n	8005a94 <_printf_i+0x174>
 8005acc:	0659      	lsls	r1, r3, #25
 8005ace:	bf48      	it	mi
 8005ad0:	b2b6      	uxthmi	r6, r6
 8005ad2:	e7e6      	b.n	8005aa2 <_printf_i+0x182>
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	e7bb      	b.n	8005a50 <_printf_i+0x130>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	6826      	ldr	r6, [r4, #0]
 8005adc:	6961      	ldr	r1, [r4, #20]
 8005ade:	1d18      	adds	r0, r3, #4
 8005ae0:	6028      	str	r0, [r5, #0]
 8005ae2:	0635      	lsls	r5, r6, #24
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	d501      	bpl.n	8005aec <_printf_i+0x1cc>
 8005ae8:	6019      	str	r1, [r3, #0]
 8005aea:	e002      	b.n	8005af2 <_printf_i+0x1d2>
 8005aec:	0670      	lsls	r0, r6, #25
 8005aee:	d5fb      	bpl.n	8005ae8 <_printf_i+0x1c8>
 8005af0:	8019      	strh	r1, [r3, #0]
 8005af2:	2300      	movs	r3, #0
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	4615      	mov	r5, r2
 8005af8:	e7ba      	b.n	8005a70 <_printf_i+0x150>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	1d1a      	adds	r2, r3, #4
 8005afe:	602a      	str	r2, [r5, #0]
 8005b00:	681d      	ldr	r5, [r3, #0]
 8005b02:	6862      	ldr	r2, [r4, #4]
 8005b04:	2100      	movs	r1, #0
 8005b06:	4628      	mov	r0, r5
 8005b08:	f7fa fb72 	bl	80001f0 <memchr>
 8005b0c:	b108      	cbz	r0, 8005b12 <_printf_i+0x1f2>
 8005b0e:	1b40      	subs	r0, r0, r5
 8005b10:	6060      	str	r0, [r4, #4]
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	2300      	movs	r3, #0
 8005b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1c:	e7a8      	b.n	8005a70 <_printf_i+0x150>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	462a      	mov	r2, r5
 8005b22:	4649      	mov	r1, r9
 8005b24:	4640      	mov	r0, r8
 8005b26:	47d0      	blx	sl
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d0ab      	beq.n	8005a84 <_printf_i+0x164>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	079b      	lsls	r3, r3, #30
 8005b30:	d413      	bmi.n	8005b5a <_printf_i+0x23a>
 8005b32:	68e0      	ldr	r0, [r4, #12]
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	4298      	cmp	r0, r3
 8005b38:	bfb8      	it	lt
 8005b3a:	4618      	movlt	r0, r3
 8005b3c:	e7a4      	b.n	8005a88 <_printf_i+0x168>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4632      	mov	r2, r6
 8005b42:	4649      	mov	r1, r9
 8005b44:	4640      	mov	r0, r8
 8005b46:	47d0      	blx	sl
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d09b      	beq.n	8005a84 <_printf_i+0x164>
 8005b4c:	3501      	adds	r5, #1
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	9903      	ldr	r1, [sp, #12]
 8005b52:	1a5b      	subs	r3, r3, r1
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	dcf2      	bgt.n	8005b3e <_printf_i+0x21e>
 8005b58:	e7eb      	b.n	8005b32 <_printf_i+0x212>
 8005b5a:	2500      	movs	r5, #0
 8005b5c:	f104 0619 	add.w	r6, r4, #25
 8005b60:	e7f5      	b.n	8005b4e <_printf_i+0x22e>
 8005b62:	bf00      	nop
 8005b64:	08005f3d 	.word	0x08005f3d
 8005b68:	08005f4e 	.word	0x08005f4e

08005b6c <_sbrk_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d06      	ldr	r5, [pc, #24]	; (8005b88 <_sbrk_r+0x1c>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fb fb8e 	bl	8001298 <_sbrk>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_sbrk_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_sbrk_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000cbc 	.word	0x20000cbc

08005b8c <__sread>:
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	460c      	mov	r4, r1
 8005b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b94:	f000 f960 	bl	8005e58 <_read_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	bfab      	itete	ge
 8005b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005ba0:	181b      	addge	r3, r3, r0
 8005ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ba6:	bfac      	ite	ge
 8005ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005baa:	81a3      	strhlt	r3, [r4, #12]
 8005bac:	bd10      	pop	{r4, pc}

08005bae <__swrite>:
 8005bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	898b      	ldrh	r3, [r1, #12]
 8005bb6:	05db      	lsls	r3, r3, #23
 8005bb8:	4605      	mov	r5, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	d505      	bpl.n	8005bcc <__swrite+0x1e>
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f000 f928 	bl	8005e1c <_lseek_r>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	4632      	mov	r2, r6
 8005bda:	463b      	mov	r3, r7
 8005bdc:	4628      	mov	r0, r5
 8005bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	f000 b869 	b.w	8005cb8 <_write_r>

08005be6 <__sseek>:
 8005be6:	b510      	push	{r4, lr}
 8005be8:	460c      	mov	r4, r1
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 f915 	bl	8005e1c <_lseek_r>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	bf15      	itete	ne
 8005bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c02:	81a3      	strheq	r3, [r4, #12]
 8005c04:	bf18      	it	ne
 8005c06:	81a3      	strhne	r3, [r4, #12]
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <__sclose>:
 8005c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0e:	f000 b8d3 	b.w	8005db8 <_close_r>
	...

08005c14 <__swbuf_r>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	460e      	mov	r6, r1
 8005c18:	4614      	mov	r4, r2
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	b118      	cbz	r0, 8005c26 <__swbuf_r+0x12>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <__swbuf_r+0x12>
 8005c22:	f7ff fac7 	bl	80051b4 <__sinit>
 8005c26:	4b21      	ldr	r3, [pc, #132]	; (8005cac <__swbuf_r+0x98>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d12b      	bne.n	8005c84 <__swbuf_r+0x70>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	69a3      	ldr	r3, [r4, #24]
 8005c30:	60a3      	str	r3, [r4, #8]
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	071a      	lsls	r2, r3, #28
 8005c36:	d52f      	bpl.n	8005c98 <__swbuf_r+0x84>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	b36b      	cbz	r3, 8005c98 <__swbuf_r+0x84>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1ac0      	subs	r0, r0, r3
 8005c42:	6963      	ldr	r3, [r4, #20]
 8005c44:	b2f6      	uxtb	r6, r6
 8005c46:	4283      	cmp	r3, r0
 8005c48:	4637      	mov	r7, r6
 8005c4a:	dc04      	bgt.n	8005c56 <__swbuf_r+0x42>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f7ff fa1c 	bl	800508c <_fflush_r>
 8005c54:	bb30      	cbnz	r0, 8005ca4 <__swbuf_r+0x90>
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	701e      	strb	r6, [r3, #0]
 8005c64:	6963      	ldr	r3, [r4, #20]
 8005c66:	3001      	adds	r0, #1
 8005c68:	4283      	cmp	r3, r0
 8005c6a:	d004      	beq.n	8005c76 <__swbuf_r+0x62>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d506      	bpl.n	8005c80 <__swbuf_r+0x6c>
 8005c72:	2e0a      	cmp	r6, #10
 8005c74:	d104      	bne.n	8005c80 <__swbuf_r+0x6c>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff fa07 	bl	800508c <_fflush_r>
 8005c7e:	b988      	cbnz	r0, 8005ca4 <__swbuf_r+0x90>
 8005c80:	4638      	mov	r0, r7
 8005c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <__swbuf_r+0x9c>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	d101      	bne.n	8005c8e <__swbuf_r+0x7a>
 8005c8a:	68ac      	ldr	r4, [r5, #8]
 8005c8c:	e7cf      	b.n	8005c2e <__swbuf_r+0x1a>
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <__swbuf_r+0xa0>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	bf08      	it	eq
 8005c94:	68ec      	ldreq	r4, [r5, #12]
 8005c96:	e7ca      	b.n	8005c2e <__swbuf_r+0x1a>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f81e 	bl	8005cdc <__swsetup_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0cb      	beq.n	8005c3c <__swbuf_r+0x28>
 8005ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca8:	e7ea      	b.n	8005c80 <__swbuf_r+0x6c>
 8005caa:	bf00      	nop
 8005cac:	08005eec 	.word	0x08005eec
 8005cb0:	08005f0c 	.word	0x08005f0c
 8005cb4:	08005ecc 	.word	0x08005ecc

08005cb8 <_write_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d07      	ldr	r5, [pc, #28]	; (8005cd8 <_write_r+0x20>)
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f7fb fa95 	bl	80011f6 <_write>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_write_r+0x1e>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_write_r+0x1e>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000cbc 	.word	0x20000cbc

08005cdc <__swsetup_r>:
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <__swsetup_r+0xcc>)
 8005cde:	b570      	push	{r4, r5, r6, lr}
 8005ce0:	681d      	ldr	r5, [r3, #0]
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	b125      	cbz	r5, 8005cf2 <__swsetup_r+0x16>
 8005ce8:	69ab      	ldr	r3, [r5, #24]
 8005cea:	b913      	cbnz	r3, 8005cf2 <__swsetup_r+0x16>
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7ff fa61 	bl	80051b4 <__sinit>
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <__swsetup_r+0xd0>)
 8005cf4:	429c      	cmp	r4, r3
 8005cf6:	d10f      	bne.n	8005d18 <__swsetup_r+0x3c>
 8005cf8:	686c      	ldr	r4, [r5, #4]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d00:	0719      	lsls	r1, r3, #28
 8005d02:	d42c      	bmi.n	8005d5e <__swsetup_r+0x82>
 8005d04:	06dd      	lsls	r5, r3, #27
 8005d06:	d411      	bmi.n	8005d2c <__swsetup_r+0x50>
 8005d08:	2309      	movs	r3, #9
 8005d0a:	6033      	str	r3, [r6, #0]
 8005d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	e03e      	b.n	8005d96 <__swsetup_r+0xba>
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <__swsetup_r+0xd4>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d101      	bne.n	8005d22 <__swsetup_r+0x46>
 8005d1e:	68ac      	ldr	r4, [r5, #8]
 8005d20:	e7eb      	b.n	8005cfa <__swsetup_r+0x1e>
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <__swsetup_r+0xd8>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	bf08      	it	eq
 8005d28:	68ec      	ldreq	r4, [r5, #12]
 8005d2a:	e7e6      	b.n	8005cfa <__swsetup_r+0x1e>
 8005d2c:	0758      	lsls	r0, r3, #29
 8005d2e:	d512      	bpl.n	8005d56 <__swsetup_r+0x7a>
 8005d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d32:	b141      	cbz	r1, 8005d46 <__swsetup_r+0x6a>
 8005d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <__swsetup_r+0x66>
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff fb47 	bl	80053d0 <_free_r>
 8005d42:	2300      	movs	r3, #0
 8005d44:	6363      	str	r3, [r4, #52]	; 0x34
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d4c:	81a3      	strh	r3, [r4, #12]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f043 0308 	orr.w	r3, r3, #8
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	b94b      	cbnz	r3, 8005d76 <__swsetup_r+0x9a>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6c:	d003      	beq.n	8005d76 <__swsetup_r+0x9a>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7ff fae5 	bl	8005340 <__smakebuf_r>
 8005d76:	89a0      	ldrh	r0, [r4, #12]
 8005d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d7c:	f010 0301 	ands.w	r3, r0, #1
 8005d80:	d00a      	beq.n	8005d98 <__swsetup_r+0xbc>
 8005d82:	2300      	movs	r3, #0
 8005d84:	60a3      	str	r3, [r4, #8]
 8005d86:	6963      	ldr	r3, [r4, #20]
 8005d88:	425b      	negs	r3, r3
 8005d8a:	61a3      	str	r3, [r4, #24]
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	b943      	cbnz	r3, 8005da2 <__swsetup_r+0xc6>
 8005d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d94:	d1ba      	bne.n	8005d0c <__swsetup_r+0x30>
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	0781      	lsls	r1, r0, #30
 8005d9a:	bf58      	it	pl
 8005d9c:	6963      	ldrpl	r3, [r4, #20]
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	e7f4      	b.n	8005d8c <__swsetup_r+0xb0>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e7f7      	b.n	8005d96 <__swsetup_r+0xba>
 8005da6:	bf00      	nop
 8005da8:	2000000c 	.word	0x2000000c
 8005dac:	08005eec 	.word	0x08005eec
 8005db0:	08005f0c 	.word	0x08005f0c
 8005db4:	08005ecc 	.word	0x08005ecc

08005db8 <_close_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_close_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb fa33 	bl	800122e <_close>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_close_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_close_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20000cbc 	.word	0x20000cbc

08005dd8 <_fstat_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_fstat_r+0x20>)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	f7fb fa2e 	bl	8001246 <_fstat>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	d102      	bne.n	8005df4 <_fstat_r+0x1c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	b103      	cbz	r3, 8005df4 <_fstat_r+0x1c>
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	20000cbc 	.word	0x20000cbc

08005dfc <_isatty_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	; (8005e18 <_isatty_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb fa2d 	bl	8001266 <_isatty>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_isatty_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_isatty_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000cbc 	.word	0x20000cbc

08005e1c <_lseek_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	; (8005e3c <_lseek_r+0x20>)
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	2200      	movs	r2, #0
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb fa26 	bl	800127c <_lseek>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_lseek_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_lseek_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000cbc 	.word	0x20000cbc

08005e40 <__malloc_lock>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__malloc_lock+0x8>)
 8005e42:	f7ff ba55 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 8005e46:	bf00      	nop
 8005e48:	20000cb0 	.word	0x20000cb0

08005e4c <__malloc_unlock>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__malloc_unlock+0x8>)
 8005e4e:	f7ff ba50 	b.w	80052f2 <__retarget_lock_release_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000cb0 	.word	0x20000cb0

08005e58 <_read_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	; (8005e78 <_read_r+0x20>)
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fb f9a8 	bl	80011bc <_read>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_read_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_read_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	20000cbc 	.word	0x20000cbc

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr
