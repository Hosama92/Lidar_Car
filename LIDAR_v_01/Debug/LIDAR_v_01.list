
LIDAR_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800b5a0  0800b5a0  0001b5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb20  0800bb20  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb20  0800bb20  0001bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb28  0800bb28  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bb30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000197c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b50  20001b50  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015e76  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d8e  00000000  00000000  000360bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a8  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e8f  00000000  00000000  0003a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000268af  00000000  00000000  0003af87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015923  00000000  00000000  00061836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e559e  00000000  00000000  00077159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006640  00000000  00000000  0015c6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00162d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b584 	.word	0x0800b584

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800b584 	.word	0x0800b584

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 fafc 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f81e 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 fa44 	bl	80014a8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001020:	f000 f884 	bl	800112c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001024:	f000 f9e8 	bl	80013f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001028:	f000 fa10 	bl	800144c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800102c:	f000 f8cc 	bl	80011c8 <MX_TIM1_Init>
  MX_UART5_Init();
 8001030:	f000 f9b8 	bl	80013a4 <MX_UART5_Init>
  MX_UART4_Init();
 8001034:	f000 f98c 	bl	8001350 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  RX_Struct_Init();
 8001038:	f000 fb02 	bl	8001640 <RX_Struct_Init>
  RX_Init();
 800103c:	f000 fb24 	bl	8001688 <RX_Init>
  Task_Struct_Init();
 8001040:	f001 fa9a 	bl	8002578 <Task_Struct_Init>
  Task_Init();
 8001044:	f001 faa4 	bl	8002590 <Task_Init>
  printf(" Init OK!!\n\n\r");
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <main+0x44>)
 800104a:	f006 fac7 	bl	80075dc <iprintf>

	//RX MSG Check;
	 //RX_Doing(); //LIDAR�???�� ?��?��
	 //motor_test();  //모터 �???��?��?�� : PWM�???��범위 ???�� 600-1000
	  //RX_Debug3();//
	  RX_Doing2();
 800104e:	f000 fb47 	bl	80016e0 <RX_Doing2>
  {
 8001052:	e7fc      	b.n	800104e <main+0x3e>
 8001054:	0800b5a0 	.word	0x0800b5a0

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f006 fbdb 	bl	8007822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemClock_Config+0xd0>)
 80010a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010cc:	23a8      	movs	r3, #168	; 0xa8
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fadb 	bl	8003698 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e8:	f000 faa4 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fd3c 	bl	8003b88 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001116:	f000 fa8d 	bl	8001634 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_ETH_Init+0x84>)
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <MX_ETH_Init+0x88>)
 8001134:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_ETH_Init+0x8c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ETH_Init+0x8c>)
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ETH_Init+0x8c>)
 8001144:	22e1      	movs	r2, #225	; 0xe1
 8001146:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ETH_Init+0x8c>)
 800114a:	2200      	movs	r2, #0
 800114c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ETH_Init+0x8c>)
 8001150:	2200      	movs	r2, #0
 8001152:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_ETH_Init+0x8c>)
 8001156:	2200      	movs	r2, #0
 8001158:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_ETH_Init+0x84>)
 800115c:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <MX_ETH_Init+0x8c>)
 800115e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_ETH_Init+0x84>)
 8001162:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001166:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_ETH_Init+0x84>)
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <MX_ETH_Init+0x90>)
 800116c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_ETH_Init+0x84>)
 8001170:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <MX_ETH_Init+0x94>)
 8001172:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_ETH_Init+0x84>)
 8001176:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800117a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_ETH_Init+0x84>)
 800117e:	f001 fc81 	bl	8002a84 <HAL_ETH_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001188:	f000 fa54 	bl	8001634 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800118c:	2238      	movs	r2, #56	; 0x38
 800118e:	2100      	movs	r1, #0
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_ETH_Init+0x98>)
 8001192:	f006 fb46 	bl	8007822 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_ETH_Init+0x98>)
 8001198:	2221      	movs	r2, #33	; 0x21
 800119a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_ETH_Init+0x98>)
 800119e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_ETH_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000368 	.word	0x20000368
 80011b4:	40028000 	.word	0x40028000
 80011b8:	20000a38 	.word	0x20000a38
 80011bc:	200002c8 	.word	0x200002c8
 80011c0:	20000228 	.word	0x20000228
 80011c4:	200001f0 	.word	0x200001f0

080011c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b096      	sub	sp, #88	; 0x58
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f006 fb0e 	bl	8007822 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <MX_TIM1_Init+0x180>)
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <MX_TIM1_Init+0x184>)
 800120a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800120c:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <MX_TIM1_Init+0x180>)
 800120e:	2253      	movs	r2, #83	; 0x53
 8001210:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <MX_TIM1_Init+0x180>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <MX_TIM1_Init+0x180>)
 800121a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b49      	ldr	r3, [pc, #292]	; (8001348 <MX_TIM1_Init+0x180>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <MX_TIM1_Init+0x180>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b46      	ldr	r3, [pc, #280]	; (8001348 <MX_TIM1_Init+0x180>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001232:	4845      	ldr	r0, [pc, #276]	; (8001348 <MX_TIM1_Init+0x180>)
 8001234:	f002 fec8 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800123e:	f000 f9f9 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124c:	4619      	mov	r1, r3
 800124e:	483e      	ldr	r0, [pc, #248]	; (8001348 <MX_TIM1_Init+0x180>)
 8001250:	f003 fa42 	bl	80046d8 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800125a:	f000 f9eb 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800125e:	483a      	ldr	r0, [pc, #232]	; (8001348 <MX_TIM1_Init+0x180>)
 8001260:	f002 ff01 	bl	8004066 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800126a:	f000 f9e3 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127a:	4619      	mov	r1, r3
 800127c:	4832      	ldr	r0, [pc, #200]	; (8001348 <MX_TIM1_Init+0x180>)
 800127e:	f003 fe2b 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001288:	f000 f9d4 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4825      	ldr	r0, [pc, #148]	; (8001348 <MX_TIM1_Init+0x180>)
 80012b2:	f003 f94f 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012bc:	f000 f9ba 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	481f      	ldr	r0, [pc, #124]	; (8001348 <MX_TIM1_Init+0x180>)
 80012ca:	f003 f943 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012d4:	f000 f9ae 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2208      	movs	r2, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	4819      	ldr	r0, [pc, #100]	; (8001348 <MX_TIM1_Init+0x180>)
 80012e2:	f003 f937 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012ec:	f000 f9a2 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	220c      	movs	r2, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM1_Init+0x180>)
 80012fa:	f003 f92b 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001304:	f000 f996 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM1_Init+0x180>)
 800132c:	f003 fe50 	bl	8004fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001336:	f000 f97d 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM1_Init+0x180>)
 800133c:	f000 fe6a 	bl	8002014 <HAL_TIM_MspPostInit>

}
 8001340:	bf00      	nop
 8001342:	3758      	adds	r7, #88	; 0x58
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000418 	.word	0x20000418
 800134c:	40010000 	.word	0x40010000

08001350 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_UART4_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_UART4_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_UART4_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_UART4_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_UART4_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_UART4_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_UART4_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_UART4_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_UART4_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_UART4_Init+0x4c>)
 8001388:	f003 fe88 	bl	800509c <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 f94f 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000460 	.word	0x20000460
 80013a0:	40004c00 	.word	0x40004c00

080013a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_UART5_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_UART5_Init+0x4c>)
 80013dc:	f003 fe5e 	bl	800509c <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f925 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200004a4 	.word	0x200004a4
 80013f4:	40005000 	.word	0x40005000

080013f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART3_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001430:	f003 fe34 	bl	800509c <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f8fb 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200004e8 	.word	0x200004e8
 8001448:	40004800 	.word	0x40004800

0800144c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001452:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001456:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145a:	2204      	movs	r2, #4
 800145c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001460:	2202      	movs	r2, #2
 8001462:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146c:	2202      	movs	r2, #2
 800146e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001472:	2201      	movs	r2, #1
 8001474:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001484:	2201      	movs	r2, #1
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001490:	f001 ffe5 	bl	800345e <HAL_PCD_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 f8cb 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000052c 	.word	0x2000052c

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b53      	ldr	r3, [pc, #332]	; (8001610 <MX_GPIO_Init+0x168>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <MX_GPIO_Init+0x168>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b50      	ldr	r3, [pc, #320]	; (8001610 <MX_GPIO_Init+0x168>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MX_GPIO_Init+0x168>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <MX_GPIO_Init+0x168>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <MX_GPIO_Init+0x168>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b45      	ldr	r3, [pc, #276]	; (8001610 <MX_GPIO_Init+0x168>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a44      	ldr	r2, [pc, #272]	; (8001610 <MX_GPIO_Init+0x168>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b42      	ldr	r3, [pc, #264]	; (8001610 <MX_GPIO_Init+0x168>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <MX_GPIO_Init+0x168>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <MX_GPIO_Init+0x168>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <MX_GPIO_Init+0x168>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <MX_GPIO_Init+0x168>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a36      	ldr	r2, [pc, #216]	; (8001610 <MX_GPIO_Init+0x168>)
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_GPIO_Init+0x168>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <MX_GPIO_Init+0x168>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <MX_GPIO_Init+0x168>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <MX_GPIO_Init+0x168>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_GPIO_Init+0x168>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a28      	ldr	r2, [pc, #160]	; (8001610 <MX_GPIO_Init+0x168>)
 8001570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_GPIO_Init+0x168>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f244 0181 	movw	r1, #16513	; 0x4081
 8001588:	4822      	ldr	r0, [pc, #136]	; (8001614 <MX_GPIO_Init+0x16c>)
 800158a:	f001 ff4f 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <MX_GPIO_Init+0x170>)
 8001594:	f001 ff4a 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	481b      	ldr	r0, [pc, #108]	; (800161c <MX_GPIO_Init+0x174>)
 80015b0:	f001 fd90 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_GPIO_Init+0x16c>)
 80015ce:	f001 fd81 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <MX_GPIO_Init+0x170>)
 80015ea:	f001 fd73 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_GPIO_Init+0x170>)
 8001602:	f001 fd67 	bl	80030d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400
 8001618:	40021800 	.word	0x40021800
 800161c:	40020800 	.word	0x40020800

08001620 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <RX_Struct_Init>:
_sRX_MSG sRX_MSG;
_uData uData;

//
void RX_Struct_Init() // 구조체들 전부 초기화
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	memset(&sRX_Debug, 0, sizeof(sRX_Debug));
 8001644:	f240 4206 	movw	r2, #1030	; 0x406
 8001648:	2100      	movs	r1, #0
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <RX_Struct_Init+0x38>)
 800164c:	f006 f8e9 	bl	8007822 <memset>
	memset(&sRX_BLE, 0, sizeof(sRX_BLE));
 8001650:	f240 4206 	movw	r2, #1030	; 0x406
 8001654:	2100      	movs	r1, #0
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <RX_Struct_Init+0x3c>)
 8001658:	f006 f8e3 	bl	8007822 <memset>
	//
	memset(&sRX_TMP, 0, sizeof(sRX_TMP));
 800165c:	f240 4206 	movw	r2, #1030	; 0x406
 8001660:	2100      	movs	r1, #0
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <RX_Struct_Init+0x40>)
 8001664:	f006 f8dd 	bl	8007822 <memset>
	memset(&sRX_MSG, 0, sizeof(sRX_MSG));
 8001668:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800166c:	2100      	movs	r1, #0
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <RX_Struct_Init+0x44>)
 8001670:	f006 f8d7 	bl	8007822 <memset>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000a40 	.word	0x20000a40
 800167c:	20000e48 	.word	0x20000e48
 8001680:	20001250 	.word	0x20001250
 8001684:	20001658 	.word	0x20001658

08001688 <RX_Init>:

void RX_Init() // 인터럽트 받기시작
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <RX_Init+0x38>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6898      	ldr	r0, [r3, #8]
 8001692:	2300      	movs	r3, #0
 8001694:	2202      	movs	r2, #2
 8001696:	2100      	movs	r1, #0
 8001698:	f005 ffb2 	bl	8007600 <setvbuf>
	HAL_UART_Receive_IT(&huart3, &sRX_Debug.tmp, 1);// UART3 = for Debug
 800169c:	2201      	movs	r2, #1
 800169e:	4909      	ldr	r1, [pc, #36]	; (80016c4 <RX_Init+0x3c>)
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <RX_Init+0x40>)
 80016a2:	f003 fdda 	bl	800525a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &sRX_BLE.tmp, 1);// UART4 = for BLE
 80016a6:	2201      	movs	r2, #1
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <RX_Init+0x44>)
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <RX_Init+0x48>)
 80016ac:	f003 fdd5 	bl	800525a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, &sRX_TMP.tmp, 1); //UART5 = for LIDAR
 80016b0:	2201      	movs	r2, #1
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <RX_Init+0x4c>)
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <RX_Init+0x50>)
 80016b6:	f003 fdd0 	bl	800525a <HAL_UART_Receive_IT>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000064 	.word	0x20000064
 80016c4:	20000a40 	.word	0x20000a40
 80016c8:	200004e8 	.word	0x200004e8
 80016cc:	20000e48 	.word	0x20000e48
 80016d0:	20000460 	.word	0x20000460
 80016d4:	20001250 	.word	0x20001250
 80016d8:	200004a4 	.word	0x200004a4
 80016dc:	00000000 	.word	0x00000000

080016e0 <RX_Doing2>:
		}

	}
}
void RX_Doing2()
{
 80016e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	ed2d 8b02 	vpush	{d8}
 80016e8:	b0a9      	sub	sp, #164	; 0xa4
 80016ea:	af00      	add	r7, sp, #0
	if (sRX_TMP.pop_cnt != sRX_TMP.push_cnt)
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <RX_Doing2+0x1b8>)
 80016ee:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80016f2:	4b69      	ldr	r3, [pc, #420]	; (8001898 <RX_Doing2+0x1b8>)
 80016f4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f000 82cb 	beq.w	8001c94 <RX_Doing2+0x5b4>
	{
		sRX_MSG.tmp = sRX_TMP.rxbuf[sRX_TMP.pop_cnt++];
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <RX_Doing2+0x1b8>)
 8001700:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 8001704:	1c4b      	adds	r3, r1, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <RX_Doing2+0x1b8>)
 800170a:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
 800170e:	460a      	mov	r2, r1
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <RX_Doing2+0x1b8>)
 8001712:	4413      	add	r3, r2
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	4a61      	ldr	r2, [pc, #388]	; (800189c <RX_Doing2+0x1bc>)
 8001718:	7053      	strb	r3, [r2, #1]
		sRX_TMP.pop_cnt %= MAX_RX_SIZE;
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <RX_Doing2+0x1b8>)
 800171c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001724:	b29b      	uxth	r3, r3
 8001726:	4a5c      	ldr	r2, [pc, #368]	; (8001898 <RX_Doing2+0x1b8>)
 8001728:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402

		// 1.check start
		if (!sRX_MSG.start_flag)
 800172c:	4b5b      	ldr	r3, [pc, #364]	; (800189c <RX_Doing2+0x1bc>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	f083 0301 	eor.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d038      	beq.n	80017ac <RX_Doing2+0xcc>
		{
			if ((sRX_MSG.cnt == 0) && (sRX_MSG.tmp == 0xAA))
 800173a:	4b58      	ldr	r3, [pc, #352]	; (800189c <RX_Doing2+0x1bc>)
 800173c:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8001740:	2b00      	cmp	r3, #0
 8001742:	d117      	bne.n	8001774 <RX_Doing2+0x94>
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <RX_Doing2+0x1bc>)
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2baa      	cmp	r3, #170	; 0xaa
 800174a:	d113      	bne.n	8001774 <RX_Doing2+0x94>
			{
				memset(&sRX_MSG, 0, sizeof(sRX_MSG));
 800174c:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001750:	2100      	movs	r1, #0
 8001752:	4852      	ldr	r0, [pc, #328]	; (800189c <RX_Doing2+0x1bc>)
 8001754:	f006 f865 	bl	8007822 <memset>
				sRX_MSG.rxbuf[sRX_MSG.cnt++] = 0xAA;
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <RX_Doing2+0x1bc>)
 800175a:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	b291      	uxth	r1, r2
 8001762:	4a4e      	ldr	r2, [pc, #312]	; (800189c <RX_Doing2+0x1bc>)
 8001764:	f8a2 1138 	strh.w	r1, [r2, #312]	; 0x138
 8001768:	461a      	mov	r2, r3
 800176a:	4b4c      	ldr	r3, [pc, #304]	; (800189c <RX_Doing2+0x1bc>)
 800176c:	4413      	add	r3, r2
 800176e:	22aa      	movs	r2, #170	; 0xaa
 8001770:	709a      	strb	r2, [r3, #2]
				sRX_MSG.cnt = 0;
			}
		}

	}
}
 8001772:	e28f      	b.n	8001c94 <RX_Doing2+0x5b4>
			else if ((sRX_MSG.cnt == 1) && (sRX_MSG.tmp == 0x55))
 8001774:	4b49      	ldr	r3, [pc, #292]	; (800189c <RX_Doing2+0x1bc>)
 8001776:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 828a 	bne.w	8001c94 <RX_Doing2+0x5b4>
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <RX_Doing2+0x1bc>)
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	2b55      	cmp	r3, #85	; 0x55
 8001786:	f040 8285 	bne.w	8001c94 <RX_Doing2+0x5b4>
				sRX_MSG.rxbuf[sRX_MSG.cnt++] = 0x55;
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <RX_Doing2+0x1bc>)
 800178c:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	b291      	uxth	r1, r2
 8001794:	4a41      	ldr	r2, [pc, #260]	; (800189c <RX_Doing2+0x1bc>)
 8001796:	f8a2 1138 	strh.w	r1, [r2, #312]	; 0x138
 800179a:	461a      	mov	r2, r3
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <RX_Doing2+0x1bc>)
 800179e:	4413      	add	r3, r2
 80017a0:	2255      	movs	r2, #85	; 0x55
 80017a2:	709a      	strb	r2, [r3, #2]
				sRX_MSG.start_flag = true;
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <RX_Doing2+0x1bc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	e273      	b.n	8001c94 <RX_Doing2+0x5b4>
		else if (sRX_MSG.start_flag)
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <RX_Doing2+0x1bc>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 826f 	beq.w	8001c94 <RX_Doing2+0x5b4>
			sRX_MSG.rxbuf[sRX_MSG.cnt++] = sRX_MSG.tmp;
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <RX_Doing2+0x1bc>)
 80017b8:	f8b3 1138 	ldrh.w	r1, [r3, #312]	; 0x138
 80017bc:	1c4b      	adds	r3, r1, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <RX_Doing2+0x1bc>)
 80017c2:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
 80017c6:	460a      	mov	r2, r1
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <RX_Doing2+0x1bc>)
 80017ca:	7859      	ldrb	r1, [r3, #1]
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <RX_Doing2+0x1bc>)
 80017ce:	441a      	add	r2, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	7093      	strb	r3, [r2, #2]
			uint16_t size = (sRX_MSG.rxbuf[3] * 2) + DATA_HEADER_SIZE;
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <RX_Doing2+0x1bc>)
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	3305      	adds	r3, #5
 80017da:	b29b      	uxth	r3, r3
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			if (sRX_MSG.cnt >= size)
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <RX_Doing2+0x1bc>)
 80017e4:	f8b3 2138 	ldrh.w	r2, [r3, #312]	; 0x138
 80017e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f200 8251 	bhi.w	8001c94 <RX_Doing2+0x5b4>
			{
 80017f2:	466b      	mov	r3, sp
 80017f4:	461e      	mov	r6, r3
				memcpy(&uData.rxbuf[0], &sRX_MSG.rxbuf[0], size);
 80017f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80017fa:	461a      	mov	r2, r3
 80017fc:	4928      	ldr	r1, [pc, #160]	; (80018a0 <RX_Doing2+0x1c0>)
 80017fe:	4829      	ldr	r0, [pc, #164]	; (80018a4 <RX_Doing2+0x1c4>)
 8001800:	f006 f88e 	bl	8007920 <memcpy>
				double fsa = (double)__REV16(uData.sData.sHeader.fsa) / 128;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <RX_Doing2+0x1c4>)
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	ba5b      	rev16	r3, r3
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe86 	bl	8000524 <__aeabi_ui2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <RX_Doing2+0x1c8>)
 800181e:	f7ff f825 	bl	800086c <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				double lsa = (double)__REV16(uData.sData.sHeader.lsa) / 128;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <RX_Doing2+0x1c4>)
 800182c:	88db      	ldrh	r3, [r3, #6]
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	ba5b      	rev16	r3, r3
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe73 	bl	8000524 <__aeabi_ui2d>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <RX_Doing2+0x1c8>)
 8001844:	f7ff f812 	bl	800086c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				uint16_t distance_sum = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				if (fsa > lsa) ang_diff = fabs(fsa-(360+lsa));
 8001856:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800185a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800185e:	f7ff f96b 	bl	8000b38 <__aeabi_dcmpgt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <RX_Doing2+0x1d0>
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <RX_Doing2+0x1cc>)
 800186e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001872:	f7fe fd1b 	bl	80002ac <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800187e:	f7fe fd13 	bl	80002a8 <__aeabi_dsub>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4611      	mov	r1, r2
 8001888:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800188c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001894:	e01b      	b.n	80018ce <RX_Doing2+0x1ee>
 8001896:	bf00      	nop
 8001898:	20001250 	.word	0x20001250
 800189c:	20001658 	.word	0x20001658
 80018a0:	2000165a 	.word	0x2000165a
 80018a4:	20001794 	.word	0x20001794
 80018a8:	40600000 	.word	0x40600000
 80018ac:	40768000 	.word	0x40768000
				else ang_diff = fabs(fsa - lsa);
 80018b0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018b8:	f7fe fcf6 	bl	80002a8 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80018c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				lsn = uData.sData.sHeader.lsn;
 80018ce:	4b9f      	ldr	r3, [pc, #636]	; (8001b4c <RX_Doing2+0x46c>)
 80018d0:	78db      	ldrb	r3, [r3, #3]
 80018d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				double angle_buff[(int)lsn];
 80018d6:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 80018da:	1e4b      	subs	r3, r1, #1
 80018dc:	663b      	str	r3, [r7, #96]	; 0x60
 80018de:	460a      	mov	r2, r1
 80018e0:	2300      	movs	r3, #0
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	01ab      	lsls	r3, r5, #6
 80018f0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80018f4:	01a2      	lsls	r2, r4, #6
 80018f6:	460a      	mov	r2, r1
 80018f8:	2300      	movs	r3, #0
 80018fa:	4690      	mov	r8, r2
 80018fc:	4699      	mov	r9, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800190a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800190e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001912:	460b      	mov	r3, r1
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3307      	adds	r3, #7
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	ebad 0d03 	sub.w	sp, sp, r3
 8001920:	466b      	mov	r3, sp
 8001922:	3307      	adds	r3, #7
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	65fb      	str	r3, [r7, #92]	; 0x5c
				double distance_buff[2*(int)lsn];
 800192a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800192e:	0059      	lsls	r1, r3, #1
 8001930:	1e4b      	subs	r3, r1, #1
 8001932:	65bb      	str	r3, [r7, #88]	; 0x58
 8001934:	460a      	mov	r2, r1
 8001936:	2300      	movs	r3, #0
 8001938:	4692      	mov	sl, r2
 800193a:	469b      	mov	fp, r3
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800194c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001950:	460a      	mov	r2, r1
 8001952:	2300      	movs	r3, #0
 8001954:	623a      	str	r2, [r7, #32]
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001964:	4628      	mov	r0, r5
 8001966:	0183      	lsls	r3, r0, #6
 8001968:	4620      	mov	r0, r4
 800196a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800196e:	4620      	mov	r0, r4
 8001970:	0182      	lsls	r2, r0, #6
 8001972:	460b      	mov	r3, r1
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	3307      	adds	r3, #7
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	ebad 0d03 	sub.w	sp, sp, r3
 8001980:	466b      	mov	r3, sp
 8001982:	3307      	adds	r3, #7
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	657b      	str	r3, [r7, #84]	; 0x54
				double angle_correct_buff[(int)lsn];
 800198a:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 800198e:	1e4b      	subs	r3, r1, #1
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
 8001992:	460a      	mov	r2, r1
 8001994:	2300      	movs	r3, #0
 8001996:	61ba      	str	r2, [r7, #24]
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019a6:	4628      	mov	r0, r5
 80019a8:	0183      	lsls	r3, r0, #6
 80019aa:	4620      	mov	r0, r4
 80019ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019b0:	4620      	mov	r0, r4
 80019b2:	0182      	lsls	r2, r0, #6
 80019b4:	460a      	mov	r2, r1
 80019b6:	2300      	movs	r3, #0
 80019b8:	613a      	str	r2, [r7, #16]
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019c8:	4628      	mov	r0, r5
 80019ca:	0183      	lsls	r3, r0, #6
 80019cc:	4620      	mov	r0, r4
 80019ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d2:	4620      	mov	r0, r4
 80019d4:	0182      	lsls	r2, r0, #6
 80019d6:	460b      	mov	r3, r1
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	3307      	adds	r3, #7
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	ebad 0d03 	sub.w	sp, sp, r3
 80019e4:	466b      	mov	r3, sp
 80019e6:	3307      	adds	r3, #7
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
				double angle_final_buff[(int)lsn];
 80019ee:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 80019f2:	1e4b      	subs	r3, r1, #1
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80019f6:	460a      	mov	r2, r1
 80019f8:	2300      	movs	r3, #0
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	0183      	lsls	r3, r0, #6
 8001a0e:	4620      	mov	r0, r4
 8001a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a14:	4620      	mov	r0, r4
 8001a16:	0182      	lsls	r2, r0, #6
 8001a18:	460a      	mov	r2, r1
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603a      	str	r2, [r7, #0]
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	0183      	lsls	r3, r0, #6
 8001a30:	4620      	mov	r0, r4
 8001a32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a36:	4620      	mov	r0, r4
 8001a38:	0182      	lsls	r2, r0, #6
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	3307      	adds	r3, #7
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	ebad 0d03 	sub.w	sp, sp, r3
 8001a48:	466b      	mov	r3, sp
 8001a4a:	3307      	adds	r3, #7
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
				for(int i = 0;i <2*(int)lsn;i+=2)
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a58:	e02f      	b.n	8001aba <RX_Doing2+0x3da>
					distance_sum = uData.sData.sSamp.buf[i]+(uData.sData.sSamp.buf[i+1]*256);
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <RX_Doing2+0x46c>)
 8001a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a60:	3304      	adds	r3, #4
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	885a      	ldrh	r2, [r3, #2]
 8001a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4937      	ldr	r1, [pc, #220]	; (8001b4c <RX_Doing2+0x46c>)
 8001a70:	3304      	adds	r3, #4
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	440b      	add	r3, r1
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					distance = ((double)distance_sum)/4;
 8001a82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd4c 	bl	8000524 <__aeabi_ui2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <RX_Doing2+0x470>)
 8001a92:	f7fe feeb 	bl	800086c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
					distance_buff[i] = distance;
 8001a9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	18d1      	adds	r1, r2, r3
 8001aa8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i = 0;i <2*(int)lsn;i+=2)
 8001ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001aba:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbc8      	blt.n	8001a5a <RX_Doing2+0x37a>
				for(int i = 0;i <(int)lsn;i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ace:	e0cf      	b.n	8001c70 <RX_Doing2+0x590>
					angle = (((ang_diff/(((int)lsn)-1))*(i+1))+fsa);
 8001ad0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd34 	bl	8000544 <__aeabi_i2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ae4:	f7fe fec2 	bl	800086c <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af4:	3301      	adds	r3, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd24 	bl	8000544 <__aeabi_i2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fd88 	bl	8000618 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b10:	f7fe fbcc 	bl	80002ac <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
					if(distance_buff[i] ==0 )
 8001b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f7fe ffd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00b      	beq.n	8001b54 <RX_Doing2+0x474>
						angle_correct = 0;
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8001b48:	e041      	b.n	8001bce <RX_Doing2+0x4ee>
 8001b4a:	bf00      	nop
 8001b4c:	20001794 	.word	0x20001794
 8001b50:	40100000 	.word	0x40100000
						angle_correct = atan2(21.8 *(155.3 - distance),(155.3 * distance))*180/3.14;
 8001b54:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b58:	a15a      	add	r1, pc, #360	; (adr r1, 8001cc4 <RX_Doing2+0x5e4>)
 8001b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b5e:	f7fe fba3 	bl	80002a8 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a358      	add	r3, pc, #352	; (adr r3, 8001ccc <RX_Doing2+0x5ec>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd52 	bl	8000618 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	ec43 2b18 	vmov	d8, r2, r3
 8001b7c:	a351      	add	r3, pc, #324	; (adr r3, 8001cc4 <RX_Doing2+0x5e4>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001b86:	f7fe fd47 	bl	8000618 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
 8001b92:	eeb0 1a47 	vmov.f32	s2, s14
 8001b96:	eef0 1a67 	vmov.f32	s3, s15
 8001b9a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b9e:	eef0 0a68 	vmov.f32	s1, s17
 8001ba2:	f009 fa79 	bl	800b098 <atan2>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <RX_Doing2+0x5d0>)
 8001bb0:	f7fe fd32 	bl	8000618 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	a33a      	add	r3, pc, #232	; (adr r3, 8001ca8 <RX_Doing2+0x5c8>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fe53 	bl	800086c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
					angle_final_buff[i] = angle+angle_correct;
 8001bce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001bd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bd6:	f7fe fb69 	bl	80002ac <__adddf3>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001be0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001be4:	00c9      	lsls	r1, r1, #3
 8001be6:	4401      	add	r1, r0
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]
					if (angle_final_buff[i] >=360)
 8001bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <RX_Doing2+0x5d4>)
 8001c00:	f7fe ff90 	bl	8000b24 <__aeabi_dcmpge>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <RX_Doing2+0x556>
						angle_final_buff[i]-= 360;
 8001c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <RX_Doing2+0x5d4>)
 8001c1e:	f7fe fb43 	bl	80002a8 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c28:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001c2c:	00c9      	lsls	r1, r1, #3
 8001c2e:	4401      	add	r1, r0
 8001c30:	e9c1 2300 	strd	r2, r3, [r1]
 8001c34:	e00d      	b.n	8001c52 <RX_Doing2+0x572>
						angle_final_buff[i]=angle_final_buff[i];
 8001c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c46:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001c4a:	00c9      	lsls	r1, r1, #3
 8001c4c:	4401      	add	r1, r0
 8001c4e:	e9c1 2300 	strd	r2, r3, [r1]
					printf(" [debug] angle_final : %.3f[']\n\r", angle_final_buff[i]);
 8001c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <RX_Doing2+0x5d8>)
 8001c62:	f005 fcbb 	bl	80075dc <iprintf>
				for(int i = 0;i <(int)lsn;i++)
 8001c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c70:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f6ff af29 	blt.w	8001ad0 <RX_Doing2+0x3f0>
				printf("\n\r");
 8001c7e:	480f      	ldr	r0, [pc, #60]	; (8001cbc <RX_Doing2+0x5dc>)
 8001c80:	f005 fcac 	bl	80075dc <iprintf>
				sRX_MSG.start_flag = false;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <RX_Doing2+0x5e0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
				sRX_MSG.cnt = 0;
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <RX_Doing2+0x5e0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
 8001c92:	46b5      	mov	sp, r6
}
 8001c94:	bf00      	nop
 8001c96:	37a4      	adds	r7, #164	; 0xa4
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	ecbd 8b02 	vpop	{d8}
 8001c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ca2:	bf00      	nop
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	51eb851f 	.word	0x51eb851f
 8001cac:	40091eb8 	.word	0x40091eb8
 8001cb0:	40668000 	.word	0x40668000
 8001cb4:	40768000 	.word	0x40768000
 8001cb8:	0800b620 	.word	0x0800b620
 8001cbc:	0800b61c 	.word	0x0800b61c
 8001cc0:	20001658 	.word	0x20001658
 8001cc4:	9999999a 	.word	0x9999999a
 8001cc8:	40636999 	.word	0x40636999
 8001ccc:	cccccccd 	.word	0xcccccccd
 8001cd0:	4035cccc 	.word	0x4035cccc

08001cd4 <__io_putchar>:
	printf("BLE.tmp = %c\n\r",sRX_BLE.tmp);
	int x =sRX_BLE.tmp-'0';
	return x;
}
int __io_putchar(int ch)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	while (HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1) != HAL_OK);
 8001cdc:	bf00      	nop
 8001cde:	1d39      	adds	r1, r7, #4
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <__io_putchar+0x28>)
 8001ce6:	f003 fa26 	bl	8005136 <HAL_UART_Transmit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f6      	bne.n	8001cde <__io_putchar+0xa>
	return ch;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200004e8 	.word	0x200004e8

08001d00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // 인터럽트로 값을 저장
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance)//IDE의 시리얼 모니터상에 보이는 값
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d11c      	bne.n	8001d4e <HAL_UART_RxCpltCallback+0x4e>
	{
		sRX_Debug.rxbuf[sRX_Debug.push_cnt++] = sRX_Debug.tmp;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d16:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	b291      	uxth	r1, r2
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d20:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001d24:	4619      	mov	r1, r3
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d2c:	440b      	add	r3, r1
 8001d2e:	705a      	strb	r2, [r3, #1]
		sRX_Debug.push_cnt %= MAX_RX_SIZE;
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d32:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d3e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		HAL_UART_Receive_IT(&huart3, &sRX_Debug.tmp, 1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	491f      	ldr	r1, [pc, #124]	; (8001dc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001d46:	481e      	ldr	r0, [pc, #120]	; (8001dc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001d48:	f003 fa87 	bl	800525a <HAL_UART_Receive_IT>
	{
		sRX_TMP.rxbuf[sRX_TMP.push_cnt++] = sRX_TMP.tmp;
		sRX_TMP.push_cnt %= MAX_RX_SIZE;
		HAL_UART_Receive_IT(&huart5, &sRX_TMP.tmp, 1);
	}
}
 8001d4c:	e033      	b.n	8001db6 <HAL_UART_RxCpltCallback+0xb6>
	else if (huart->Instance == huart4.Instance)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10b      	bne.n	8001d72 <HAL_UART_RxCpltCallback+0x72>
		HAL_UART_Transmit(&huart3, &sRX_BLE.tmp, 4, 1);
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <HAL_UART_RxCpltCallback+0xcc>)
 8001d60:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001d62:	f003 f9e8 	bl	8005136 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, &sRX_BLE.tmp, 4);
 8001d66:	2204      	movs	r2, #4
 8001d68:	4918      	ldr	r1, [pc, #96]	; (8001dcc <HAL_UART_RxCpltCallback+0xcc>)
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001d6c:	f003 fa75 	bl	800525a <HAL_UART_Receive_IT>
}
 8001d70:	e021      	b.n	8001db6 <HAL_UART_RxCpltCallback+0xb6>
	else if (huart->Instance == huart5.Instance) // UART5에서 instance가 발생하면
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d11b      	bne.n	8001db6 <HAL_UART_RxCpltCallback+0xb6>
		sRX_TMP.rxbuf[sRX_TMP.push_cnt++] = sRX_TMP.tmp;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001d80:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	b291      	uxth	r1, r2
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001d8a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001d96:	440b      	add	r3, r1
 8001d98:	705a      	strb	r2, [r3, #1]
		sRX_TMP.push_cnt %= MAX_RX_SIZE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001d9c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001da8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		HAL_UART_Receive_IT(&huart5, &sRX_TMP.tmp, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	4909      	ldr	r1, [pc, #36]	; (8001dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001db2:	f003 fa52 	bl	800525a <HAL_UART_Receive_IT>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200004e8 	.word	0x200004e8
 8001dc4:	20000a40 	.word	0x20000a40
 8001dc8:	20000460 	.word	0x20000460
 8001dcc:	20000e48 	.word	0x20000e48
 8001dd0:	200004a4 	.word	0x200004a4
 8001dd4:	20001250 	.word	0x20001250

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a55      	ldr	r2, [pc, #340]	; (8001f9c <HAL_ETH_MspInit+0x174>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 80a4 	bne.w	8001f94 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4a36      	ldr	r2, [pc, #216]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_ETH_MspInit+0x178>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f10:	2332      	movs	r3, #50	; 0x32
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f20:	230b      	movs	r3, #11
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <HAL_ETH_MspInit+0x17c>)
 8001f2c:	f001 f8d2 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f30:	2386      	movs	r3, #134	; 0x86
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f40:	230b      	movs	r3, #11
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <HAL_ETH_MspInit+0x180>)
 8001f4c:	f001 f8c2 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f62:	230b      	movs	r3, #11
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480f      	ldr	r0, [pc, #60]	; (8001fac <HAL_ETH_MspInit+0x184>)
 8001f6e:	f001 f8b1 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f84:	230b      	movs	r3, #11
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <HAL_ETH_MspInit+0x188>)
 8001f90:	f001 f8a0 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3738      	adds	r7, #56	; 0x38
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40028000 	.word	0x40028000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40021800 	.word	0x40021800

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_TIM_Base_MspInit+0x58>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d11d      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_TIM_Base_MspInit+0x5c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_TIM_Base_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_TIM_Base_MspInit+0x5c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2018      	movs	r0, #24
 8001fe8:	f000 fc83 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fec:	2018      	movs	r0, #24
 8001fee:	f000 fc9c 	bl	800292a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2019      	movs	r0, #25
 8001ff8:	f000 fc7b 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ffc:	2019      	movs	r0, #25
 8001ffe:	f000 fc94 	bl	800292a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_TIM_MspPostInit+0x68>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d11e      	bne.n	8002074 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_TIM_MspPostInit+0x6c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_TIM_MspPostInit+0x6c>)
 8002040:	f043 0310 	orr.w	r3, r3, #16
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_MspPostInit+0x6c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002052:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002064:	2301      	movs	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4619      	mov	r1, r3
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_TIM_MspPostInit+0x70>)
 8002070:	f001 f830 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010000 	.word	0x40010000
 8002080:	40023800 	.word	0x40023800
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a67      	ldr	r2, [pc, #412]	; (8002244 <HAL_UART_MspInit+0x1bc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d135      	bne.n	8002116 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020f4:	2308      	movs	r3, #8
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4853      	ldr	r0, [pc, #332]	; (800224c <HAL_UART_MspInit+0x1c4>)
 8002100:	f000 ffe8 	bl	80030d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2102      	movs	r1, #2
 8002108:	2034      	movs	r0, #52	; 0x34
 800210a:	f000 fbf2 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800210e:	2034      	movs	r0, #52	; 0x34
 8002110:	f000 fc0b 	bl	800292a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002114:	e092      	b.n	800223c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART5)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_UART_MspInit+0x1c8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d153      	bne.n	80021c8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a47      	ldr	r2, [pc, #284]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a40      	ldr	r2, [pc, #256]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a39      	ldr	r2, [pc, #228]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002186:	2308      	movs	r3, #8
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	482e      	ldr	r0, [pc, #184]	; (800224c <HAL_UART_MspInit+0x1c4>)
 8002192:	f000 ff9f 	bl	80030d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002196:	2304      	movs	r3, #4
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021a6:	2308      	movs	r3, #8
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4828      	ldr	r0, [pc, #160]	; (8002254 <HAL_UART_MspInit+0x1cc>)
 80021b2:	f000 ff8f 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2101      	movs	r1, #1
 80021ba:	2035      	movs	r0, #53	; 0x35
 80021bc:	f000 fb99 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80021c0:	2035      	movs	r0, #53	; 0x35
 80021c2:	f000 fbb2 	bl	800292a <HAL_NVIC_EnableIRQ>
}
 80021c6:	e039      	b.n	800223c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_UART_MspInit+0x1d0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d134      	bne.n	800223c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_UART_MspInit+0x1c0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800220a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800221c:	2307      	movs	r3, #7
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <HAL_UART_MspInit+0x1cc>)
 8002228:	f000 ff54 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2103      	movs	r1, #3
 8002230:	2027      	movs	r0, #39	; 0x27
 8002232:	f000 fb5e 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002236:	2027      	movs	r0, #39	; 0x27
 8002238:	f000 fb77 	bl	800292a <HAL_NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40004c00 	.word	0x40004c00
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40005000 	.word	0x40005000
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40004800 	.word	0x40004800

0800225c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227c:	d13f      	bne.n	80022fe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_PCD_MspInit+0xac>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_PCD_MspInit+0xac>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_PCD_MspInit+0xac>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800229a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022ac:	230a      	movs	r3, #10
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4815      	ldr	r0, [pc, #84]	; (800230c <HAL_PCD_MspInit+0xb0>)
 80022b8:	f000 ff0c 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	480e      	ldr	r0, [pc, #56]	; (800230c <HAL_PCD_MspInit+0xb0>)
 80022d2:	f000 feff 	bl	80030d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_PCD_MspInit+0xac>)
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_PCD_MspInit+0xac>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	6353      	str	r3, [r2, #52]	; 0x34
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_PCD_MspInit+0xac>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_PCD_MspInit+0xac>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_PCD_MspInit+0xac>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235c:	f000 f9aa 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800236a:	f001 ffeb 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000418 	.word	0x20000418

08002378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800237e:	f001 ffe1 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000418 	.word	0x20000418

0800238c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USART3_IRQHandler+0x10>)
 8002392:	f002 ff93 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200004e8 	.word	0x200004e8

080023a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <UART4_IRQHandler+0x10>)
 80023a6:	f002 ff89 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000460 	.word	0x20000460

080023b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <UART5_IRQHandler+0x10>)
 80023ba:	f002 ff7f 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200004a4 	.word	0x200004a4

080023c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_kill>:

int _kill(int pid, int sig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e2:	f005 fa71 	bl	80078c8 <__errno>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2216      	movs	r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_exit>:

void _exit (int status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffe7 	bl	80023d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800240a:	e7fe      	b.n	800240a <_exit+0x12>

0800240c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e00a      	b.n	8002434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800241e:	f3af 8000 	nop.w
 8002422:	4601      	mov	r1, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	60ba      	str	r2, [r7, #8]
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf0      	blt.n	800241e <_read+0x12>
  }

  return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e009      	b.n	800246c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fc37 	bl	8001cd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	dbf1      	blt.n	8002458 <_write+0x12>
  }
  return len;
 8002474:	687b      	ldr	r3, [r7, #4]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_close>:

int _close(int file)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a6:	605a      	str	r2, [r3, #4]
  return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_isatty>:

int _isatty(int file)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002518:	f005 f9d6 	bl	80078c8 <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	220c      	movs	r2, #12
 8002520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e009      	b.n	800253c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <_sbrk+0x64>)
 8002538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20030000 	.word	0x20030000
 8002548:	00000400 	.word	0x00000400
 800254c:	200019f8 	.word	0x200019f8
 8002550:	20001b50 	.word	0x20001b50

08002554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Task_Struct_Init>:
extern TIM_HandleTypeDef htim1;
_sTask sTask;
//
//바퀴 동작하는 클래스
void Task_Struct_Init()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	memset(&sTask, 0, sizeof(struct _sTask));
 800257c:	2202      	movs	r2, #2
 800257e:	2100      	movs	r1, #0
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <Task_Struct_Init+0x14>)
 8002582:	f005 f94e 	bl	8007822 <memset>
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200019fc 	.word	0x200019fc

08002590 <Task_Init>:

void Task_Init()
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);//좌측바퀴 전진
 8002594:	2100      	movs	r1, #0
 8002596:	4808      	ldr	r0, [pc, #32]	; (80025b8 <Task_Init+0x28>)
 8002598:	f001 fdbe 	bl	8004118 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);//좌측바퀴 후진
 800259c:	2104      	movs	r1, #4
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <Task_Init+0x28>)
 80025a0:	f001 fdba 	bl	8004118 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);//우측바퀴 전진
 80025a4:	2108      	movs	r1, #8
 80025a6:	4804      	ldr	r0, [pc, #16]	; (80025b8 <Task_Init+0x28>)
 80025a8:	f001 fdb6 	bl	8004118 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);//우측바퀴 후진
 80025ac:	210c      	movs	r1, #12
 80025ae:	4802      	ldr	r0, [pc, #8]	; (80025b8 <Task_Init+0x28>)
 80025b0:	f001 fdb2 	bl	8004118 <HAL_TIM_PWM_Start_IT>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000418 	.word	0x20000418

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffb5 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f005 f973 	bl	80078d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fd0f 	bl	8001010 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002600:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 8002604:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002608:	20001b50 	.word	0x20001b50

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 f94f 	bl	80028dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	2000      	movs	r0, #0
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff fbc8 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f967 	bl	8002946 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 f92f 	bl	80028f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20001a00 	.word	0x20001a00

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20001a00 	.word	0x20001a00

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <__NVIC_EnableIRQ+0x38>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	; (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	; (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a8:	d301      	bcc.n	80028ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00f      	b.n	80028ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <SysTick_Config+0x40>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b6:	210f      	movs	r1, #15
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f7ff ff8e 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <SysTick_Config+0x40>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <SysTick_Config+0x40>)
 80028c8:	2207      	movs	r2, #7
 80028ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e010 	.word	0xe000e010

080028dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff29 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff3e 	bl	8002784 <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff8e 	bl	8002830 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5d 	bl	80027dc <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff31 	bl	80027a0 <__NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffa2 	bl	8002898 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff feb6 	bl	80026dc <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d008      	beq.n	8002990 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e052      	b.n	8002a36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0216 	bic.w	r2, r2, #22
 800299e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <HAL_DMA_Abort+0x62>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0208 	bic.w	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e0:	e013      	b.n	8002a0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e2:	f7ff fe7b 	bl	80026dc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d90c      	bls.n	8002a0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2203      	movs	r2, #3
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e015      	b.n	8002a36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e4      	bne.n	80029e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	223f      	movs	r2, #63	; 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00c      	b.n	8002a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2205      	movs	r2, #5
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06c      	b.n	8002b70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2223      	movs	r2, #35	; 0x23
 8002aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff f9bd 	bl	8001e28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_ETH_Init+0xf4>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_ETH_Init+0xf4>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HAL_ETH_Init+0xf4>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_ETH_Init+0xf8>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_ETH_Init+0xf8>)
 8002ad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ad4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_ETH_Init+0xf8>)
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4927      	ldr	r1, [pc, #156]	; (8002b7c <HAL_ETH_Init+0xf8>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_ETH_Init+0xf8>)
 8002ae6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b00:	f7ff fdec 	bl	80026dc <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b06:	e011      	b.n	8002b2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b08:	f7ff fde8 	bl	80026dc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b16:	d909      	bls.n	8002b2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	22e0      	movs	r2, #224	; 0xe0
 8002b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e021      	b.n	8002b70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e4      	bne.n	8002b08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f958 	bl	8002df4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f9ff 	bl	8002f48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa55 	bl	8002ffa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	461a      	mov	r2, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9bd 	bl	8002ed8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40013800 	.word	0x40013800

08002b80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <ETH_SetMACConfig+0x15c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	7c1b      	ldrb	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <ETH_SetMACConfig+0x28>
 8002ba2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ba6:	e000      	b.n	8002baa <ETH_SetMACConfig+0x2a>
 8002ba8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7c5b      	ldrb	r3, [r3, #17]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <ETH_SetMACConfig+0x38>
 8002bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb6:	e000      	b.n	8002bba <ETH_SetMACConfig+0x3a>
 8002bb8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	7fdb      	ldrb	r3, [r3, #31]
 8002bc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002bc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	7f92      	ldrb	r2, [r2, #30]
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d102      	bne.n	8002bde <ETH_SetMACConfig+0x5e>
 8002bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bdc:	e000      	b.n	8002be0 <ETH_SetMACConfig+0x60>
 8002bde:	2200      	movs	r2, #0
                        macconf->Speed |
 8002be0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7f1b      	ldrb	r3, [r3, #28]
 8002be6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002be8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002bf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d102      	bne.n	8002c08 <ETH_SetMACConfig+0x88>
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	e000      	b.n	8002c0a <ETH_SetMACConfig+0x8a>
 8002c08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7bdb      	ldrb	r3, [r3, #15]
 8002c10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c22:	4313      	orrs	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7ff fd5a 	bl	80026f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d101      	bne.n	8002c6e <ETH_SetMACConfig+0xee>
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	e000      	b.n	8002c70 <ETH_SetMACConfig+0xf0>
 8002c6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c7e:	2a01      	cmp	r2, #1
 8002c80:	d101      	bne.n	8002c86 <ETH_SetMACConfig+0x106>
 8002c82:	2208      	movs	r2, #8
 8002c84:	e000      	b.n	8002c88 <ETH_SetMACConfig+0x108>
 8002c86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002c90:	2a01      	cmp	r2, #1
 8002c92:	d101      	bne.n	8002c98 <ETH_SetMACConfig+0x118>
 8002c94:	2204      	movs	r2, #4
 8002c96:	e000      	b.n	8002c9a <ETH_SetMACConfig+0x11a>
 8002c98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ca2:	2a01      	cmp	r2, #1
 8002ca4:	d101      	bne.n	8002caa <ETH_SetMACConfig+0x12a>
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	e000      	b.n	8002cac <ETH_SetMACConfig+0x12c>
 8002caa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cac:	4313      	orrs	r3, r2
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff fd15 	bl	80026f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	619a      	str	r2, [r3, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	ff20810f 	.word	0xff20810f

08002ce0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <ETH_SetDMAConfig+0x110>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	7b1b      	ldrb	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <ETH_SetDMAConfig+0x2c>
 8002d06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d0a:	e000      	b.n	8002d0e <ETH_SetDMAConfig+0x2e>
 8002d0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	7b5b      	ldrb	r3, [r3, #13]
 8002d12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	7f52      	ldrb	r2, [r2, #29]
 8002d1a:	2a00      	cmp	r2, #0
 8002d1c:	d102      	bne.n	8002d24 <ETH_SetDMAConfig+0x44>
 8002d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d22:	e000      	b.n	8002d26 <ETH_SetDMAConfig+0x46>
 8002d24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	7b9b      	ldrb	r3, [r3, #14]
 8002d2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7f1b      	ldrb	r3, [r3, #28]
 8002d3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	7f9b      	ldrb	r3, [r3, #30]
 8002d42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d54:	4313      	orrs	r3, r2
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d64:	461a      	mov	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff fcbc 	bl	80026f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	791b      	ldrb	r3, [r3, #4]
 8002d8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002da0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002da8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002daa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002db2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002db8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7ff fc8d 	bl	80026f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	f8de3f23 	.word	0xf8de3f23

08002df4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0a6      	sub	sp, #152	; 0x98
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e30:	2300      	movs	r3, #0
 8002e32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fe86 	bl	8002b80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff08 	bl	8002ce0 <ETH_SetDMAConfig>
}
 8002ed0:	bf00      	nop
 8002ed2:	3798      	adds	r7, #152	; 0x98
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3305      	adds	r3, #5
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	3204      	adds	r2, #4
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <ETH_MACAddressConfig+0x68>)
 8002efa:	4413      	add	r3, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3303      	adds	r3, #3
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	061a      	lsls	r2, r3, #24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <ETH_MACAddressConfig+0x6c>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40028040 	.word	0x40028040
 8002f44:	40028044 	.word	0x40028044

08002f48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e03e      	b.n	8002fd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	3206      	adds	r2, #6
 8002f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d80c      	bhi.n	8002fb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e004      	b.n	8002fc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d9bd      	bls.n	8002f56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	611a      	str	r2, [r3, #16]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e046      	b.n	8003096 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003044:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800304c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	3212      	adds	r2, #18
 8003062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d80c      	bhi.n	8003086 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6919      	ldr	r1, [r3, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	e004      	b.n	8003090 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3301      	adds	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d9b5      	bls.n	8003008 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c6:	60da      	str	r2, [r3, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e177      	b.n	80033e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 8166 	bne.w	80033da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d005      	beq.n	8003126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	2b02      	cmp	r3, #2
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d017      	beq.n	80031c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d123      	bne.n	8003218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80c0 	beq.w	80033da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_GPIO_Init+0x324>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a65      	ldr	r2, [pc, #404]	; (80033f8 <HAL_GPIO_Init+0x324>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_GPIO_Init+0x324>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a61      	ldr	r2, [pc, #388]	; (80033fc <HAL_GPIO_Init+0x328>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_GPIO_Init+0x32c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d037      	beq.n	8003312 <HAL_GPIO_Init+0x23e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_GPIO_Init+0x330>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_GPIO_Init+0x23a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_GPIO_Init+0x334>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x236>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_GPIO_Init+0x338>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x232>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_GPIO_Init+0x33c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x22e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a53      	ldr	r2, [pc, #332]	; (8003414 <HAL_GPIO_Init+0x340>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x22a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_GPIO_Init+0x344>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x226>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a51      	ldr	r2, [pc, #324]	; (800341c <HAL_GPIO_Init+0x348>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x222>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_GPIO_Init+0x34c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x21e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_Init+0x350>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x21a>
 80032ea:	2309      	movs	r3, #9
 80032ec:	e012      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032ee:	230a      	movs	r3, #10
 80032f0:	e010      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e00e      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032f6:	2307      	movs	r3, #7
 80032f8:	e00c      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e00a      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032fe:	2305      	movs	r3, #5
 8003300:	e008      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003302:	2304      	movs	r3, #4
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003306:	2303      	movs	r3, #3
 8003308:	e004      	b.n	8003314 <HAL_GPIO_Init+0x240>
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_GPIO_Init+0x240>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003312:	2300      	movs	r3, #0
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	f002 0203 	and.w	r2, r2, #3
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	4093      	lsls	r3, r2
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003324:	4935      	ldr	r1, [pc, #212]	; (80033fc <HAL_GPIO_Init+0x328>)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_GPIO_Init+0x354>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033aa:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3301      	adds	r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	f67f ae84 	bls.w	80030f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40013800 	.word	0x40013800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40020800 	.word	0x40020800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40021000 	.word	0x40021000
 8003414:	40021400 	.word	0x40021400
 8003418:	40021800 	.word	0x40021800
 800341c:	40021c00 	.word	0x40021c00
 8003420:	40022000 	.word	0x40022000
 8003424:	40022400 	.word	0x40022400
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	4613      	mov	r3, r2
 800343a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800343c:	787b      	ldrb	r3, [r7, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003448:	e003      	b.n	8003452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	041a      	lsls	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	619a      	str	r2, [r3, #24]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800345e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003460:	b08f      	sub	sp, #60	; 0x3c
 8003462:	af0a      	add	r7, sp, #40	; 0x28
 8003464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e10f      	b.n	8003690 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fee6 	bl	800225c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2203      	movs	r2, #3
 8003494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fecd 	bl	800624e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	687e      	ldr	r6, [r7, #4]
 80034bc:	466d      	mov	r5, sp
 80034be:	f106 0410 	add.w	r4, r6, #16
 80034c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d2:	1d33      	adds	r3, r6, #4
 80034d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f002 fe58 	bl	800618c <USB_CoreInit>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0d0      	b.n	8003690 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 febb 	bl	8006270 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	e04a      	b.n	8003596 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	333d      	adds	r3, #61	; 0x3d
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	333c      	adds	r3, #60	; 0x3c
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	b298      	uxth	r0, r3
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3344      	adds	r3, #68	; 0x44
 800353c:	4602      	mov	r2, r0
 800353e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3340      	adds	r3, #64	; 0x40
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3348      	adds	r3, #72	; 0x48
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	334c      	adds	r3, #76	; 0x4c
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3354      	adds	r3, #84	; 0x54
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	3301      	adds	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d3af      	bcc.n	8003500 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e044      	b.n	8003630 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	3301      	adds	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d3b5      	bcc.n	80035a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	687e      	ldr	r6, [r7, #4]
 8003642:	466d      	mov	r5, sp
 8003644:	f106 0410 	add.w	r4, r6, #16
 8003648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003654:	e885 0003 	stmia.w	r5, {r0, r1}
 8003658:	1d33      	adds	r3, r6, #4
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f002 fe53 	bl	8006308 <USB_DevInit>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e00d      	b.n	8003690 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f003 f81e 	bl	80066ca <USB_DevDisconnect>

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e267      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d075      	beq.n	80037a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d00c      	beq.n	80036dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b82      	ldr	r3, [pc, #520]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d10b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d157      	bne.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e242      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x74>
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a75      	ldr	r2, [pc, #468]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x98>
 8003716:	4b70      	ldr	r3, [pc, #448]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6f      	ldr	r2, [pc, #444]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6c      	ldr	r2, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 8003730:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a65      	ldr	r2, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe ffc4 	bl	80026dc <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe ffc0 	bl	80026dc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e207      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xc0>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe ffb0 	bl	80026dc <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe ffac 	bl	80026dc <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1f3      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b51      	ldr	r3, [pc, #324]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1c7      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4937      	ldr	r1, [pc, #220]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x244>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe ff65 	bl	80026dc <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003816:	f7fe ff61 	bl	80026dc <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1a8      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4925      	ldr	r1, [pc, #148]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x244>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe ff44 	bl	80026dc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003858:	f7fe ff40 	bl	80026dc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e187      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d036      	beq.n	80038f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x248>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe ff24 	bl	80026dc <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe ff20 	bl	80026dc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e167      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x200>
 80038b6:	e01b      	b.n	80038f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x248>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe ff0d 	bl	80026dc <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e00e      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe ff09 	bl	80026dc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d907      	bls.n	80038e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e150      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
 80038d8:	40023800 	.word	0x40023800
 80038dc:	42470000 	.word	0x42470000
 80038e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ea      	bne.n	80038c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8097 	beq.w	8003a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b7a      	ldr	r3, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a73      	ldr	r2, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fe fec9 	bl	80026dc <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fe fec5 	bl	80026dc <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e10c      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x2ea>
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	e01c      	b.n	80039bc <HAL_RCC_OscConfig+0x324>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x30c>
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5b      	ldr	r2, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0x324>
 80039a4:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a57      	ldr	r2, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a54      	ldr	r2, [pc, #336]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0304 	bic.w	r3, r3, #4
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fe fe8a 	bl	80026dc <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039cc:	f7fe fe86 	bl	80026dc <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0cb      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ee      	beq.n	80039cc <HAL_RCC_OscConfig+0x334>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f0:	f7fe fe74 	bl	80026dc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fe fe70 	bl	80026dc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0b5      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ee      	bne.n	80039f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a1 	beq.w	8003b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a36:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d05c      	beq.n	8003afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d141      	bne.n	8003ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe fe44 	bl	80026dc <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fe40 	bl	80026dc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e087      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	491b      	ldr	r1, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fe19 	bl	80026dc <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fe fe15 	bl	80026dc <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e05c      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x416>
 8003acc:	e054      	b.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fe02 	bl	80026dc <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe fdfe 	bl	80026dc <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e045      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x444>
 8003afa:	e03d      	b.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e038      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d028      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d121      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d11a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fe fd30 	bl	80026dc <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fd2c 	bl	80026dc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fc90 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	0800b670 	.word	0x0800b670
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b094      	sub	sp, #80	; 0x50
 8003d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d60:	2300      	movs	r3, #0
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d64:	2300      	movs	r3, #0
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6c:	4b79      	ldr	r3, [pc, #484]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x40>
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	f200 80e1 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x34>
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d86:	e0db      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b73      	ldr	r3, [pc, #460]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d8c:	e0db      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d92:	e0d8      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d063      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003daa:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	2200      	movs	r2, #0
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4621      	mov	r1, r4
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	6139      	str	r1, [r7, #16]
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003df8:	4659      	mov	r1, fp
 8003dfa:	018b      	lsls	r3, r1, #6
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e02:	4651      	mov	r1, sl
 8003e04:	018a      	lsls	r2, r1, #6
 8003e06:	4651      	mov	r1, sl
 8003e08:	ebb2 0801 	subs.w	r8, r2, r1
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e26:	4690      	mov	r8, r2
 8003e28:	4699      	mov	r9, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	eb18 0303 	adds.w	r3, r8, r3
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	462b      	mov	r3, r5
 8003e34:	eb49 0303 	adc.w	r3, r9, r3
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e46:	4629      	mov	r1, r5
 8003e48:	024b      	lsls	r3, r1, #9
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e50:	4621      	mov	r1, r4
 8003e52:	024a      	lsls	r2, r1, #9
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e64:	f7fc ff20 	bl	8000ca8 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e70:	e058      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9e:	0150      	lsls	r0, r2, #5
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	00eb      	lsls	r3, r5, #3
 8003ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eda:	00e2      	lsls	r2, r4, #3
 8003edc:	4614      	mov	r4, r2
 8003ede:	461d      	mov	r5, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	18e3      	adds	r3, r4, r3
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efa:	4629      	mov	r1, r5
 8003efc:	028b      	lsls	r3, r1, #10
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f04:	4621      	mov	r1, r4
 8003f06:	028a      	lsls	r2, r1, #10
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	61fa      	str	r2, [r7, #28]
 8003f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f18:	f7fc fec6 	bl	8000ca8 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3750      	adds	r7, #80	; 0x50
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000000 	.word	0x20000000

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800b680 	.word	0x0800b680

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800b680 	.word	0x0800b680

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e041      	b.n	800405e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd ffe0 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 fc56 	bl	80048b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e041      	b.n	80040fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f839 	bl	8004104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f000 fc07 	bl	80048b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_TIM_PWM_Start_IT+0x28>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e022      	b.n	8004186 <HAL_TIM_PWM_Start_IT+0x6e>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b04      	cmp	r3, #4
 8004144:	d109      	bne.n	800415a <HAL_TIM_PWM_Start_IT+0x42>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e015      	b.n	8004186 <HAL_TIM_PWM_Start_IT+0x6e>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start_IT+0x5c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e008      	b.n	8004186 <HAL_TIM_PWM_Start_IT+0x6e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0c7      	b.n	800431e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start_IT+0x86>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	e013      	b.n	80041c6 <HAL_TIM_PWM_Start_IT+0xae>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start_IT+0x96>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_PWM_Start_IT+0xae>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start_IT+0xa6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_PWM_Start_IT+0xae>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d841      	bhi.n	8004250 <HAL_TIM_PWM_Start_IT+0x138>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004251 	.word	0x08004251
 80041dc:	08004251 	.word	0x08004251
 80041e0:	08004251 	.word	0x08004251
 80041e4:	0800421b 	.word	0x0800421b
 80041e8:	08004251 	.word	0x08004251
 80041ec:	08004251 	.word	0x08004251
 80041f0:	08004251 	.word	0x08004251
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004251 	.word	0x08004251
 8004200:	08004251 	.word	0x08004251
 8004204:	0800423f 	.word	0x0800423f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0202 	orr.w	r2, r2, #2
 8004216:	60da      	str	r2, [r3, #12]
      break;
 8004218:	e01d      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0204 	orr.w	r2, r2, #4
 8004228:	60da      	str	r2, [r3, #12]
      break;
 800422a:	e014      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0208 	orr.w	r2, r2, #8
 800423a:	60da      	str	r2, [r3, #12]
      break;
 800423c:	e00b      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0210 	orr.w	r2, r2, #16
 800424c:	60da      	str	r2, [r3, #12]
      break;
 800424e:	e002      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	bf00      	nop
  }

  if (status == HAL_OK)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d15f      	bne.n	800431c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fe11 	bl	8004e8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2e      	ldr	r2, [pc, #184]	; (8004328 <HAL_TIM_PWM_Start_IT+0x210>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_PWM_Start_IT+0x166>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2c      	ldr	r2, [pc, #176]	; (800432c <HAL_TIM_PWM_Start_IT+0x214>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_Start_IT+0x16a>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_TIM_PWM_Start_IT+0x16c>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a22      	ldr	r2, [pc, #136]	; (8004328 <HAL_TIM_PWM_Start_IT+0x210>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <HAL_TIM_PWM_Start_IT+0x218>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_TIM_PWM_Start_IT+0x21c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <HAL_TIM_PWM_Start_IT+0x220>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_TIM_PWM_Start_IT+0x214>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_TIM_PWM_Start_IT+0x224>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_TIM_PWM_Start_IT+0x228>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d010      	beq.n	800431c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430a:	e007      	b.n	800431c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40010400 	.word	0x40010400
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0202 	mvn.w	r2, #2
 8004370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa77 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa69 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa7a 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0204 	mvn.w	r2, #4
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa4d 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa3f 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa50 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b08      	cmp	r3, #8
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0208 	mvn.w	r2, #8
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2204      	movs	r2, #4
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa23 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa15 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa26 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2208      	movs	r2, #8
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9f9 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9eb 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9fc 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0201 	mvn.w	r2, #1
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f8ac 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fdca 	bl	8005088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f9c1 	bl	80048a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b20      	cmp	r3, #32
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b20      	cmp	r3, #32
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0220 	mvn.w	r2, #32
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fd94 	bl	8005074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e0ae      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	f200 809f 	bhi.w	80046c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	080045bd 	.word	0x080045bd
 800458c:	080046c1 	.word	0x080046c1
 8004590:	080046c1 	.word	0x080046c1
 8004594:	080046c1 	.word	0x080046c1
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080046c1 	.word	0x080046c1
 80045a0:	080046c1 	.word	0x080046c1
 80045a4:	080046c1 	.word	0x080046c1
 80045a8:	0800463f 	.word	0x0800463f
 80045ac:	080046c1 	.word	0x080046c1
 80045b0:	080046c1 	.word	0x080046c1
 80045b4:	080046c1 	.word	0x080046c1
 80045b8:	0800467f 	.word	0x0800467f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa18 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]
      break;
 80045fa:	e064      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa68 	bl	8004ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	619a      	str	r2, [r3, #24]
      break;
 800463c:	e043      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fabd 	bl	8004bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0208 	orr.w	r2, r2, #8
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	61da      	str	r2, [r3, #28]
      break;
 800467c:	e023      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb11 	bl	8004cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	021a      	lsls	r2, r3, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
      break;
 80046be:	e002      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIM_ConfigClockSource+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e0b4      	b.n	800485e <HAL_TIM_ConfigClockSource+0x186>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d03e      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0xd4>
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004732:	f200 8087 	bhi.w	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	f000 8086 	beq.w	800484a <HAL_TIM_ConfigClockSource+0x172>
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d87f      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d01a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xa6>
 8004748:	2b70      	cmp	r3, #112	; 0x70
 800474a:	d87b      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d050      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004750:	2b60      	cmp	r3, #96	; 0x60
 8004752:	d877      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d03c      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d873      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d058      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x13a>
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d86f      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d064      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b30      	cmp	r3, #48	; 0x30
 800476a:	d86b      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d060      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d867      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	2b10      	cmp	r3, #16
 800477a:	d05a      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	e062      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f000 fb5d 	bl	8004e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	609a      	str	r2, [r3, #8]
      break;
 80047aa:	e04f      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6899      	ldr	r1, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f000 fb46 	bl	8004e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ce:	609a      	str	r2, [r3, #8]
      break;
 80047d0:	e03c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 faba 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2150      	movs	r1, #80	; 0x50
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb13 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80047f0:	e02c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fad9 	bl	8004db6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2160      	movs	r1, #96	; 0x60
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb03 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004810:	e01c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fa9a 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	4618      	mov	r0, r3
 800482c:	f000 faf3 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004830:	e00c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 faea 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004842:	e003      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      break;
 8004848:	e000      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a40      	ldr	r2, [pc, #256]	; (80049cc <TIM_Base_SetConfig+0x114>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <TIM_Base_SetConfig+0x118>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <TIM_Base_SetConfig+0x11c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <TIM_Base_SetConfig+0x120>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2f      	ldr	r2, [pc, #188]	; (80049cc <TIM_Base_SetConfig+0x114>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d027      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <TIM_Base_SetConfig+0x118>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d023      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2b      	ldr	r2, [pc, #172]	; (80049d4 <TIM_Base_SetConfig+0x11c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01f      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <TIM_Base_SetConfig+0x120>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <TIM_Base_SetConfig+0x124>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d017      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <TIM_Base_SetConfig+0x128>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <TIM_Base_SetConfig+0x12c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <TIM_Base_SetConfig+0x130>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a25      	ldr	r2, [pc, #148]	; (80049ec <TIM_Base_SetConfig+0x134>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <TIM_Base_SetConfig+0x138>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a23      	ldr	r2, [pc, #140]	; (80049f4 <TIM_Base_SetConfig+0x13c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <TIM_Base_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0xf8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	615a      	str	r2, [r3, #20]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40010400 	.word	0x40010400
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800
 80049ec:	40001800 	.word	0x40001800
 80049f0:	40001c00 	.word	0x40001c00
 80049f4:	40002000 	.word	0x40002000

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0302 	bic.w	r3, r3, #2
 8004a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <TIM_OC1_SetConfig+0xd8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_OC1_SetConfig+0x64>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <TIM_OC1_SetConfig+0xdc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10c      	bne.n	8004a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0308 	bic.w	r3, r3, #8
 8004a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <TIM_OC1_SetConfig+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_OC1_SetConfig+0x8e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <TIM_OC1_SetConfig+0xdc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d111      	bne.n	8004aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0210 	bic.w	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0320 	bic.w	r3, r3, #32
 8004b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <TIM_OC2_SetConfig+0xe4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC2_SetConfig+0x68>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <TIM_OC2_SetConfig+0xe8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10d      	bne.n	8004b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <TIM_OC2_SetConfig+0xe4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC2_SetConfig+0x94>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <TIM_OC2_SetConfig+0xe8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d113      	bne.n	8004b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <TIM_OC3_SetConfig+0xe0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_OC3_SetConfig+0x66>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <TIM_OC3_SetConfig+0xe4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10d      	bne.n	8004c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <TIM_OC3_SetConfig+0xe0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC3_SetConfig+0x92>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <TIM_OC3_SetConfig+0xe4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d113      	bne.n	8004c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40010400 	.word	0x40010400

08004cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <TIM_OC4_SetConfig+0xa4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC4_SetConfig+0x68>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <TIM_OC4_SetConfig+0xa8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d109      	bne.n	8004d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010400 	.word	0x40010400

08004d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 030a 	bic.w	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f043 0307 	orr.w	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e05a      	b.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d022      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d01d      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d018      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10c      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40001800 	.word	0x40001800

08004fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e03d      	b.n	8005068 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03f      	b.n	800512e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc ffe0 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	; 0x24
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fddf 	bl	8005ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b08a      	sub	sp, #40	; 0x28
 800513a:	af02      	add	r7, sp, #8
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	d17c      	bne.n	8005250 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_UART_Transmit+0x2c>
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e075      	b.n	8005252 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UART_Transmit+0x3e>
 8005170:	2302      	movs	r3, #2
 8005172:	e06e      	b.n	8005252 <HAL_UART_Transmit+0x11c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2221      	movs	r2, #33	; 0x21
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518a:	f7fd faa7 	bl	80026dc <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d108      	bne.n	80051b8 <HAL_UART_Transmit+0x82>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e003      	b.n	80051c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051c8:	e02a      	b.n	8005220 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fb1f 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e036      	b.n	8005252 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3302      	adds	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e007      	b.n	8005212 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1cf      	bne.n	80051ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	2140      	movs	r1, #64	; 0x40
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 faef 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	4613      	mov	r3, r2
 8005266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b20      	cmp	r3, #32
 8005272:	d11d      	bne.n	80052b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Receive_IT+0x26>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e016      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_UART_Receive_IT+0x38>
 800528e:	2302      	movs	r3, #2
 8005290:	e00f      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	461a      	mov	r2, r3
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb24 	bl	80058f4 <UART_Start_Receive_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b0ba      	sub	sp, #232	; 0xe8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_UART_IRQHandler+0x66>
 800530e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fc07 	bl	8005b2e <UART_Receive_IT>
      return;
 8005320:	e256      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80de 	beq.w	80054e8 <HAL_UART_IRQHandler+0x22c>
 800532c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80d1 	beq.w	80054e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xae>
 8005352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xd2>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0202 	orr.w	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf6>
 800539a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f043 0204 	orr.w	r2, r3, #4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d011      	beq.n	80053e2 <HAL_UART_IRQHandler+0x126>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f043 0208 	orr.w	r2, r3, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 81ed 	beq.w	80057c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_UART_IRQHandler+0x14e>
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb92 	bl	8005b2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <HAL_UART_IRQHandler+0x17a>
 800542e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04f      	beq.n	80054d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa9a 	bl	8005970 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d141      	bne.n	80054ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800547a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800548e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1d9      	bne.n	800544a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d013      	beq.n	80054c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4a7d      	ldr	r2, [pc, #500]	; (8005698 <HAL_UART_IRQHandler+0x3dc>)
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fd fac7 	bl	8002a3e <HAL_DMA_Abort_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c0:	4610      	mov	r0, r2
 80054c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00e      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f990 	bl	80057ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e00a      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f98c 	bl	80057ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	e006      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f988 	bl	80057ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054e2:	e170      	b.n	80057c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	bf00      	nop
    return;
 80054e6:	e16e      	b.n	80057c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	f040 814a 	bne.w	8005786 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8143 	beq.w	8005786 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 813c 	beq.w	8005786 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	f040 80b4 	bne.w	800569c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8140 	beq.w	80057ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005552:	429a      	cmp	r2, r3
 8005554:	f080 8139 	bcs.w	80057ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800555e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	f000 8088 	beq.w	800567e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800559a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e1      	bne.n	80055ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3314      	adds	r3, #20
 80055fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800561a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800561c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e3      	bne.n	80055f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	f023 0310 	bic.w	r3, r3, #16
 8005652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005660:	65ba      	str	r2, [r7, #88]	; 0x58
 8005662:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e3      	bne.n	800563c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd f970 	bl	800295e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005686:	b29b      	uxth	r3, r3
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8b6 	bl	8005800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005694:	e099      	b.n	80057ca <HAL_UART_IRQHandler+0x50e>
 8005696:	bf00      	nop
 8005698:	08005a37 	.word	0x08005a37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 808b 	beq.w	80057ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8086 	beq.w	80057ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056e6:	647a      	str	r2, [r7, #68]	; 0x44
 80056e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e3      	bne.n	80056c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3314      	adds	r3, #20
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	623b      	str	r3, [r7, #32]
   return(result);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800571e:	633a      	str	r2, [r7, #48]	; 0x30
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0310 	bic.w	r3, r3, #16
 8005756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005764:	61fa      	str	r2, [r7, #28]
 8005766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	617b      	str	r3, [r7, #20]
   return(result);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e3      	bne.n	8005740 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f83e 	bl	8005800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005784:	e023      	b.n	80057ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_UART_IRQHandler+0x4ea>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f95d 	bl	8005a5e <UART_Transmit_IT>
    return;
 80057a4:	e014      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <HAL_UART_IRQHandler+0x514>
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f99d 	bl	8005afe <UART_EndTransmit_IT>
    return;
 80057c4:	e004      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
    return;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ce:	bf00      	nop
  }
}
 80057d0:	37e8      	adds	r7, #232	; 0xe8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop

080057d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b090      	sub	sp, #64	; 0x40
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	e050      	b.n	80058cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d04c      	beq.n	80058cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <UART_WaitOnFlagUntilTimeout+0x30>
 8005838:	f7fc ff50 	bl	80026dc <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005844:	429a      	cmp	r2, r3
 8005846:	d241      	bcs.n	80058cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005868:	637a      	str	r2, [r7, #52]	; 0x34
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800586e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	613b      	str	r3, [r7, #16]
   return(result);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800589c:	623a      	str	r2, [r7, #32]
 800589e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	69f9      	ldr	r1, [r7, #28]
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e00f      	b.n	80058ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d09f      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3740      	adds	r7, #64	; 0x40
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2222      	movs	r2, #34	; 0x22
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005940:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0220 	orr.w	r2, r2, #32
 8005960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b095      	sub	sp, #84	; 0x54
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800598e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005998:	643a      	str	r2, [r7, #64]	; 0x40
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800599e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e5      	bne.n	80059ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d119      	bne.n	8005a1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a08:	61ba      	str	r2, [r7, #24]
 8005a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6979      	ldr	r1, [r7, #20]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	613b      	str	r3, [r7, #16]
   return(result);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a2a:	bf00      	nop
 8005a2c:	3754      	adds	r7, #84	; 0x54
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fecb 	bl	80057ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b21      	cmp	r3, #33	; 0x21
 8005a70:	d13e      	bne.n	8005af0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d114      	bne.n	8005aa6 <UART_Transmit_IT+0x48>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d110      	bne.n	8005aa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]
 8005aa4:	e008      	b.n	8005ab8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6211      	str	r1, [r2, #32]
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10f      	bne.n	8005aec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ada:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fe5a 	bl	80057d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b08c      	sub	sp, #48	; 0x30
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	f040 80ab 	bne.w	8005c9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4c:	d117      	bne.n	8005b7e <UART_Receive_IT+0x50>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d113      	bne.n	8005b7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b7c:	e026      	b.n	8005bcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d007      	beq.n	8005ba2 <UART_Receive_IT+0x74>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <UART_Receive_IT+0x82>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e008      	b.n	8005bc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d15a      	bne.n	8005c96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0220 	bic.w	r2, r2, #32
 8005bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d135      	bne.n	8005c8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f023 0310 	bic.w	r3, r3, #16
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	623a      	str	r2, [r7, #32]
 8005c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d10a      	bne.n	8005c7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff fdbb 	bl	8005800 <HAL_UARTEx_RxEventCallback>
 8005c8a:	e002      	b.n	8005c92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fc f837 	bl	8001d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e002      	b.n	8005c9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca8:	b0c0      	sub	sp, #256	; 0x100
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	68d9      	ldr	r1, [r3, #12]
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	ea40 0301 	orr.w	r3, r0, r1
 8005ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cfc:	f021 010c 	bic.w	r1, r1, #12
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1e:	6999      	ldr	r1, [r3, #24]
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	ea40 0301 	orr.w	r3, r0, r1
 8005d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b8f      	ldr	r3, [pc, #572]	; (8005f70 <UART_SetConfig+0x2cc>)
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d005      	beq.n	8005d44 <UART_SetConfig+0xa0>
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b8d      	ldr	r3, [pc, #564]	; (8005f74 <UART_SetConfig+0x2d0>)
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d104      	bne.n	8005d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fe f92c 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8005d48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d4c:	e003      	b.n	8005d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d4e:	f7fe f913 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8005d52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d60:	f040 810c 	bne.w	8005f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d76:	4622      	mov	r2, r4
 8005d78:	462b      	mov	r3, r5
 8005d7a:	1891      	adds	r1, r2, r2
 8005d7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d7e:	415b      	adcs	r3, r3
 8005d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d86:	4621      	mov	r1, r4
 8005d88:	eb12 0801 	adds.w	r8, r2, r1
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	eb43 0901 	adc.w	r9, r3, r1
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005da6:	4690      	mov	r8, r2
 8005da8:	4699      	mov	r9, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	eb18 0303 	adds.w	r3, r8, r3
 8005db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db4:	462b      	mov	r3, r5
 8005db6:	eb49 0303 	adc.w	r3, r9, r3
 8005dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	18db      	adds	r3, r3, r3
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd8:	4613      	mov	r3, r2
 8005dda:	eb42 0303 	adc.w	r3, r2, r3
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
 8005de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005de8:	f7fa ff5e 	bl	8000ca8 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4b61      	ldr	r3, [pc, #388]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005df2:	fba3 2302 	umull	r2, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	011c      	lsls	r4, r3, #4
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e14:	415b      	adcs	r3, r3
 8005e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e22:	4649      	mov	r1, r9
 8005e24:	eb43 0b01 	adc.w	fp, r3, r1
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e3c:	4692      	mov	sl, r2
 8005e3e:	469b      	mov	fp, r3
 8005e40:	4643      	mov	r3, r8
 8005e42:	eb1a 0303 	adds.w	r3, sl, r3
 8005e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	18db      	adds	r3, r3, r3
 8005e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e6e:	4613      	mov	r3, r2
 8005e70:	eb42 0303 	adc.w	r3, r2, r3
 8005e74:	647b      	str	r3, [r7, #68]	; 0x44
 8005e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e7e:	f7fa ff13 	bl	8000ca8 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	2264      	movs	r2, #100	; 0x64
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	1acb      	subs	r3, r1, r3
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eac:	441c      	add	r4, r3
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f04:	464b      	mov	r3, r9
 8005f06:	460a      	mov	r2, r1
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f24:	460b      	mov	r3, r1
 8005f26:	18db      	adds	r3, r3, r3
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f3a:	f7fa feb5 	bl	8000ca8 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005f44:	fba3 1302 	umull	r1, r3, r3, r2
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	2164      	movs	r1, #100	; 0x64
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	3332      	adds	r3, #50	; 0x32
 8005f56:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <UART_SetConfig+0x2d4>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 0207 	and.w	r2, r3, #7
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4422      	add	r2, r4
 8005f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f6c:	e106      	b.n	800617c <UART_SetConfig+0x4d8>
 8005f6e:	bf00      	nop
 8005f70:	40011000 	.word	0x40011000
 8005f74:	40011400 	.word	0x40011400
 8005f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f8e:	4642      	mov	r2, r8
 8005f90:	464b      	mov	r3, r9
 8005f92:	1891      	adds	r1, r2, r2
 8005f94:	6239      	str	r1, [r7, #32]
 8005f96:	415b      	adcs	r3, r3
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	1854      	adds	r4, r2, r1
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	eb43 0501 	adc.w	r5, r3, r1
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	00eb      	lsls	r3, r5, #3
 8005fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb6:	00e2      	lsls	r2, r4, #3
 8005fb8:	4614      	mov	r4, r2
 8005fba:	461d      	mov	r5, r3
 8005fbc:	4643      	mov	r3, r8
 8005fbe:	18e3      	adds	r3, r4, r3
 8005fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	eb45 0303 	adc.w	r3, r5, r3
 8005fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fea:	4629      	mov	r1, r5
 8005fec:	008b      	lsls	r3, r1, #2
 8005fee:	4621      	mov	r1, r4
 8005ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	008a      	lsls	r2, r1, #2
 8005ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ffc:	f7fa fe54 	bl	8000ca8 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4b60      	ldr	r3, [pc, #384]	; (8006188 <UART_SetConfig+0x4e4>)
 8006006:	fba3 2302 	umull	r2, r3, r3, r2
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	011c      	lsls	r4, r3, #4
 800600e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006012:	2200      	movs	r2, #0
 8006014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800601c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	1891      	adds	r1, r2, r2
 8006026:	61b9      	str	r1, [r7, #24]
 8006028:	415b      	adcs	r3, r3
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006030:	4641      	mov	r1, r8
 8006032:	1851      	adds	r1, r2, r1
 8006034:	6139      	str	r1, [r7, #16]
 8006036:	4649      	mov	r1, r9
 8006038:	414b      	adcs	r3, r1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006048:	4659      	mov	r1, fp
 800604a:	00cb      	lsls	r3, r1, #3
 800604c:	4651      	mov	r1, sl
 800604e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006052:	4651      	mov	r1, sl
 8006054:	00ca      	lsls	r2, r1, #3
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	4603      	mov	r3, r0
 800605c:	4642      	mov	r2, r8
 800605e:	189b      	adds	r3, r3, r2
 8006060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006064:	464b      	mov	r3, r9
 8006066:	460a      	mov	r2, r1
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	67bb      	str	r3, [r7, #120]	; 0x78
 800607a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006088:	4649      	mov	r1, r9
 800608a:	008b      	lsls	r3, r1, #2
 800608c:	4641      	mov	r1, r8
 800608e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006092:	4641      	mov	r1, r8
 8006094:	008a      	lsls	r2, r1, #2
 8006096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800609a:	f7fa fe05 	bl	8000ca8 <__aeabi_uldivmod>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	4b38      	ldr	r3, [pc, #224]	; (8006188 <UART_SetConfig+0x4e4>)
 80060a6:	fba3 2301 	umull	r2, r3, r3, r1
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	2264      	movs	r2, #100	; 0x64
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	1acb      	subs	r3, r1, r3
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	3332      	adds	r3, #50	; 0x32
 80060b8:	4a33      	ldr	r2, [pc, #204]	; (8006188 <UART_SetConfig+0x4e4>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c4:	441c      	add	r4, r3
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ca:	2200      	movs	r2, #0
 80060cc:	673b      	str	r3, [r7, #112]	; 0x70
 80060ce:	677a      	str	r2, [r7, #116]	; 0x74
 80060d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	1891      	adds	r1, r2, r2
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	415b      	adcs	r3, r3
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060e4:	4641      	mov	r1, r8
 80060e6:	1851      	adds	r1, r2, r1
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	4649      	mov	r1, r9
 80060ec:	414b      	adcs	r3, r1
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060fc:	4659      	mov	r1, fp
 80060fe:	00cb      	lsls	r3, r1, #3
 8006100:	4651      	mov	r1, sl
 8006102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006106:	4651      	mov	r1, sl
 8006108:	00ca      	lsls	r2, r1, #3
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	4603      	mov	r3, r0
 8006110:	4642      	mov	r2, r8
 8006112:	189b      	adds	r3, r3, r2
 8006114:	66bb      	str	r3, [r7, #104]	; 0x68
 8006116:	464b      	mov	r3, r9
 8006118:	460a      	mov	r2, r1
 800611a:	eb42 0303 	adc.w	r3, r2, r3
 800611e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	663b      	str	r3, [r7, #96]	; 0x60
 800612a:	667a      	str	r2, [r7, #100]	; 0x64
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006138:	4649      	mov	r1, r9
 800613a:	008b      	lsls	r3, r1, #2
 800613c:	4641      	mov	r1, r8
 800613e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006142:	4641      	mov	r1, r8
 8006144:	008a      	lsls	r2, r1, #2
 8006146:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800614a:	f7fa fdad 	bl	8000ca8 <__aeabi_uldivmod>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <UART_SetConfig+0x4e4>)
 8006154:	fba3 1302 	umull	r1, r3, r3, r2
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	2164      	movs	r1, #100	; 0x64
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	3332      	adds	r3, #50	; 0x32
 8006166:	4a08      	ldr	r2, [pc, #32]	; (8006188 <UART_SetConfig+0x4e4>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f003 020f 	and.w	r2, r3, #15
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4422      	add	r2, r4
 800617a:	609a      	str	r2, [r3, #8]
}
 800617c:	bf00      	nop
 800617e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006182:	46bd      	mov	sp, r7
 8006184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006188:	51eb851f 	.word	0x51eb851f

0800618c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800618c:	b084      	sub	sp, #16
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	f107 001c 	add.w	r0, r7, #28
 800619a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d122      	bne.n	80061ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d105      	bne.n	80061de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 faa2 	bl	8006728 <USB_CoreReset>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e01a      	b.n	8006220 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa96 	bl	8006728 <USB_CoreReset>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	639a      	str	r2, [r3, #56]	; 0x38
 8006212:	e005      	b.n	8006220 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10b      	bne.n	800623e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f043 0206 	orr.w	r2, r3, #6
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f043 0220 	orr.w	r2, r3, #32
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800624a:	b004      	add	sp, #16
 800624c:	4770      	bx	lr

0800624e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 0201 	bic.w	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d115      	bne.n	80062be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800629e:	2001      	movs	r0, #1
 80062a0:	f7fc fa28 	bl	80026f4 <HAL_Delay>
      ms++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fa2e 	bl	800670c <USB_GetMode>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d01e      	beq.n	80062f4 <USB_SetCurrentMode+0x84>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b31      	cmp	r3, #49	; 0x31
 80062ba:	d9f0      	bls.n	800629e <USB_SetCurrentMode+0x2e>
 80062bc:	e01a      	b.n	80062f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d115      	bne.n	80062f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062d0:	2001      	movs	r0, #1
 80062d2:	f7fc fa0f 	bl	80026f4 <HAL_Delay>
      ms++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa15 	bl	800670c <USB_GetMode>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <USB_SetCurrentMode+0x84>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b31      	cmp	r3, #49	; 0x31
 80062ec:	d9f0      	bls.n	80062d0 <USB_SetCurrentMode+0x60>
 80062ee:	e001      	b.n	80062f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e005      	b.n	8006300 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b32      	cmp	r3, #50	; 0x32
 80062f8:	d101      	bne.n	80062fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006308:	b084      	sub	sp, #16
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	e009      	b.n	800633c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3340      	adds	r3, #64	; 0x40
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	3301      	adds	r3, #1
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b0e      	cmp	r3, #14
 8006340:	d9f2      	bls.n	8006328 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d11c      	bne.n	8006382 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006356:	f043 0302 	orr.w	r3, r3, #2
 800635a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
 8006380:	e00b      	b.n	800639a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ac:	4619      	mov	r1, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	461a      	mov	r2, r3
 80063b6:	680b      	ldr	r3, [r1, #0]
 80063b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10c      	bne.n	80063da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063c6:	2100      	movs	r1, #0
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f965 	bl	8006698 <USB_SetDevSpeed>
 80063ce:	e008      	b.n	80063e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063d0:	2101      	movs	r1, #1
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f960 	bl	8006698 <USB_SetDevSpeed>
 80063d8:	e003      	b.n	80063e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063da:	2103      	movs	r1, #3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f95b 	bl	8006698 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063e2:	2110      	movs	r1, #16
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8f3 	bl	80065d0 <USB_FlushTxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f91f 	bl	8006638 <USB_FlushRxFifo>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	e043      	b.n	80064b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006444:	d118      	bne.n	8006478 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	461a      	mov	r2, r3
 800645a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e013      	b.n	800648a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	461a      	mov	r2, r3
 8006470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e008      	b.n	800648a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	3301      	adds	r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d3b7      	bcc.n	800642e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e043      	b.n	800654c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064da:	d118      	bne.n	800650e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e013      	b.n	8006520 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e008      	b.n	8006520 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d3b7      	bcc.n	80064c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006566:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f043 0210 	orr.w	r2, r3, #16
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <USB_DevInit+0x2c4>)
 800658e:	4313      	orrs	r3, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f043 0208 	orr.w	r2, r3, #8
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d107      	bne.n	80065bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065c8:	b004      	add	sp, #16
 80065ca:	4770      	bx	lr
 80065cc:	803c3800 	.word	0x803c3800

080065d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3301      	adds	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a13      	ldr	r2, [pc, #76]	; (8006634 <USB_FlushTxFifo+0x64>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e01b      	b.n	8006628 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	daf2      	bge.n	80065de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	019b      	lsls	r3, r3, #6
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <USB_FlushTxFifo+0x64>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e006      	b.n	8006628 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b20      	cmp	r3, #32
 8006624:	d0f0      	beq.n	8006608 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	00030d40 	.word	0x00030d40

08006638 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3301      	adds	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a11      	ldr	r2, [pc, #68]	; (8006694 <USB_FlushRxFifo+0x5c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e018      	b.n	8006688 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	daf2      	bge.n	8006644 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2210      	movs	r2, #16
 8006666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3301      	adds	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <USB_FlushRxFifo+0x5c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e006      	b.n	8006688 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	2b10      	cmp	r3, #16
 8006684:	d0f0      	beq.n	8006668 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	00030d40 	.word	0x00030d40

08006698 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <USB_CoreReset+0x64>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e01b      	b.n	800677e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	daf2      	bge.n	8006734 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <USB_CoreReset+0x64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e006      	b.n	800677e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d0f0      	beq.n	800675e <USB_CoreReset+0x36>

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	00030d40 	.word	0x00030d40

08006790 <__cvt>:
 8006790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	ec55 4b10 	vmov	r4, r5, d0
 8006798:	2d00      	cmp	r5, #0
 800679a:	460e      	mov	r6, r1
 800679c:	4619      	mov	r1, r3
 800679e:	462b      	mov	r3, r5
 80067a0:	bfbb      	ittet	lt
 80067a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067a6:	461d      	movlt	r5, r3
 80067a8:	2300      	movge	r3, #0
 80067aa:	232d      	movlt	r3, #45	; 0x2d
 80067ac:	700b      	strb	r3, [r1, #0]
 80067ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067b4:	4691      	mov	r9, r2
 80067b6:	f023 0820 	bic.w	r8, r3, #32
 80067ba:	bfbc      	itt	lt
 80067bc:	4622      	movlt	r2, r4
 80067be:	4614      	movlt	r4, r2
 80067c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c4:	d005      	beq.n	80067d2 <__cvt+0x42>
 80067c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067ca:	d100      	bne.n	80067ce <__cvt+0x3e>
 80067cc:	3601      	adds	r6, #1
 80067ce:	2102      	movs	r1, #2
 80067d0:	e000      	b.n	80067d4 <__cvt+0x44>
 80067d2:	2103      	movs	r1, #3
 80067d4:	ab03      	add	r3, sp, #12
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	ab02      	add	r3, sp, #8
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	ec45 4b10 	vmov	d0, r4, r5
 80067e0:	4653      	mov	r3, sl
 80067e2:	4632      	mov	r2, r6
 80067e4:	f001 f938 	bl	8007a58 <_dtoa_r>
 80067e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067ec:	4607      	mov	r7, r0
 80067ee:	d102      	bne.n	80067f6 <__cvt+0x66>
 80067f0:	f019 0f01 	tst.w	r9, #1
 80067f4:	d022      	beq.n	800683c <__cvt+0xac>
 80067f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067fa:	eb07 0906 	add.w	r9, r7, r6
 80067fe:	d110      	bne.n	8006822 <__cvt+0x92>
 8006800:	783b      	ldrb	r3, [r7, #0]
 8006802:	2b30      	cmp	r3, #48	; 0x30
 8006804:	d10a      	bne.n	800681c <__cvt+0x8c>
 8006806:	2200      	movs	r2, #0
 8006808:	2300      	movs	r3, #0
 800680a:	4620      	mov	r0, r4
 800680c:	4629      	mov	r1, r5
 800680e:	f7fa f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006812:	b918      	cbnz	r0, 800681c <__cvt+0x8c>
 8006814:	f1c6 0601 	rsb	r6, r6, #1
 8006818:	f8ca 6000 	str.w	r6, [sl]
 800681c:	f8da 3000 	ldr.w	r3, [sl]
 8006820:	4499      	add	r9, r3
 8006822:	2200      	movs	r2, #0
 8006824:	2300      	movs	r3, #0
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f7fa f95d 	bl	8000ae8 <__aeabi_dcmpeq>
 800682e:	b108      	cbz	r0, 8006834 <__cvt+0xa4>
 8006830:	f8cd 900c 	str.w	r9, [sp, #12]
 8006834:	2230      	movs	r2, #48	; 0x30
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	454b      	cmp	r3, r9
 800683a:	d307      	bcc.n	800684c <__cvt+0xbc>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006840:	1bdb      	subs	r3, r3, r7
 8006842:	4638      	mov	r0, r7
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	b004      	add	sp, #16
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	9103      	str	r1, [sp, #12]
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e7f0      	b.n	8006836 <__cvt+0xa6>

08006854 <__exponent>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	4603      	mov	r3, r0
 8006858:	2900      	cmp	r1, #0
 800685a:	bfb8      	it	lt
 800685c:	4249      	neglt	r1, r1
 800685e:	f803 2b02 	strb.w	r2, [r3], #2
 8006862:	bfb4      	ite	lt
 8006864:	222d      	movlt	r2, #45	; 0x2d
 8006866:	222b      	movge	r2, #43	; 0x2b
 8006868:	2909      	cmp	r1, #9
 800686a:	7042      	strb	r2, [r0, #1]
 800686c:	dd2a      	ble.n	80068c4 <__exponent+0x70>
 800686e:	f10d 0207 	add.w	r2, sp, #7
 8006872:	4617      	mov	r7, r2
 8006874:	260a      	movs	r6, #10
 8006876:	4694      	mov	ip, r2
 8006878:	fb91 f5f6 	sdiv	r5, r1, r6
 800687c:	fb06 1415 	mls	r4, r6, r5, r1
 8006880:	3430      	adds	r4, #48	; 0x30
 8006882:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006886:	460c      	mov	r4, r1
 8006888:	2c63      	cmp	r4, #99	; 0x63
 800688a:	f102 32ff 	add.w	r2, r2, #4294967295
 800688e:	4629      	mov	r1, r5
 8006890:	dcf1      	bgt.n	8006876 <__exponent+0x22>
 8006892:	3130      	adds	r1, #48	; 0x30
 8006894:	f1ac 0402 	sub.w	r4, ip, #2
 8006898:	f802 1c01 	strb.w	r1, [r2, #-1]
 800689c:	1c41      	adds	r1, r0, #1
 800689e:	4622      	mov	r2, r4
 80068a0:	42ba      	cmp	r2, r7
 80068a2:	d30a      	bcc.n	80068ba <__exponent+0x66>
 80068a4:	f10d 0209 	add.w	r2, sp, #9
 80068a8:	eba2 020c 	sub.w	r2, r2, ip
 80068ac:	42bc      	cmp	r4, r7
 80068ae:	bf88      	it	hi
 80068b0:	2200      	movhi	r2, #0
 80068b2:	4413      	add	r3, r2
 80068b4:	1a18      	subs	r0, r3, r0
 80068b6:	b003      	add	sp, #12
 80068b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80068be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80068c2:	e7ed      	b.n	80068a0 <__exponent+0x4c>
 80068c4:	2330      	movs	r3, #48	; 0x30
 80068c6:	3130      	adds	r1, #48	; 0x30
 80068c8:	7083      	strb	r3, [r0, #2]
 80068ca:	70c1      	strb	r1, [r0, #3]
 80068cc:	1d03      	adds	r3, r0, #4
 80068ce:	e7f1      	b.n	80068b4 <__exponent+0x60>

080068d0 <_printf_float>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	ed2d 8b02 	vpush	{d8}
 80068d8:	b08d      	sub	sp, #52	; 0x34
 80068da:	460c      	mov	r4, r1
 80068dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068e0:	4616      	mov	r6, r2
 80068e2:	461f      	mov	r7, r3
 80068e4:	4605      	mov	r5, r0
 80068e6:	f000 ffa5 	bl	8007834 <_localeconv_r>
 80068ea:	f8d0 a000 	ldr.w	sl, [r0]
 80068ee:	4650      	mov	r0, sl
 80068f0:	f7f9 fcce 	bl	8000290 <strlen>
 80068f4:	2300      	movs	r3, #0
 80068f6:	930a      	str	r3, [sp, #40]	; 0x28
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006900:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006904:	3307      	adds	r3, #7
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	f8c8 2000 	str.w	r2, [r8]
 8006912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800691a:	9307      	str	r3, [sp, #28]
 800691c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692c:	4b9e      	ldr	r3, [pc, #632]	; (8006ba8 <_printf_float+0x2d8>)
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	f7fa f90b 	bl	8000b4c <__aeabi_dcmpun>
 8006936:	bb88      	cbnz	r0, 800699c <_printf_float+0xcc>
 8006938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693c:	4b9a      	ldr	r3, [pc, #616]	; (8006ba8 <_printf_float+0x2d8>)
 800693e:	f04f 32ff 	mov.w	r2, #4294967295
 8006942:	f7fa f8e5 	bl	8000b10 <__aeabi_dcmple>
 8006946:	bb48      	cbnz	r0, 800699c <_printf_float+0xcc>
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7fa f8d4 	bl	8000afc <__aeabi_dcmplt>
 8006954:	b110      	cbz	r0, 800695c <_printf_float+0x8c>
 8006956:	232d      	movs	r3, #45	; 0x2d
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800695c:	4a93      	ldr	r2, [pc, #588]	; (8006bac <_printf_float+0x2dc>)
 800695e:	4b94      	ldr	r3, [pc, #592]	; (8006bb0 <_printf_float+0x2e0>)
 8006960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006964:	bf94      	ite	ls
 8006966:	4690      	movls	r8, r2
 8006968:	4698      	movhi	r8, r3
 800696a:	2303      	movs	r3, #3
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	9b05      	ldr	r3, [sp, #20]
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	9700      	str	r7, [sp, #0]
 800697c:	4633      	mov	r3, r6
 800697e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f9da 	bl	8006d3c <_printf_common>
 8006988:	3001      	adds	r0, #1
 800698a:	f040 8090 	bne.w	8006aae <_printf_float+0x1de>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	b00d      	add	sp, #52	; 0x34
 8006994:	ecbd 8b02 	vpop	{d8}
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	4640      	mov	r0, r8
 80069a2:	4649      	mov	r1, r9
 80069a4:	f7fa f8d2 	bl	8000b4c <__aeabi_dcmpun>
 80069a8:	b140      	cbz	r0, 80069bc <_printf_float+0xec>
 80069aa:	464b      	mov	r3, r9
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bfbc      	itt	lt
 80069b0:	232d      	movlt	r3, #45	; 0x2d
 80069b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069b6:	4a7f      	ldr	r2, [pc, #508]	; (8006bb4 <_printf_float+0x2e4>)
 80069b8:	4b7f      	ldr	r3, [pc, #508]	; (8006bb8 <_printf_float+0x2e8>)
 80069ba:	e7d1      	b.n	8006960 <_printf_float+0x90>
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069c2:	9206      	str	r2, [sp, #24]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	d13f      	bne.n	8006a48 <_printf_float+0x178>
 80069c8:	2306      	movs	r3, #6
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	6861      	ldr	r1, [r4, #4]
 80069d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069d4:	2300      	movs	r3, #0
 80069d6:	9303      	str	r3, [sp, #12]
 80069d8:	ab0a      	add	r3, sp, #40	; 0x28
 80069da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069de:	ab09      	add	r3, sp, #36	; 0x24
 80069e0:	ec49 8b10 	vmov	d0, r8, r9
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	6022      	str	r2, [r4, #0]
 80069e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7ff fecf 	bl	8006790 <__cvt>
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069f6:	2b47      	cmp	r3, #71	; 0x47
 80069f8:	4680      	mov	r8, r0
 80069fa:	d108      	bne.n	8006a0e <_printf_float+0x13e>
 80069fc:	1cc8      	adds	r0, r1, #3
 80069fe:	db02      	blt.n	8006a06 <_printf_float+0x136>
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	4299      	cmp	r1, r3
 8006a04:	dd41      	ble.n	8006a8a <_printf_float+0x1ba>
 8006a06:	f1ab 0302 	sub.w	r3, fp, #2
 8006a0a:	fa5f fb83 	uxtb.w	fp, r3
 8006a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a12:	d820      	bhi.n	8006a56 <_printf_float+0x186>
 8006a14:	3901      	subs	r1, #1
 8006a16:	465a      	mov	r2, fp
 8006a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a1e:	f7ff ff19 	bl	8006854 <__exponent>
 8006a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a24:	1813      	adds	r3, r2, r0
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	4681      	mov	r9, r0
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	dc02      	bgt.n	8006a34 <_printf_float+0x164>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	07d2      	lsls	r2, r2, #31
 8006a32:	d501      	bpl.n	8006a38 <_printf_float+0x168>
 8006a34:	3301      	adds	r3, #1
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d09c      	beq.n	800697a <_printf_float+0xaa>
 8006a40:	232d      	movs	r3, #45	; 0x2d
 8006a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a46:	e798      	b.n	800697a <_printf_float+0xaa>
 8006a48:	9a06      	ldr	r2, [sp, #24]
 8006a4a:	2a47      	cmp	r2, #71	; 0x47
 8006a4c:	d1be      	bne.n	80069cc <_printf_float+0xfc>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1bc      	bne.n	80069cc <_printf_float+0xfc>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7b9      	b.n	80069ca <_printf_float+0xfa>
 8006a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a5a:	d118      	bne.n	8006a8e <_printf_float+0x1be>
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	dd0b      	ble.n	8006a7a <_printf_float+0x1aa>
 8006a62:	6121      	str	r1, [r4, #16]
 8006a64:	b913      	cbnz	r3, 8006a6c <_printf_float+0x19c>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	07d0      	lsls	r0, r2, #31
 8006a6a:	d502      	bpl.n	8006a72 <_printf_float+0x1a2>
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	440b      	add	r3, r1
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a74:	f04f 0900 	mov.w	r9, #0
 8006a78:	e7de      	b.n	8006a38 <_printf_float+0x168>
 8006a7a:	b913      	cbnz	r3, 8006a82 <_printf_float+0x1b2>
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	07d2      	lsls	r2, r2, #31
 8006a80:	d501      	bpl.n	8006a86 <_printf_float+0x1b6>
 8006a82:	3302      	adds	r3, #2
 8006a84:	e7f4      	b.n	8006a70 <_printf_float+0x1a0>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7f2      	b.n	8006a70 <_printf_float+0x1a0>
 8006a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a90:	4299      	cmp	r1, r3
 8006a92:	db05      	blt.n	8006aa0 <_printf_float+0x1d0>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	6121      	str	r1, [r4, #16]
 8006a98:	07d8      	lsls	r0, r3, #31
 8006a9a:	d5ea      	bpl.n	8006a72 <_printf_float+0x1a2>
 8006a9c:	1c4b      	adds	r3, r1, #1
 8006a9e:	e7e7      	b.n	8006a70 <_printf_float+0x1a0>
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	bfd4      	ite	le
 8006aa4:	f1c1 0202 	rsble	r2, r1, #2
 8006aa8:	2201      	movgt	r2, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	e7e0      	b.n	8006a70 <_printf_float+0x1a0>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	055a      	lsls	r2, r3, #21
 8006ab2:	d407      	bmi.n	8006ac4 <_printf_float+0x1f4>
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d12c      	bne.n	8006b1c <_printf_float+0x24c>
 8006ac2:	e764      	b.n	800698e <_printf_float+0xbe>
 8006ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac8:	f240 80e0 	bls.w	8006c8c <_printf_float+0x3bc>
 8006acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f7fa f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d034      	beq.n	8006b46 <_printf_float+0x276>
 8006adc:	4a37      	ldr	r2, [pc, #220]	; (8006bbc <_printf_float+0x2ec>)
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f af51 	beq.w	800698e <_printf_float+0xbe>
 8006aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af0:	429a      	cmp	r2, r3
 8006af2:	db02      	blt.n	8006afa <_printf_float+0x22a>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	07d8      	lsls	r0, r3, #31
 8006af8:	d510      	bpl.n	8006b1c <_printf_float+0x24c>
 8006afa:	ee18 3a10 	vmov	r3, s16
 8006afe:	4652      	mov	r2, sl
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f af41 	beq.w	800698e <_printf_float+0xbe>
 8006b0c:	f04f 0800 	mov.w	r8, #0
 8006b10:	f104 091a 	add.w	r9, r4, #26
 8006b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b16:	3b01      	subs	r3, #1
 8006b18:	4543      	cmp	r3, r8
 8006b1a:	dc09      	bgt.n	8006b30 <_printf_float+0x260>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	079b      	lsls	r3, r3, #30
 8006b20:	f100 8107 	bmi.w	8006d32 <_printf_float+0x462>
 8006b24:	68e0      	ldr	r0, [r4, #12]
 8006b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b28:	4298      	cmp	r0, r3
 8006b2a:	bfb8      	it	lt
 8006b2c:	4618      	movlt	r0, r3
 8006b2e:	e730      	b.n	8006992 <_printf_float+0xc2>
 8006b30:	2301      	movs	r3, #1
 8006b32:	464a      	mov	r2, r9
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af27 	beq.w	800698e <_printf_float+0xbe>
 8006b40:	f108 0801 	add.w	r8, r8, #1
 8006b44:	e7e6      	b.n	8006b14 <_printf_float+0x244>
 8006b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc39      	bgt.n	8006bc0 <_printf_float+0x2f0>
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <_printf_float+0x2ec>)
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f af19 	beq.w	800698e <_printf_float+0xbe>
 8006b5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d102      	bne.n	8006b6a <_printf_float+0x29a>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	d5d8      	bpl.n	8006b1c <_printf_float+0x24c>
 8006b6a:	ee18 3a10 	vmov	r3, s16
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f af09 	beq.w	800698e <_printf_float+0xbe>
 8006b7c:	f04f 0900 	mov.w	r9, #0
 8006b80:	f104 0a1a 	add.w	sl, r4, #26
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	425b      	negs	r3, r3
 8006b88:	454b      	cmp	r3, r9
 8006b8a:	dc01      	bgt.n	8006b90 <_printf_float+0x2c0>
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	e792      	b.n	8006ab6 <_printf_float+0x1e6>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4652      	mov	r2, sl
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f aef7 	beq.w	800698e <_printf_float+0xbe>
 8006ba0:	f109 0901 	add.w	r9, r9, #1
 8006ba4:	e7ee      	b.n	8006b84 <_printf_float+0x2b4>
 8006ba6:	bf00      	nop
 8006ba8:	7fefffff 	.word	0x7fefffff
 8006bac:	0800b688 	.word	0x0800b688
 8006bb0:	0800b68c 	.word	0x0800b68c
 8006bb4:	0800b690 	.word	0x0800b690
 8006bb8:	0800b694 	.word	0x0800b694
 8006bbc:	0800b698 	.word	0x0800b698
 8006bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	bfa8      	it	ge
 8006bc8:	461a      	movge	r2, r3
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	4691      	mov	r9, r2
 8006bce:	dc37      	bgt.n	8006c40 <_printf_float+0x370>
 8006bd0:	f04f 0b00 	mov.w	fp, #0
 8006bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd8:	f104 021a 	add.w	r2, r4, #26
 8006bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	eba3 0309 	sub.w	r3, r3, r9
 8006be4:	455b      	cmp	r3, fp
 8006be6:	dc33      	bgt.n	8006c50 <_printf_float+0x380>
 8006be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bec:	429a      	cmp	r2, r3
 8006bee:	db3b      	blt.n	8006c68 <_printf_float+0x398>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07da      	lsls	r2, r3, #31
 8006bf4:	d438      	bmi.n	8006c68 <_printf_float+0x398>
 8006bf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bfa:	eba2 0903 	sub.w	r9, r2, r3
 8006bfe:	9b05      	ldr	r3, [sp, #20]
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	4591      	cmp	r9, r2
 8006c04:	bfa8      	it	ge
 8006c06:	4691      	movge	r9, r2
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	dc35      	bgt.n	8006c7a <_printf_float+0x3aa>
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c16:	f104 0a1a 	add.w	sl, r4, #26
 8006c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	eba3 0309 	sub.w	r3, r3, r9
 8006c24:	4543      	cmp	r3, r8
 8006c26:	f77f af79 	ble.w	8006b1c <_printf_float+0x24c>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f aeaa 	beq.w	800698e <_printf_float+0xbe>
 8006c3a:	f108 0801 	add.w	r8, r8, #1
 8006c3e:	e7ec      	b.n	8006c1a <_printf_float+0x34a>
 8006c40:	4613      	mov	r3, r2
 8006c42:	4631      	mov	r1, r6
 8006c44:	4642      	mov	r2, r8
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d1c0      	bne.n	8006bd0 <_printf_float+0x300>
 8006c4e:	e69e      	b.n	800698e <_printf_float+0xbe>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	9205      	str	r2, [sp, #20]
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f ae97 	beq.w	800698e <_printf_float+0xbe>
 8006c60:	9a05      	ldr	r2, [sp, #20]
 8006c62:	f10b 0b01 	add.w	fp, fp, #1
 8006c66:	e7b9      	b.n	8006bdc <_printf_float+0x30c>
 8006c68:	ee18 3a10 	vmov	r3, s16
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1be      	bne.n	8006bf6 <_printf_float+0x326>
 8006c78:	e689      	b.n	800698e <_printf_float+0xbe>
 8006c7a:	9a05      	ldr	r2, [sp, #20]
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	4442      	add	r2, r8
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	d1c1      	bne.n	8006c0e <_printf_float+0x33e>
 8006c8a:	e680      	b.n	800698e <_printf_float+0xbe>
 8006c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c8e:	2a01      	cmp	r2, #1
 8006c90:	dc01      	bgt.n	8006c96 <_printf_float+0x3c6>
 8006c92:	07db      	lsls	r3, r3, #31
 8006c94:	d53a      	bpl.n	8006d0c <_printf_float+0x43c>
 8006c96:	2301      	movs	r3, #1
 8006c98:	4642      	mov	r2, r8
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f43f ae74 	beq.w	800698e <_printf_float+0xbe>
 8006ca6:	ee18 3a10 	vmov	r3, s16
 8006caa:	4652      	mov	r2, sl
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f ae6b 	beq.w	800698e <_printf_float+0xbe>
 8006cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006cc4:	f7f9 ff10 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cc8:	b9d8      	cbnz	r0, 8006d02 <_printf_float+0x432>
 8006cca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006cce:	f108 0201 	add.w	r2, r8, #1
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d10e      	bne.n	8006cfa <_printf_float+0x42a>
 8006cdc:	e657      	b.n	800698e <_printf_float+0xbe>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae50 	beq.w	800698e <_printf_float+0xbe>
 8006cee:	f108 0801 	add.w	r8, r8, #1
 8006cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	4543      	cmp	r3, r8
 8006cf8:	dcf1      	bgt.n	8006cde <_printf_float+0x40e>
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d00:	e6da      	b.n	8006ab8 <_printf_float+0x1e8>
 8006d02:	f04f 0800 	mov.w	r8, #0
 8006d06:	f104 0a1a 	add.w	sl, r4, #26
 8006d0a:	e7f2      	b.n	8006cf2 <_printf_float+0x422>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4642      	mov	r2, r8
 8006d10:	e7df      	b.n	8006cd2 <_printf_float+0x402>
 8006d12:	2301      	movs	r3, #1
 8006d14:	464a      	mov	r2, r9
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f ae36 	beq.w	800698e <_printf_float+0xbe>
 8006d22:	f108 0801 	add.w	r8, r8, #1
 8006d26:	68e3      	ldr	r3, [r4, #12]
 8006d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d2a:	1a5b      	subs	r3, r3, r1
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	dcf0      	bgt.n	8006d12 <_printf_float+0x442>
 8006d30:	e6f8      	b.n	8006b24 <_printf_float+0x254>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	f104 0919 	add.w	r9, r4, #25
 8006d3a:	e7f4      	b.n	8006d26 <_printf_float+0x456>

08006d3c <_printf_common>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	4616      	mov	r6, r2
 8006d42:	4699      	mov	r9, r3
 8006d44:	688a      	ldr	r2, [r1, #8]
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfb8      	it	lt
 8006d50:	4613      	movlt	r3, r2
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	b10a      	cbz	r2, 8006d62 <_printf_common+0x26>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	6033      	str	r3, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	0699      	lsls	r1, r3, #26
 8006d66:	bf42      	ittt	mi
 8006d68:	6833      	ldrmi	r3, [r6, #0]
 8006d6a:	3302      	addmi	r3, #2
 8006d6c:	6033      	strmi	r3, [r6, #0]
 8006d6e:	6825      	ldr	r5, [r4, #0]
 8006d70:	f015 0506 	ands.w	r5, r5, #6
 8006d74:	d106      	bne.n	8006d84 <_printf_common+0x48>
 8006d76:	f104 0a19 	add.w	sl, r4, #25
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	6832      	ldr	r2, [r6, #0]
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dc26      	bgt.n	8006dd2 <_printf_common+0x96>
 8006d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d88:	1e13      	subs	r3, r2, #0
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	bf18      	it	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	0692      	lsls	r2, r2, #26
 8006d92:	d42b      	bmi.n	8006dec <_printf_common+0xb0>
 8006d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	47c0      	blx	r8
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d01e      	beq.n	8006de0 <_printf_common+0xa4>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	f003 0306 	and.w	r3, r3, #6
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	bf02      	ittt	eq
 8006dae:	68e5      	ldreq	r5, [r4, #12]
 8006db0:	6833      	ldreq	r3, [r6, #0]
 8006db2:	1aed      	subeq	r5, r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	bf0c      	ite	eq
 8006db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dbc:	2500      	movne	r5, #0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	bfc4      	itt	gt
 8006dc2:	1a9b      	subgt	r3, r3, r2
 8006dc4:	18ed      	addgt	r5, r5, r3
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	341a      	adds	r4, #26
 8006dca:	42b5      	cmp	r5, r6
 8006dcc:	d11a      	bne.n	8006e04 <_printf_common+0xc8>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e008      	b.n	8006de4 <_printf_common+0xa8>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4638      	mov	r0, r7
 8006dda:	47c0      	blx	r8
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0xac>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	3501      	adds	r5, #1
 8006dea:	e7c6      	b.n	8006d7a <_printf_common+0x3e>
 8006dec:	18e1      	adds	r1, r4, r3
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	2030      	movs	r0, #48	; 0x30
 8006df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df6:	4422      	add	r2, r4
 8006df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e00:	3302      	adds	r3, #2
 8006e02:	e7c7      	b.n	8006d94 <_printf_common+0x58>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4622      	mov	r2, r4
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	47c0      	blx	r8
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0e6      	beq.n	8006de0 <_printf_common+0xa4>
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7d9      	b.n	8006dca <_printf_common+0x8e>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	7e0f      	ldrb	r7, [r1, #24]
 8006e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e20:	2f78      	cmp	r7, #120	; 0x78
 8006e22:	4691      	mov	r9, r2
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	469a      	mov	sl, r3
 8006e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2e:	d807      	bhi.n	8006e40 <_printf_i+0x28>
 8006e30:	2f62      	cmp	r7, #98	; 0x62
 8006e32:	d80a      	bhi.n	8006e4a <_printf_i+0x32>
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	f000 80d4 	beq.w	8006fe2 <_printf_i+0x1ca>
 8006e3a:	2f58      	cmp	r7, #88	; 0x58
 8006e3c:	f000 80c0 	beq.w	8006fc0 <_printf_i+0x1a8>
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e48:	e03a      	b.n	8006ec0 <_printf_i+0xa8>
 8006e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4e:	2b15      	cmp	r3, #21
 8006e50:	d8f6      	bhi.n	8006e40 <_printf_i+0x28>
 8006e52:	a101      	add	r1, pc, #4	; (adr r1, 8006e58 <_printf_i+0x40>)
 8006e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006e41 	.word	0x08006e41
 8006e64:	08006e41 	.word	0x08006e41
 8006e68:	08006e41 	.word	0x08006e41
 8006e6c:	08006e41 	.word	0x08006e41
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006e41 	.word	0x08006e41
 8006e78:	08006e41 	.word	0x08006e41
 8006e7c:	08006e41 	.word	0x08006e41
 8006e80:	08006e41 	.word	0x08006e41
 8006e84:	08006fc9 	.word	0x08006fc9
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006f83 	.word	0x08006f83
 8006e90:	08006e41 	.word	0x08006e41
 8006e94:	08006e41 	.word	0x08006e41
 8006e98:	08006feb 	.word	0x08006feb
 8006e9c:	08006e41 	.word	0x08006e41
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006e41 	.word	0x08006e41
 8006ea8:	08006e41 	.word	0x08006e41
 8006eac:	08006f8b 	.word	0x08006f8b
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	602a      	str	r2, [r5, #0]
 8006eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e09f      	b.n	8007004 <_printf_i+0x1ec>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	0607      	lsls	r7, r0, #24
 8006eca:	f103 0104 	add.w	r1, r3, #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	d501      	bpl.n	8006ed6 <_printf_i+0xbe>
 8006ed2:	681e      	ldr	r6, [r3, #0]
 8006ed4:	e003      	b.n	8006ede <_printf_i+0xc6>
 8006ed6:	0646      	lsls	r6, r0, #25
 8006ed8:	d5fb      	bpl.n	8006ed2 <_printf_i+0xba>
 8006eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	da03      	bge.n	8006eea <_printf_i+0xd2>
 8006ee2:	232d      	movs	r3, #45	; 0x2d
 8006ee4:	4276      	negs	r6, r6
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	485a      	ldr	r0, [pc, #360]	; (8007054 <_printf_i+0x23c>)
 8006eec:	230a      	movs	r3, #10
 8006eee:	e012      	b.n	8006f16 <_printf_i+0xfe>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0605      	lsls	r5, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xe8>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xee>
 8006f00:	0641      	lsls	r1, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe4>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4853      	ldr	r0, [pc, #332]	; (8007054 <_printf_i+0x23c>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x114>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04b      	beq.n	8006fc4 <_printf_i+0x1ac>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x116>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x148>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x148>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee4 	bl	8006d3c <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14a      	bne.n	800700e <_printf_i+0x1f6>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	4833      	ldr	r0, [pc, #204]	; (8007058 <_printf_i+0x240>)
 8006f8c:	2778      	movs	r7, #120	; 0x78
 8006f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6829      	ldr	r1, [r5, #0]
 8006f96:	061f      	lsls	r7, r3, #24
 8006f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f9c:	d402      	bmi.n	8006fa4 <_printf_i+0x18c>
 8006f9e:	065f      	lsls	r7, r3, #25
 8006fa0:	bf48      	it	mi
 8006fa2:	b2b6      	uxthmi	r6, r6
 8006fa4:	07df      	lsls	r7, r3, #31
 8006fa6:	bf48      	it	mi
 8006fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fac:	6029      	str	r1, [r5, #0]
 8006fae:	bf48      	it	mi
 8006fb0:	6023      	strmi	r3, [r4, #0]
 8006fb2:	b91e      	cbnz	r6, 8006fbc <_printf_i+0x1a4>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	f023 0320 	bic.w	r3, r3, #32
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	e7a7      	b.n	8006f10 <_printf_i+0xf8>
 8006fc0:	4824      	ldr	r0, [pc, #144]	; (8007054 <_printf_i+0x23c>)
 8006fc2:	e7e4      	b.n	8006f8e <_printf_i+0x176>
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	e7bd      	b.n	8006f44 <_printf_i+0x12c>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6826      	ldr	r6, [r4, #0]
 8006fcc:	6961      	ldr	r1, [r4, #20]
 8006fce:	1d18      	adds	r0, r3, #4
 8006fd0:	6028      	str	r0, [r5, #0]
 8006fd2:	0635      	lsls	r5, r6, #24
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0x1c4>
 8006fd8:	6019      	str	r1, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0x1ca>
 8006fdc:	0670      	lsls	r0, r6, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0x1c0>
 8006fe0:	8019      	strh	r1, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	4615      	mov	r5, r2
 8006fe8:	e7bc      	b.n	8006f64 <_printf_i+0x14c>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7f9 f8fa 	bl	80001f0 <memchr>
 8006ffc:	b108      	cbz	r0, 8007002 <_printf_i+0x1ea>
 8006ffe:	1b40      	subs	r0, r0, r5
 8007000:	6060      	str	r0, [r4, #4]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	2300      	movs	r3, #0
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e7aa      	b.n	8006f64 <_printf_i+0x14c>
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	462a      	mov	r2, r5
 8007012:	4649      	mov	r1, r9
 8007014:	4640      	mov	r0, r8
 8007016:	47d0      	blx	sl
 8007018:	3001      	adds	r0, #1
 800701a:	d0ad      	beq.n	8006f78 <_printf_i+0x160>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	d413      	bmi.n	800704a <_printf_i+0x232>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	4298      	cmp	r0, r3
 8007028:	bfb8      	it	lt
 800702a:	4618      	movlt	r0, r3
 800702c:	e7a6      	b.n	8006f7c <_printf_i+0x164>
 800702e:	2301      	movs	r3, #1
 8007030:	4632      	mov	r2, r6
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d09d      	beq.n	8006f78 <_printf_i+0x160>
 800703c:	3501      	adds	r5, #1
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	9903      	ldr	r1, [sp, #12]
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	42ab      	cmp	r3, r5
 8007046:	dcf2      	bgt.n	800702e <_printf_i+0x216>
 8007048:	e7eb      	b.n	8007022 <_printf_i+0x20a>
 800704a:	2500      	movs	r5, #0
 800704c:	f104 0619 	add.w	r6, r4, #25
 8007050:	e7f5      	b.n	800703e <_printf_i+0x226>
 8007052:	bf00      	nop
 8007054:	0800b69a 	.word	0x0800b69a
 8007058:	0800b6ab 	.word	0x0800b6ab

0800705c <_scanf_float>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	b087      	sub	sp, #28
 8007062:	4617      	mov	r7, r2
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	688b      	ldr	r3, [r1, #8]
 8007068:	1e5a      	subs	r2, r3, #1
 800706a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800706e:	bf83      	ittte	hi
 8007070:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007074:	195b      	addhi	r3, r3, r5
 8007076:	9302      	strhi	r3, [sp, #8]
 8007078:	2300      	movls	r3, #0
 800707a:	bf86      	itte	hi
 800707c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007080:	608b      	strhi	r3, [r1, #8]
 8007082:	9302      	strls	r3, [sp, #8]
 8007084:	680b      	ldr	r3, [r1, #0]
 8007086:	468b      	mov	fp, r1
 8007088:	2500      	movs	r5, #0
 800708a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800708e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007096:	4680      	mov	r8, r0
 8007098:	460c      	mov	r4, r1
 800709a:	465e      	mov	r6, fp
 800709c:	46aa      	mov	sl, r5
 800709e:	46a9      	mov	r9, r5
 80070a0:	9501      	str	r5, [sp, #4]
 80070a2:	68a2      	ldr	r2, [r4, #8]
 80070a4:	b152      	cbz	r2, 80070bc <_scanf_float+0x60>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b4e      	cmp	r3, #78	; 0x4e
 80070ac:	d864      	bhi.n	8007178 <_scanf_float+0x11c>
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d83c      	bhi.n	800712c <_scanf_float+0xd0>
 80070b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80070b6:	b2c8      	uxtb	r0, r1
 80070b8:	280e      	cmp	r0, #14
 80070ba:	d93a      	bls.n	8007132 <_scanf_float+0xd6>
 80070bc:	f1b9 0f00 	cmp.w	r9, #0
 80070c0:	d003      	beq.n	80070ca <_scanf_float+0x6e>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ce:	f1ba 0f01 	cmp.w	sl, #1
 80070d2:	f200 8113 	bhi.w	80072fc <_scanf_float+0x2a0>
 80070d6:	455e      	cmp	r6, fp
 80070d8:	f200 8105 	bhi.w	80072e6 <_scanf_float+0x28a>
 80070dc:	2501      	movs	r5, #1
 80070de:	4628      	mov	r0, r5
 80070e0:	b007      	add	sp, #28
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80070ea:	2a0d      	cmp	r2, #13
 80070ec:	d8e6      	bhi.n	80070bc <_scanf_float+0x60>
 80070ee:	a101      	add	r1, pc, #4	; (adr r1, 80070f4 <_scanf_float+0x98>)
 80070f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070f4:	08007233 	.word	0x08007233
 80070f8:	080070bd 	.word	0x080070bd
 80070fc:	080070bd 	.word	0x080070bd
 8007100:	080070bd 	.word	0x080070bd
 8007104:	08007293 	.word	0x08007293
 8007108:	0800726b 	.word	0x0800726b
 800710c:	080070bd 	.word	0x080070bd
 8007110:	080070bd 	.word	0x080070bd
 8007114:	08007241 	.word	0x08007241
 8007118:	080070bd 	.word	0x080070bd
 800711c:	080070bd 	.word	0x080070bd
 8007120:	080070bd 	.word	0x080070bd
 8007124:	080070bd 	.word	0x080070bd
 8007128:	080071f9 	.word	0x080071f9
 800712c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007130:	e7db      	b.n	80070ea <_scanf_float+0x8e>
 8007132:	290e      	cmp	r1, #14
 8007134:	d8c2      	bhi.n	80070bc <_scanf_float+0x60>
 8007136:	a001      	add	r0, pc, #4	; (adr r0, 800713c <_scanf_float+0xe0>)
 8007138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800713c:	080071eb 	.word	0x080071eb
 8007140:	080070bd 	.word	0x080070bd
 8007144:	080071eb 	.word	0x080071eb
 8007148:	0800727f 	.word	0x0800727f
 800714c:	080070bd 	.word	0x080070bd
 8007150:	08007199 	.word	0x08007199
 8007154:	080071d5 	.word	0x080071d5
 8007158:	080071d5 	.word	0x080071d5
 800715c:	080071d5 	.word	0x080071d5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071d5 	.word	0x080071d5
 8007168:	080071d5 	.word	0x080071d5
 800716c:	080071d5 	.word	0x080071d5
 8007170:	080071d5 	.word	0x080071d5
 8007174:	080071d5 	.word	0x080071d5
 8007178:	2b6e      	cmp	r3, #110	; 0x6e
 800717a:	d809      	bhi.n	8007190 <_scanf_float+0x134>
 800717c:	2b60      	cmp	r3, #96	; 0x60
 800717e:	d8b2      	bhi.n	80070e6 <_scanf_float+0x8a>
 8007180:	2b54      	cmp	r3, #84	; 0x54
 8007182:	d077      	beq.n	8007274 <_scanf_float+0x218>
 8007184:	2b59      	cmp	r3, #89	; 0x59
 8007186:	d199      	bne.n	80070bc <_scanf_float+0x60>
 8007188:	2d07      	cmp	r5, #7
 800718a:	d197      	bne.n	80070bc <_scanf_float+0x60>
 800718c:	2508      	movs	r5, #8
 800718e:	e029      	b.n	80071e4 <_scanf_float+0x188>
 8007190:	2b74      	cmp	r3, #116	; 0x74
 8007192:	d06f      	beq.n	8007274 <_scanf_float+0x218>
 8007194:	2b79      	cmp	r3, #121	; 0x79
 8007196:	e7f6      	b.n	8007186 <_scanf_float+0x12a>
 8007198:	6821      	ldr	r1, [r4, #0]
 800719a:	05c8      	lsls	r0, r1, #23
 800719c:	d51a      	bpl.n	80071d4 <_scanf_float+0x178>
 800719e:	9b02      	ldr	r3, [sp, #8]
 80071a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071a4:	6021      	str	r1, [r4, #0]
 80071a6:	f109 0901 	add.w	r9, r9, #1
 80071aa:	b11b      	cbz	r3, 80071b4 <_scanf_float+0x158>
 80071ac:	3b01      	subs	r3, #1
 80071ae:	3201      	adds	r2, #1
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	60a2      	str	r2, [r4, #8]
 80071b4:	68a3      	ldr	r3, [r4, #8]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	f340 8084 	ble.w	80072d4 <_scanf_float+0x278>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	e766      	b.n	80070a2 <_scanf_float+0x46>
 80071d4:	eb1a 0f05 	cmn.w	sl, r5
 80071d8:	f47f af70 	bne.w	80070bc <_scanf_float+0x60>
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80071e2:	6022      	str	r2, [r4, #0]
 80071e4:	f806 3b01 	strb.w	r3, [r6], #1
 80071e8:	e7e4      	b.n	80071b4 <_scanf_float+0x158>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	0610      	lsls	r0, r2, #24
 80071ee:	f57f af65 	bpl.w	80070bc <_scanf_float+0x60>
 80071f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f6:	e7f4      	b.n	80071e2 <_scanf_float+0x186>
 80071f8:	f1ba 0f00 	cmp.w	sl, #0
 80071fc:	d10e      	bne.n	800721c <_scanf_float+0x1c0>
 80071fe:	f1b9 0f00 	cmp.w	r9, #0
 8007202:	d10e      	bne.n	8007222 <_scanf_float+0x1c6>
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800720a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800720e:	d108      	bne.n	8007222 <_scanf_float+0x1c6>
 8007210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	f04f 0a01 	mov.w	sl, #1
 800721a:	e7e3      	b.n	80071e4 <_scanf_float+0x188>
 800721c:	f1ba 0f02 	cmp.w	sl, #2
 8007220:	d055      	beq.n	80072ce <_scanf_float+0x272>
 8007222:	2d01      	cmp	r5, #1
 8007224:	d002      	beq.n	800722c <_scanf_float+0x1d0>
 8007226:	2d04      	cmp	r5, #4
 8007228:	f47f af48 	bne.w	80070bc <_scanf_float+0x60>
 800722c:	3501      	adds	r5, #1
 800722e:	b2ed      	uxtb	r5, r5
 8007230:	e7d8      	b.n	80071e4 <_scanf_float+0x188>
 8007232:	f1ba 0f01 	cmp.w	sl, #1
 8007236:	f47f af41 	bne.w	80070bc <_scanf_float+0x60>
 800723a:	f04f 0a02 	mov.w	sl, #2
 800723e:	e7d1      	b.n	80071e4 <_scanf_float+0x188>
 8007240:	b97d      	cbnz	r5, 8007262 <_scanf_float+0x206>
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	f47f af3c 	bne.w	80070c2 <_scanf_float+0x66>
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007250:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007254:	f47f af39 	bne.w	80070ca <_scanf_float+0x6e>
 8007258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800725c:	6022      	str	r2, [r4, #0]
 800725e:	2501      	movs	r5, #1
 8007260:	e7c0      	b.n	80071e4 <_scanf_float+0x188>
 8007262:	2d03      	cmp	r5, #3
 8007264:	d0e2      	beq.n	800722c <_scanf_float+0x1d0>
 8007266:	2d05      	cmp	r5, #5
 8007268:	e7de      	b.n	8007228 <_scanf_float+0x1cc>
 800726a:	2d02      	cmp	r5, #2
 800726c:	f47f af26 	bne.w	80070bc <_scanf_float+0x60>
 8007270:	2503      	movs	r5, #3
 8007272:	e7b7      	b.n	80071e4 <_scanf_float+0x188>
 8007274:	2d06      	cmp	r5, #6
 8007276:	f47f af21 	bne.w	80070bc <_scanf_float+0x60>
 800727a:	2507      	movs	r5, #7
 800727c:	e7b2      	b.n	80071e4 <_scanf_float+0x188>
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	0591      	lsls	r1, r2, #22
 8007282:	f57f af1b 	bpl.w	80070bc <_scanf_float+0x60>
 8007286:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007290:	e7a8      	b.n	80071e4 <_scanf_float+0x188>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800729c:	d006      	beq.n	80072ac <_scanf_float+0x250>
 800729e:	0550      	lsls	r0, r2, #21
 80072a0:	f57f af0c 	bpl.w	80070bc <_scanf_float+0x60>
 80072a4:	f1b9 0f00 	cmp.w	r9, #0
 80072a8:	f43f af0f 	beq.w	80070ca <_scanf_float+0x6e>
 80072ac:	0591      	lsls	r1, r2, #22
 80072ae:	bf58      	it	pl
 80072b0:	9901      	ldrpl	r1, [sp, #4]
 80072b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072b6:	bf58      	it	pl
 80072b8:	eba9 0101 	subpl.w	r1, r9, r1
 80072bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80072c0:	bf58      	it	pl
 80072c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	f04f 0900 	mov.w	r9, #0
 80072cc:	e78a      	b.n	80071e4 <_scanf_float+0x188>
 80072ce:	f04f 0a03 	mov.w	sl, #3
 80072d2:	e787      	b.n	80071e4 <_scanf_float+0x188>
 80072d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072d8:	4639      	mov	r1, r7
 80072da:	4640      	mov	r0, r8
 80072dc:	4798      	blx	r3
 80072de:	2800      	cmp	r0, #0
 80072e0:	f43f aedf 	beq.w	80070a2 <_scanf_float+0x46>
 80072e4:	e6ea      	b.n	80070bc <_scanf_float+0x60>
 80072e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ee:	463a      	mov	r2, r7
 80072f0:	4640      	mov	r0, r8
 80072f2:	4798      	blx	r3
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	e6ec      	b.n	80070d6 <_scanf_float+0x7a>
 80072fc:	1e6b      	subs	r3, r5, #1
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d825      	bhi.n	800734e <_scanf_float+0x2f2>
 8007302:	2d02      	cmp	r5, #2
 8007304:	d836      	bhi.n	8007374 <_scanf_float+0x318>
 8007306:	455e      	cmp	r6, fp
 8007308:	f67f aee8 	bls.w	80070dc <_scanf_float+0x80>
 800730c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007310:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007314:	463a      	mov	r2, r7
 8007316:	4640      	mov	r0, r8
 8007318:	4798      	blx	r3
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	3b01      	subs	r3, #1
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	e7f1      	b.n	8007306 <_scanf_float+0x2aa>
 8007322:	9802      	ldr	r0, [sp, #8]
 8007324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007328:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800732c:	9002      	str	r0, [sp, #8]
 800732e:	463a      	mov	r2, r7
 8007330:	4640      	mov	r0, r8
 8007332:	4798      	blx	r3
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	3b01      	subs	r3, #1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800733e:	fa5f fa8a 	uxtb.w	sl, sl
 8007342:	f1ba 0f02 	cmp.w	sl, #2
 8007346:	d1ec      	bne.n	8007322 <_scanf_float+0x2c6>
 8007348:	3d03      	subs	r5, #3
 800734a:	b2ed      	uxtb	r5, r5
 800734c:	1b76      	subs	r6, r6, r5
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	05da      	lsls	r2, r3, #23
 8007352:	d52f      	bpl.n	80073b4 <_scanf_float+0x358>
 8007354:	055b      	lsls	r3, r3, #21
 8007356:	d510      	bpl.n	800737a <_scanf_float+0x31e>
 8007358:	455e      	cmp	r6, fp
 800735a:	f67f aebf 	bls.w	80070dc <_scanf_float+0x80>
 800735e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007366:	463a      	mov	r2, r7
 8007368:	4640      	mov	r0, r8
 800736a:	4798      	blx	r3
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	3b01      	subs	r3, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	e7f1      	b.n	8007358 <_scanf_float+0x2fc>
 8007374:	46aa      	mov	sl, r5
 8007376:	9602      	str	r6, [sp, #8]
 8007378:	e7df      	b.n	800733a <_scanf_float+0x2de>
 800737a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	2965      	cmp	r1, #101	; 0x65
 8007382:	f103 33ff 	add.w	r3, r3, #4294967295
 8007386:	f106 35ff 	add.w	r5, r6, #4294967295
 800738a:	6123      	str	r3, [r4, #16]
 800738c:	d00c      	beq.n	80073a8 <_scanf_float+0x34c>
 800738e:	2945      	cmp	r1, #69	; 0x45
 8007390:	d00a      	beq.n	80073a8 <_scanf_float+0x34c>
 8007392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007396:	463a      	mov	r2, r7
 8007398:	4640      	mov	r0, r8
 800739a:	4798      	blx	r3
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	1eb5      	subs	r5, r6, #2
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073ac:	463a      	mov	r2, r7
 80073ae:	4640      	mov	r0, r8
 80073b0:	4798      	blx	r3
 80073b2:	462e      	mov	r6, r5
 80073b4:	6825      	ldr	r5, [r4, #0]
 80073b6:	f015 0510 	ands.w	r5, r5, #16
 80073ba:	d158      	bne.n	800746e <_scanf_float+0x412>
 80073bc:	7035      	strb	r5, [r6, #0]
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c8:	d11c      	bne.n	8007404 <_scanf_float+0x3a8>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	454b      	cmp	r3, r9
 80073ce:	eba3 0209 	sub.w	r2, r3, r9
 80073d2:	d124      	bne.n	800741e <_scanf_float+0x3c2>
 80073d4:	2200      	movs	r2, #0
 80073d6:	4659      	mov	r1, fp
 80073d8:	4640      	mov	r0, r8
 80073da:	f002 fce9 	bl	8009db0 <_strtod_r>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	6821      	ldr	r1, [r4, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f011 0f02 	tst.w	r1, #2
 80073e8:	ec57 6b10 	vmov	r6, r7, d0
 80073ec:	f103 0204 	add.w	r2, r3, #4
 80073f0:	d020      	beq.n	8007434 <_scanf_float+0x3d8>
 80073f2:	9903      	ldr	r1, [sp, #12]
 80073f4:	600a      	str	r2, [r1, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	e9c3 6700 	strd	r6, r7, [r3]
 80073fc:	68e3      	ldr	r3, [r4, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60e3      	str	r3, [r4, #12]
 8007402:	e66c      	b.n	80070de <_scanf_float+0x82>
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0e4      	beq.n	80073d4 <_scanf_float+0x378>
 800740a:	9905      	ldr	r1, [sp, #20]
 800740c:	230a      	movs	r3, #10
 800740e:	462a      	mov	r2, r5
 8007410:	3101      	adds	r1, #1
 8007412:	4640      	mov	r0, r8
 8007414:	f002 fd54 	bl	8009ec0 <_strtol_r>
 8007418:	9b04      	ldr	r3, [sp, #16]
 800741a:	9e05      	ldr	r6, [sp, #20]
 800741c:	1ac2      	subs	r2, r0, r3
 800741e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007422:	429e      	cmp	r6, r3
 8007424:	bf28      	it	cs
 8007426:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800742a:	4912      	ldr	r1, [pc, #72]	; (8007474 <_scanf_float+0x418>)
 800742c:	4630      	mov	r0, r6
 800742e:	f000 f995 	bl	800775c <siprintf>
 8007432:	e7cf      	b.n	80073d4 <_scanf_float+0x378>
 8007434:	f011 0f04 	tst.w	r1, #4
 8007438:	9903      	ldr	r1, [sp, #12]
 800743a:	600a      	str	r2, [r1, #0]
 800743c:	d1db      	bne.n	80073f6 <_scanf_float+0x39a>
 800743e:	f8d3 8000 	ldr.w	r8, [r3]
 8007442:	ee10 2a10 	vmov	r2, s0
 8007446:	ee10 0a10 	vmov	r0, s0
 800744a:	463b      	mov	r3, r7
 800744c:	4639      	mov	r1, r7
 800744e:	f7f9 fb7d 	bl	8000b4c <__aeabi_dcmpun>
 8007452:	b128      	cbz	r0, 8007460 <_scanf_float+0x404>
 8007454:	4808      	ldr	r0, [pc, #32]	; (8007478 <_scanf_float+0x41c>)
 8007456:	f000 fa71 	bl	800793c <nanf>
 800745a:	ed88 0a00 	vstr	s0, [r8]
 800745e:	e7cd      	b.n	80073fc <_scanf_float+0x3a0>
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f9 fbd0 	bl	8000c08 <__aeabi_d2f>
 8007468:	f8c8 0000 	str.w	r0, [r8]
 800746c:	e7c6      	b.n	80073fc <_scanf_float+0x3a0>
 800746e:	2500      	movs	r5, #0
 8007470:	e635      	b.n	80070de <_scanf_float+0x82>
 8007472:	bf00      	nop
 8007474:	0800b6bc 	.word	0x0800b6bc
 8007478:	0800ba4d 	.word	0x0800ba4d

0800747c <std>:
 800747c:	2300      	movs	r3, #0
 800747e:	b510      	push	{r4, lr}
 8007480:	4604      	mov	r4, r0
 8007482:	e9c0 3300 	strd	r3, r3, [r0]
 8007486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800748a:	6083      	str	r3, [r0, #8]
 800748c:	8181      	strh	r1, [r0, #12]
 800748e:	6643      	str	r3, [r0, #100]	; 0x64
 8007490:	81c2      	strh	r2, [r0, #14]
 8007492:	6183      	str	r3, [r0, #24]
 8007494:	4619      	mov	r1, r3
 8007496:	2208      	movs	r2, #8
 8007498:	305c      	adds	r0, #92	; 0x5c
 800749a:	f000 f9c2 	bl	8007822 <memset>
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <std+0x38>)
 80074a0:	6263      	str	r3, [r4, #36]	; 0x24
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x3c>)
 80074a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <std+0x40>)
 80074a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x44>)
 80074ac:	6224      	str	r4, [r4, #32]
 80074ae:	6323      	str	r3, [r4, #48]	; 0x30
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	0800779d 	.word	0x0800779d
 80074b8:	080077bf 	.word	0x080077bf
 80074bc:	080077f7 	.word	0x080077f7
 80074c0:	0800781b 	.word	0x0800781b

080074c4 <stdio_exit_handler>:
 80074c4:	4a02      	ldr	r2, [pc, #8]	; (80074d0 <stdio_exit_handler+0xc>)
 80074c6:	4903      	ldr	r1, [pc, #12]	; (80074d4 <stdio_exit_handler+0x10>)
 80074c8:	4803      	ldr	r0, [pc, #12]	; (80074d8 <stdio_exit_handler+0x14>)
 80074ca:	f000 b869 	b.w	80075a0 <_fwalk_sglue>
 80074ce:	bf00      	nop
 80074d0:	2000000c 	.word	0x2000000c
 80074d4:	0800a509 	.word	0x0800a509
 80074d8:	20000018 	.word	0x20000018

080074dc <cleanup_stdio>:
 80074dc:	6841      	ldr	r1, [r0, #4]
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <cleanup_stdio+0x34>)
 80074e0:	4299      	cmp	r1, r3
 80074e2:	b510      	push	{r4, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	d001      	beq.n	80074ec <cleanup_stdio+0x10>
 80074e8:	f003 f80e 	bl	800a508 <_fflush_r>
 80074ec:	68a1      	ldr	r1, [r4, #8]
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <cleanup_stdio+0x38>)
 80074f0:	4299      	cmp	r1, r3
 80074f2:	d002      	beq.n	80074fa <cleanup_stdio+0x1e>
 80074f4:	4620      	mov	r0, r4
 80074f6:	f003 f807 	bl	800a508 <_fflush_r>
 80074fa:	68e1      	ldr	r1, [r4, #12]
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <cleanup_stdio+0x3c>)
 80074fe:	4299      	cmp	r1, r3
 8007500:	d004      	beq.n	800750c <cleanup_stdio+0x30>
 8007502:	4620      	mov	r0, r4
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007508:	f002 bffe 	b.w	800a508 <_fflush_r>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	20001a04 	.word	0x20001a04
 8007514:	20001a6c 	.word	0x20001a6c
 8007518:	20001ad4 	.word	0x20001ad4

0800751c <global_stdio_init.part.0>:
 800751c:	b510      	push	{r4, lr}
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <global_stdio_init.part.0+0x30>)
 8007520:	4c0b      	ldr	r4, [pc, #44]	; (8007550 <global_stdio_init.part.0+0x34>)
 8007522:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <global_stdio_init.part.0+0x38>)
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	4620      	mov	r0, r4
 8007528:	2200      	movs	r2, #0
 800752a:	2104      	movs	r1, #4
 800752c:	f7ff ffa6 	bl	800747c <std>
 8007530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007534:	2201      	movs	r2, #1
 8007536:	2109      	movs	r1, #9
 8007538:	f7ff ffa0 	bl	800747c <std>
 800753c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007540:	2202      	movs	r2, #2
 8007542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007546:	2112      	movs	r1, #18
 8007548:	f7ff bf98 	b.w	800747c <std>
 800754c:	20001b3c 	.word	0x20001b3c
 8007550:	20001a04 	.word	0x20001a04
 8007554:	080074c5 	.word	0x080074c5

08007558 <__sfp_lock_acquire>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__sfp_lock_acquire+0x8>)
 800755a:	f000 b9df 	b.w	800791c <__retarget_lock_acquire_recursive>
 800755e:	bf00      	nop
 8007560:	20001b45 	.word	0x20001b45

08007564 <__sfp_lock_release>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__sfp_lock_release+0x8>)
 8007566:	f000 b9da 	b.w	800791e <__retarget_lock_release_recursive>
 800756a:	bf00      	nop
 800756c:	20001b45 	.word	0x20001b45

08007570 <__sinit>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	f7ff fff0 	bl	8007558 <__sfp_lock_acquire>
 8007578:	6a23      	ldr	r3, [r4, #32]
 800757a:	b11b      	cbz	r3, 8007584 <__sinit+0x14>
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f7ff bff0 	b.w	8007564 <__sfp_lock_release>
 8007584:	4b04      	ldr	r3, [pc, #16]	; (8007598 <__sinit+0x28>)
 8007586:	6223      	str	r3, [r4, #32]
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <__sinit+0x2c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f5      	bne.n	800757c <__sinit+0xc>
 8007590:	f7ff ffc4 	bl	800751c <global_stdio_init.part.0>
 8007594:	e7f2      	b.n	800757c <__sinit+0xc>
 8007596:	bf00      	nop
 8007598:	080074dd 	.word	0x080074dd
 800759c:	20001b3c 	.word	0x20001b3c

080075a0 <_fwalk_sglue>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	4607      	mov	r7, r0
 80075a6:	4688      	mov	r8, r1
 80075a8:	4614      	mov	r4, r2
 80075aa:	2600      	movs	r6, #0
 80075ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075b0:	f1b9 0901 	subs.w	r9, r9, #1
 80075b4:	d505      	bpl.n	80075c2 <_fwalk_sglue+0x22>
 80075b6:	6824      	ldr	r4, [r4, #0]
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	d1f7      	bne.n	80075ac <_fwalk_sglue+0xc>
 80075bc:	4630      	mov	r0, r6
 80075be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d907      	bls.n	80075d8 <_fwalk_sglue+0x38>
 80075c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075cc:	3301      	adds	r3, #1
 80075ce:	d003      	beq.n	80075d8 <_fwalk_sglue+0x38>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4638      	mov	r0, r7
 80075d4:	47c0      	blx	r8
 80075d6:	4306      	orrs	r6, r0
 80075d8:	3568      	adds	r5, #104	; 0x68
 80075da:	e7e9      	b.n	80075b0 <_fwalk_sglue+0x10>

080075dc <iprintf>:
 80075dc:	b40f      	push	{r0, r1, r2, r3}
 80075de:	b507      	push	{r0, r1, r2, lr}
 80075e0:	4906      	ldr	r1, [pc, #24]	; (80075fc <iprintf+0x20>)
 80075e2:	ab04      	add	r3, sp, #16
 80075e4:	6808      	ldr	r0, [r1, #0]
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	6881      	ldr	r1, [r0, #8]
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	f002 fdeb 	bl	800a1c8 <_vfiprintf_r>
 80075f2:	b003      	add	sp, #12
 80075f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f8:	b004      	add	sp, #16
 80075fa:	4770      	bx	lr
 80075fc:	20000064 	.word	0x20000064

08007600 <setvbuf>:
 8007600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007604:	461d      	mov	r5, r3
 8007606:	4b54      	ldr	r3, [pc, #336]	; (8007758 <setvbuf+0x158>)
 8007608:	681f      	ldr	r7, [r3, #0]
 800760a:	4604      	mov	r4, r0
 800760c:	460e      	mov	r6, r1
 800760e:	4690      	mov	r8, r2
 8007610:	b127      	cbz	r7, 800761c <setvbuf+0x1c>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	b913      	cbnz	r3, 800761c <setvbuf+0x1c>
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff ffaa 	bl	8007570 <__sinit>
 800761c:	f1b8 0f02 	cmp.w	r8, #2
 8007620:	d006      	beq.n	8007630 <setvbuf+0x30>
 8007622:	f1b8 0f01 	cmp.w	r8, #1
 8007626:	f200 8094 	bhi.w	8007752 <setvbuf+0x152>
 800762a:	2d00      	cmp	r5, #0
 800762c:	f2c0 8091 	blt.w	8007752 <setvbuf+0x152>
 8007630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007632:	07da      	lsls	r2, r3, #31
 8007634:	d405      	bmi.n	8007642 <setvbuf+0x42>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	059b      	lsls	r3, r3, #22
 800763a:	d402      	bmi.n	8007642 <setvbuf+0x42>
 800763c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800763e:	f000 f96d 	bl	800791c <__retarget_lock_acquire_recursive>
 8007642:	4621      	mov	r1, r4
 8007644:	4638      	mov	r0, r7
 8007646:	f002 ff5f 	bl	800a508 <_fflush_r>
 800764a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764c:	b141      	cbz	r1, 8007660 <setvbuf+0x60>
 800764e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007652:	4299      	cmp	r1, r3
 8007654:	d002      	beq.n	800765c <setvbuf+0x5c>
 8007656:	4638      	mov	r0, r7
 8007658:	f000 fff0 	bl	800863c <_free_r>
 800765c:	2300      	movs	r3, #0
 800765e:	6363      	str	r3, [r4, #52]	; 0x34
 8007660:	2300      	movs	r3, #0
 8007662:	61a3      	str	r3, [r4, #24]
 8007664:	6063      	str	r3, [r4, #4]
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	0618      	lsls	r0, r3, #24
 800766a:	d503      	bpl.n	8007674 <setvbuf+0x74>
 800766c:	6921      	ldr	r1, [r4, #16]
 800766e:	4638      	mov	r0, r7
 8007670:	f000 ffe4 	bl	800863c <_free_r>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	f1b8 0f02 	cmp.w	r8, #2
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	d05f      	beq.n	8007746 <setvbuf+0x146>
 8007686:	ab01      	add	r3, sp, #4
 8007688:	466a      	mov	r2, sp
 800768a:	4621      	mov	r1, r4
 800768c:	4638      	mov	r0, r7
 800768e:	f002 ff63 	bl	800a558 <__swhatbuf_r>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	4318      	orrs	r0, r3
 8007696:	81a0      	strh	r0, [r4, #12]
 8007698:	bb2d      	cbnz	r5, 80076e6 <setvbuf+0xe6>
 800769a:	9d00      	ldr	r5, [sp, #0]
 800769c:	4628      	mov	r0, r5
 800769e:	f001 f819 	bl	80086d4 <malloc>
 80076a2:	4606      	mov	r6, r0
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d150      	bne.n	800774a <setvbuf+0x14a>
 80076a8:	f8dd 9000 	ldr.w	r9, [sp]
 80076ac:	45a9      	cmp	r9, r5
 80076ae:	d13e      	bne.n	800772e <setvbuf+0x12e>
 80076b0:	f04f 35ff 	mov.w	r5, #4294967295
 80076b4:	2200      	movs	r2, #0
 80076b6:	60a2      	str	r2, [r4, #8]
 80076b8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	6122      	str	r2, [r4, #16]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	6162      	str	r2, [r4, #20]
 80076c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076ca:	f043 0302 	orr.w	r3, r3, #2
 80076ce:	07d1      	lsls	r1, r2, #31
 80076d0:	81a3      	strh	r3, [r4, #12]
 80076d2:	d404      	bmi.n	80076de <setvbuf+0xde>
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	d402      	bmi.n	80076de <setvbuf+0xde>
 80076d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076da:	f000 f920 	bl	800791e <__retarget_lock_release_recursive>
 80076de:	4628      	mov	r0, r5
 80076e0:	b003      	add	sp, #12
 80076e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d0d8      	beq.n	800769c <setvbuf+0x9c>
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	b913      	cbnz	r3, 80076f4 <setvbuf+0xf4>
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff3e 	bl	8007570 <__sinit>
 80076f4:	f1b8 0f01 	cmp.w	r8, #1
 80076f8:	bf08      	it	eq
 80076fa:	89a3      	ldrheq	r3, [r4, #12]
 80076fc:	6026      	str	r6, [r4, #0]
 80076fe:	bf04      	itt	eq
 8007700:	f043 0301 	orreq.w	r3, r3, #1
 8007704:	81a3      	strheq	r3, [r4, #12]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f013 0208 	ands.w	r2, r3, #8
 800770c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007710:	d01d      	beq.n	800774e <setvbuf+0x14e>
 8007712:	07da      	lsls	r2, r3, #31
 8007714:	bf41      	itttt	mi
 8007716:	2200      	movmi	r2, #0
 8007718:	426d      	negmi	r5, r5
 800771a:	60a2      	strmi	r2, [r4, #8]
 800771c:	61a5      	strmi	r5, [r4, #24]
 800771e:	bf58      	it	pl
 8007720:	60a5      	strpl	r5, [r4, #8]
 8007722:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007724:	f015 0501 	ands.w	r5, r5, #1
 8007728:	d0d4      	beq.n	80076d4 <setvbuf+0xd4>
 800772a:	2500      	movs	r5, #0
 800772c:	e7d7      	b.n	80076de <setvbuf+0xde>
 800772e:	4648      	mov	r0, r9
 8007730:	f000 ffd0 	bl	80086d4 <malloc>
 8007734:	4606      	mov	r6, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d0ba      	beq.n	80076b0 <setvbuf+0xb0>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	81a3      	strh	r3, [r4, #12]
 8007742:	464d      	mov	r5, r9
 8007744:	e7d1      	b.n	80076ea <setvbuf+0xea>
 8007746:	2500      	movs	r5, #0
 8007748:	e7b4      	b.n	80076b4 <setvbuf+0xb4>
 800774a:	46a9      	mov	r9, r5
 800774c:	e7f5      	b.n	800773a <setvbuf+0x13a>
 800774e:	60a2      	str	r2, [r4, #8]
 8007750:	e7e7      	b.n	8007722 <setvbuf+0x122>
 8007752:	f04f 35ff 	mov.w	r5, #4294967295
 8007756:	e7c2      	b.n	80076de <setvbuf+0xde>
 8007758:	20000064 	.word	0x20000064

0800775c <siprintf>:
 800775c:	b40e      	push	{r1, r2, r3}
 800775e:	b500      	push	{lr}
 8007760:	b09c      	sub	sp, #112	; 0x70
 8007762:	ab1d      	add	r3, sp, #116	; 0x74
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	9006      	str	r0, [sp, #24]
 8007768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800776c:	4809      	ldr	r0, [pc, #36]	; (8007794 <siprintf+0x38>)
 800776e:	9107      	str	r1, [sp, #28]
 8007770:	9104      	str	r1, [sp, #16]
 8007772:	4909      	ldr	r1, [pc, #36]	; (8007798 <siprintf+0x3c>)
 8007774:	f853 2b04 	ldr.w	r2, [r3], #4
 8007778:	9105      	str	r1, [sp, #20]
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	a902      	add	r1, sp, #8
 8007780:	f002 fbfa 	bl	8009f78 <_svfiprintf_r>
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	b01c      	add	sp, #112	; 0x70
 800778c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007790:	b003      	add	sp, #12
 8007792:	4770      	bx	lr
 8007794:	20000064 	.word	0x20000064
 8007798:	ffff0208 	.word	0xffff0208

0800779c <__sread>:
 800779c:	b510      	push	{r4, lr}
 800779e:	460c      	mov	r4, r1
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	f000 f86c 	bl	8007880 <_read_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	bfab      	itete	ge
 80077ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ae:	89a3      	ldrhlt	r3, [r4, #12]
 80077b0:	181b      	addge	r3, r3, r0
 80077b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077b6:	bfac      	ite	ge
 80077b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077ba:	81a3      	strhlt	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__swrite>:
 80077be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	461f      	mov	r7, r3
 80077c4:	898b      	ldrh	r3, [r1, #12]
 80077c6:	05db      	lsls	r3, r3, #23
 80077c8:	4605      	mov	r5, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	4616      	mov	r6, r2
 80077ce:	d505      	bpl.n	80077dc <__swrite+0x1e>
 80077d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d4:	2302      	movs	r3, #2
 80077d6:	2200      	movs	r2, #0
 80077d8:	f000 f840 	bl	800785c <_lseek_r>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	4628      	mov	r0, r5
 80077ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	f000 b857 	b.w	80078a4 <_write_r>

080077f6 <__sseek>:
 80077f6:	b510      	push	{r4, lr}
 80077f8:	460c      	mov	r4, r1
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 f82d 	bl	800785c <_lseek_r>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	bf15      	itete	ne
 8007808:	6560      	strne	r0, [r4, #84]	; 0x54
 800780a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800780e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007812:	81a3      	strheq	r3, [r4, #12]
 8007814:	bf18      	it	ne
 8007816:	81a3      	strhne	r3, [r4, #12]
 8007818:	bd10      	pop	{r4, pc}

0800781a <__sclose>:
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	f000 b80d 	b.w	800783c <_close_r>

08007822 <memset>:
 8007822:	4402      	add	r2, r0
 8007824:	4603      	mov	r3, r0
 8007826:	4293      	cmp	r3, r2
 8007828:	d100      	bne.n	800782c <memset+0xa>
 800782a:	4770      	bx	lr
 800782c:	f803 1b01 	strb.w	r1, [r3], #1
 8007830:	e7f9      	b.n	8007826 <memset+0x4>
	...

08007834 <_localeconv_r>:
 8007834:	4800      	ldr	r0, [pc, #0]	; (8007838 <_localeconv_r+0x4>)
 8007836:	4770      	bx	lr
 8007838:	20000158 	.word	0x20000158

0800783c <_close_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4d06      	ldr	r5, [pc, #24]	; (8007858 <_close_r+0x1c>)
 8007840:	2300      	movs	r3, #0
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	f7fa fe19 	bl	800247e <_close>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_close_r+0x1a>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	b103      	cbz	r3, 8007856 <_close_r+0x1a>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	20001b40 	.word	0x20001b40

0800785c <_lseek_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	; (800787c <_lseek_r+0x20>)
 8007860:	4604      	mov	r4, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	602a      	str	r2, [r5, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7fa fe2e 	bl	80024cc <_lseek>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_lseek_r+0x1e>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_lseek_r+0x1e>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20001b40 	.word	0x20001b40

08007880 <_read_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d07      	ldr	r5, [pc, #28]	; (80078a0 <_read_r+0x20>)
 8007884:	4604      	mov	r4, r0
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fa fdbc 	bl	800240c <_read>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_read_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_read_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20001b40 	.word	0x20001b40

080078a4 <_write_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_write_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fa fdc7 	bl	8002446 <_write>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_write_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_write_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20001b40 	.word	0x20001b40

080078c8 <__errno>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <__errno+0x8>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000064 	.word	0x20000064

080078d4 <__libc_init_array>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	4d0d      	ldr	r5, [pc, #52]	; (800790c <__libc_init_array+0x38>)
 80078d8:	4c0d      	ldr	r4, [pc, #52]	; (8007910 <__libc_init_array+0x3c>)
 80078da:	1b64      	subs	r4, r4, r5
 80078dc:	10a4      	asrs	r4, r4, #2
 80078de:	2600      	movs	r6, #0
 80078e0:	42a6      	cmp	r6, r4
 80078e2:	d109      	bne.n	80078f8 <__libc_init_array+0x24>
 80078e4:	4d0b      	ldr	r5, [pc, #44]	; (8007914 <__libc_init_array+0x40>)
 80078e6:	4c0c      	ldr	r4, [pc, #48]	; (8007918 <__libc_init_array+0x44>)
 80078e8:	f003 fe4c 	bl	800b584 <_init>
 80078ec:	1b64      	subs	r4, r4, r5
 80078ee:	10a4      	asrs	r4, r4, #2
 80078f0:	2600      	movs	r6, #0
 80078f2:	42a6      	cmp	r6, r4
 80078f4:	d105      	bne.n	8007902 <__libc_init_array+0x2e>
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fc:	4798      	blx	r3
 80078fe:	3601      	adds	r6, #1
 8007900:	e7ee      	b.n	80078e0 <__libc_init_array+0xc>
 8007902:	f855 3b04 	ldr.w	r3, [r5], #4
 8007906:	4798      	blx	r3
 8007908:	3601      	adds	r6, #1
 800790a:	e7f2      	b.n	80078f2 <__libc_init_array+0x1e>
 800790c:	0800bb28 	.word	0x0800bb28
 8007910:	0800bb28 	.word	0x0800bb28
 8007914:	0800bb28 	.word	0x0800bb28
 8007918:	0800bb2c 	.word	0x0800bb2c

0800791c <__retarget_lock_acquire_recursive>:
 800791c:	4770      	bx	lr

0800791e <__retarget_lock_release_recursive>:
 800791e:	4770      	bx	lr

08007920 <memcpy>:
 8007920:	440a      	add	r2, r1
 8007922:	4291      	cmp	r1, r2
 8007924:	f100 33ff 	add.w	r3, r0, #4294967295
 8007928:	d100      	bne.n	800792c <memcpy+0xc>
 800792a:	4770      	bx	lr
 800792c:	b510      	push	{r4, lr}
 800792e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007936:	4291      	cmp	r1, r2
 8007938:	d1f9      	bne.n	800792e <memcpy+0xe>
 800793a:	bd10      	pop	{r4, pc}

0800793c <nanf>:
 800793c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007944 <nanf+0x8>
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	7fc00000 	.word	0x7fc00000

08007948 <quorem>:
 8007948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	6903      	ldr	r3, [r0, #16]
 800794e:	690c      	ldr	r4, [r1, #16]
 8007950:	42a3      	cmp	r3, r4
 8007952:	4607      	mov	r7, r0
 8007954:	db7e      	blt.n	8007a54 <quorem+0x10c>
 8007956:	3c01      	subs	r4, #1
 8007958:	f101 0814 	add.w	r8, r1, #20
 800795c:	f100 0514 	add.w	r5, r0, #20
 8007960:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800796a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800796e:	3301      	adds	r3, #1
 8007970:	429a      	cmp	r2, r3
 8007972:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007976:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800797a:	fbb2 f6f3 	udiv	r6, r2, r3
 800797e:	d331      	bcc.n	80079e4 <quorem+0x9c>
 8007980:	f04f 0e00 	mov.w	lr, #0
 8007984:	4640      	mov	r0, r8
 8007986:	46ac      	mov	ip, r5
 8007988:	46f2      	mov	sl, lr
 800798a:	f850 2b04 	ldr.w	r2, [r0], #4
 800798e:	b293      	uxth	r3, r2
 8007990:	fb06 e303 	mla	r3, r6, r3, lr
 8007994:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007998:	0c1a      	lsrs	r2, r3, #16
 800799a:	b29b      	uxth	r3, r3
 800799c:	ebaa 0303 	sub.w	r3, sl, r3
 80079a0:	f8dc a000 	ldr.w	sl, [ip]
 80079a4:	fa13 f38a 	uxtah	r3, r3, sl
 80079a8:	fb06 220e 	mla	r2, r6, lr, r2
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079b4:	b292      	uxth	r2, r2
 80079b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079be:	f8bd 3000 	ldrh.w	r3, [sp]
 80079c2:	4581      	cmp	r9, r0
 80079c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c8:	f84c 3b04 	str.w	r3, [ip], #4
 80079cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079d0:	d2db      	bcs.n	800798a <quorem+0x42>
 80079d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80079d6:	b92b      	cbnz	r3, 80079e4 <quorem+0x9c>
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	3b04      	subs	r3, #4
 80079dc:	429d      	cmp	r5, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	d32c      	bcc.n	8007a3c <quorem+0xf4>
 80079e2:	613c      	str	r4, [r7, #16]
 80079e4:	4638      	mov	r0, r7
 80079e6:	f001 f9ef 	bl	8008dc8 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	db22      	blt.n	8007a34 <quorem+0xec>
 80079ee:	3601      	adds	r6, #1
 80079f0:	4629      	mov	r1, r5
 80079f2:	2000      	movs	r0, #0
 80079f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f8:	f8d1 c000 	ldr.w	ip, [r1]
 80079fc:	b293      	uxth	r3, r2
 80079fe:	1ac3      	subs	r3, r0, r3
 8007a00:	0c12      	lsrs	r2, r2, #16
 8007a02:	fa13 f38c 	uxtah	r3, r3, ip
 8007a06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a14:	45c1      	cmp	r9, r8
 8007a16:	f841 3b04 	str.w	r3, [r1], #4
 8007a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a1e:	d2e9      	bcs.n	80079f4 <quorem+0xac>
 8007a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a28:	b922      	cbnz	r2, 8007a34 <quorem+0xec>
 8007a2a:	3b04      	subs	r3, #4
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	d30a      	bcc.n	8007a48 <quorem+0x100>
 8007a32:	613c      	str	r4, [r7, #16]
 8007a34:	4630      	mov	r0, r6
 8007a36:	b003      	add	sp, #12
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d1ce      	bne.n	80079e2 <quorem+0x9a>
 8007a44:	3c01      	subs	r4, #1
 8007a46:	e7c9      	b.n	80079dc <quorem+0x94>
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	3b04      	subs	r3, #4
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	d1f0      	bne.n	8007a32 <quorem+0xea>
 8007a50:	3c01      	subs	r4, #1
 8007a52:	e7eb      	b.n	8007a2c <quorem+0xe4>
 8007a54:	2000      	movs	r0, #0
 8007a56:	e7ee      	b.n	8007a36 <quorem+0xee>

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b04 	vpush	{d8-d9}
 8007a60:	69c5      	ldr	r5, [r0, #28]
 8007a62:	b093      	sub	sp, #76	; 0x4c
 8007a64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a68:	ec57 6b10 	vmov	r6, r7, d0
 8007a6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a70:	9107      	str	r1, [sp, #28]
 8007a72:	4604      	mov	r4, r0
 8007a74:	920a      	str	r2, [sp, #40]	; 0x28
 8007a76:	930d      	str	r3, [sp, #52]	; 0x34
 8007a78:	b975      	cbnz	r5, 8007a98 <_dtoa_r+0x40>
 8007a7a:	2010      	movs	r0, #16
 8007a7c:	f000 fe2a 	bl	80086d4 <malloc>
 8007a80:	4602      	mov	r2, r0
 8007a82:	61e0      	str	r0, [r4, #28]
 8007a84:	b920      	cbnz	r0, 8007a90 <_dtoa_r+0x38>
 8007a86:	4bae      	ldr	r3, [pc, #696]	; (8007d40 <_dtoa_r+0x2e8>)
 8007a88:	21ef      	movs	r1, #239	; 0xef
 8007a8a:	48ae      	ldr	r0, [pc, #696]	; (8007d44 <_dtoa_r+0x2ec>)
 8007a8c:	f002 fec4 	bl	800a818 <__assert_func>
 8007a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a94:	6005      	str	r5, [r0, #0]
 8007a96:	60c5      	str	r5, [r0, #12]
 8007a98:	69e3      	ldr	r3, [r4, #28]
 8007a9a:	6819      	ldr	r1, [r3, #0]
 8007a9c:	b151      	cbz	r1, 8007ab4 <_dtoa_r+0x5c>
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	604a      	str	r2, [r1, #4]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4093      	lsls	r3, r2
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 ff07 	bl	80088bc <_Bfree>
 8007aae:	69e3      	ldr	r3, [r4, #28]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	1e3b      	subs	r3, r7, #0
 8007ab6:	bfbb      	ittet	lt
 8007ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007abc:	9303      	strlt	r3, [sp, #12]
 8007abe:	2300      	movge	r3, #0
 8007ac0:	2201      	movlt	r2, #1
 8007ac2:	bfac      	ite	ge
 8007ac4:	f8c8 3000 	strge.w	r3, [r8]
 8007ac8:	f8c8 2000 	strlt.w	r2, [r8]
 8007acc:	4b9e      	ldr	r3, [pc, #632]	; (8007d48 <_dtoa_r+0x2f0>)
 8007ace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ad2:	ea33 0308 	bics.w	r3, r3, r8
 8007ad6:	d11b      	bne.n	8007b10 <_dtoa_r+0xb8>
 8007ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ada:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ae4:	4333      	orrs	r3, r6
 8007ae6:	f000 8593 	beq.w	8008610 <_dtoa_r+0xbb8>
 8007aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aec:	b963      	cbnz	r3, 8007b08 <_dtoa_r+0xb0>
 8007aee:	4b97      	ldr	r3, [pc, #604]	; (8007d4c <_dtoa_r+0x2f4>)
 8007af0:	e027      	b.n	8007b42 <_dtoa_r+0xea>
 8007af2:	4b97      	ldr	r3, [pc, #604]	; (8007d50 <_dtoa_r+0x2f8>)
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	9800      	ldr	r0, [sp, #0]
 8007afe:	b013      	add	sp, #76	; 0x4c
 8007b00:	ecbd 8b04 	vpop	{d8-d9}
 8007b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b08:	4b90      	ldr	r3, [pc, #576]	; (8007d4c <_dtoa_r+0x2f4>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	3303      	adds	r3, #3
 8007b0e:	e7f3      	b.n	8007af8 <_dtoa_r+0xa0>
 8007b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	ec51 0b17 	vmov	r0, r1, d7
 8007b1a:	eeb0 8a47 	vmov.f32	s16, s14
 8007b1e:	eef0 8a67 	vmov.f32	s17, s15
 8007b22:	2300      	movs	r3, #0
 8007b24:	f7f8 ffe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b28:	4681      	mov	r9, r0
 8007b2a:	b160      	cbz	r0, 8007b46 <_dtoa_r+0xee>
 8007b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b2e:	2301      	movs	r3, #1
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8568 	beq.w	800860a <_dtoa_r+0xbb2>
 8007b3a:	4b86      	ldr	r3, [pc, #536]	; (8007d54 <_dtoa_r+0x2fc>)
 8007b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	e7da      	b.n	8007afc <_dtoa_r+0xa4>
 8007b46:	aa10      	add	r2, sp, #64	; 0x40
 8007b48:	a911      	add	r1, sp, #68	; 0x44
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b50:	eef0 0a68 	vmov.f32	s1, s17
 8007b54:	f001 fa4e 	bl	8008ff4 <__d2b>
 8007b58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	d07f      	beq.n	8007c62 <_dtoa_r+0x20a>
 8007b62:	ee18 3a90 	vmov	r3, s17
 8007b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b6e:	ec51 0b18 	vmov	r0, r1, d8
 8007b72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b7e:	4619      	mov	r1, r3
 8007b80:	2200      	movs	r2, #0
 8007b82:	4b75      	ldr	r3, [pc, #468]	; (8007d58 <_dtoa_r+0x300>)
 8007b84:	f7f8 fb90 	bl	80002a8 <__aeabi_dsub>
 8007b88:	a367      	add	r3, pc, #412	; (adr r3, 8007d28 <_dtoa_r+0x2d0>)
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f7f8 fd43 	bl	8000618 <__aeabi_dmul>
 8007b92:	a367      	add	r3, pc, #412	; (adr r3, 8007d30 <_dtoa_r+0x2d8>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fb88 	bl	80002ac <__adddf3>
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	f7f8 fccf 	bl	8000544 <__aeabi_i2d>
 8007ba6:	a364      	add	r3, pc, #400	; (adr r3, 8007d38 <_dtoa_r+0x2e0>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 fd34 	bl	8000618 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fb78 	bl	80002ac <__adddf3>
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	f7f8 ffda 	bl	8000b78 <__aeabi_d2iz>
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4683      	mov	fp, r0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 ff95 	bl	8000afc <__aeabi_dcmplt>
 8007bd2:	b148      	cbz	r0, 8007be8 <_dtoa_r+0x190>
 8007bd4:	4658      	mov	r0, fp
 8007bd6:	f7f8 fcb5 	bl	8000544 <__aeabi_i2d>
 8007bda:	4632      	mov	r2, r6
 8007bdc:	463b      	mov	r3, r7
 8007bde:	f7f8 ff83 	bl	8000ae8 <__aeabi_dcmpeq>
 8007be2:	b908      	cbnz	r0, 8007be8 <_dtoa_r+0x190>
 8007be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007be8:	f1bb 0f16 	cmp.w	fp, #22
 8007bec:	d857      	bhi.n	8007c9e <_dtoa_r+0x246>
 8007bee:	4b5b      	ldr	r3, [pc, #364]	; (8007d5c <_dtoa_r+0x304>)
 8007bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	ec51 0b18 	vmov	r0, r1, d8
 8007bfc:	f7f8 ff7e 	bl	8000afc <__aeabi_dcmplt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d04e      	beq.n	8007ca2 <_dtoa_r+0x24a>
 8007c04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c08:	2300      	movs	r3, #0
 8007c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c0e:	1b5b      	subs	r3, r3, r5
 8007c10:	1e5a      	subs	r2, r3, #1
 8007c12:	bf45      	ittet	mi
 8007c14:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c18:	9305      	strmi	r3, [sp, #20]
 8007c1a:	2300      	movpl	r3, #0
 8007c1c:	2300      	movmi	r3, #0
 8007c1e:	9206      	str	r2, [sp, #24]
 8007c20:	bf54      	ite	pl
 8007c22:	9305      	strpl	r3, [sp, #20]
 8007c24:	9306      	strmi	r3, [sp, #24]
 8007c26:	f1bb 0f00 	cmp.w	fp, #0
 8007c2a:	db3c      	blt.n	8007ca6 <_dtoa_r+0x24e>
 8007c2c:	9b06      	ldr	r3, [sp, #24]
 8007c2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c32:	445b      	add	r3, fp
 8007c34:	9306      	str	r3, [sp, #24]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b09      	cmp	r3, #9
 8007c3e:	d868      	bhi.n	8007d12 <_dtoa_r+0x2ba>
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	bfc4      	itt	gt
 8007c44:	3b04      	subgt	r3, #4
 8007c46:	9307      	strgt	r3, [sp, #28]
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c4e:	bfcc      	ite	gt
 8007c50:	2500      	movgt	r5, #0
 8007c52:	2501      	movle	r5, #1
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	f200 8085 	bhi.w	8007d64 <_dtoa_r+0x30c>
 8007c5a:	e8df f003 	tbb	[pc, r3]
 8007c5e:	3b2e      	.short	0x3b2e
 8007c60:	5839      	.short	0x5839
 8007c62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c66:	441d      	add	r5, r3
 8007c68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	bfc1      	itttt	gt
 8007c70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c74:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c80:	bfd6      	itet	le
 8007c82:	f1c3 0320 	rsble	r3, r3, #32
 8007c86:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c8a:	fa06 f003 	lslle.w	r0, r6, r3
 8007c8e:	f7f8 fc49 	bl	8000524 <__aeabi_ui2d>
 8007c92:	2201      	movs	r2, #1
 8007c94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c98:	3d01      	subs	r5, #1
 8007c9a:	920e      	str	r2, [sp, #56]	; 0x38
 8007c9c:	e76f      	b.n	8007b7e <_dtoa_r+0x126>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e7b3      	b.n	8007c0a <_dtoa_r+0x1b2>
 8007ca2:	900c      	str	r0, [sp, #48]	; 0x30
 8007ca4:	e7b2      	b.n	8007c0c <_dtoa_r+0x1b4>
 8007ca6:	9b05      	ldr	r3, [sp, #20]
 8007ca8:	eba3 030b 	sub.w	r3, r3, fp
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	f1cb 0300 	rsb	r3, fp, #0
 8007cb2:	9308      	str	r3, [sp, #32]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb8:	e7bf      	b.n	8007c3a <_dtoa_r+0x1e2>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	dc52      	bgt.n	8007d6a <_dtoa_r+0x312>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cce:	e00b      	b.n	8007ce8 <_dtoa_r+0x290>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7f3      	b.n	8007cbc <_dtoa_r+0x264>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cda:	445b      	add	r3, fp
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	bfb8      	it	lt
 8007ce6:	2301      	movlt	r3, #1
 8007ce8:	69e0      	ldr	r0, [r4, #28]
 8007cea:	2100      	movs	r1, #0
 8007cec:	2204      	movs	r2, #4
 8007cee:	f102 0614 	add.w	r6, r2, #20
 8007cf2:	429e      	cmp	r6, r3
 8007cf4:	d93d      	bls.n	8007d72 <_dtoa_r+0x31a>
 8007cf6:	6041      	str	r1, [r0, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fd9f 	bl	800883c <_Balloc>
 8007cfe:	9000      	str	r0, [sp, #0]
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d139      	bne.n	8007d78 <_dtoa_r+0x320>
 8007d04:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <_dtoa_r+0x308>)
 8007d06:	4602      	mov	r2, r0
 8007d08:	f240 11af 	movw	r1, #431	; 0x1af
 8007d0c:	e6bd      	b.n	8007a8a <_dtoa_r+0x32>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7e1      	b.n	8007cd6 <_dtoa_r+0x27e>
 8007d12:	2501      	movs	r5, #1
 8007d14:	2300      	movs	r3, #0
 8007d16:	9307      	str	r3, [sp, #28]
 8007d18:	9509      	str	r5, [sp, #36]	; 0x24
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	2200      	movs	r2, #0
 8007d24:	2312      	movs	r3, #18
 8007d26:	e7d1      	b.n	8007ccc <_dtoa_r+0x274>
 8007d28:	636f4361 	.word	0x636f4361
 8007d2c:	3fd287a7 	.word	0x3fd287a7
 8007d30:	8b60c8b3 	.word	0x8b60c8b3
 8007d34:	3fc68a28 	.word	0x3fc68a28
 8007d38:	509f79fb 	.word	0x509f79fb
 8007d3c:	3fd34413 	.word	0x3fd34413
 8007d40:	0800b6ce 	.word	0x0800b6ce
 8007d44:	0800b6e5 	.word	0x0800b6e5
 8007d48:	7ff00000 	.word	0x7ff00000
 8007d4c:	0800b6ca 	.word	0x0800b6ca
 8007d50:	0800b6c1 	.word	0x0800b6c1
 8007d54:	0800b699 	.word	0x0800b699
 8007d58:	3ff80000 	.word	0x3ff80000
 8007d5c:	0800b7d0 	.word	0x0800b7d0
 8007d60:	0800b73d 	.word	0x0800b73d
 8007d64:	2301      	movs	r3, #1
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	e7d7      	b.n	8007d1a <_dtoa_r+0x2c2>
 8007d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	9304      	str	r3, [sp, #16]
 8007d70:	e7ba      	b.n	8007ce8 <_dtoa_r+0x290>
 8007d72:	3101      	adds	r1, #1
 8007d74:	0052      	lsls	r2, r2, #1
 8007d76:	e7ba      	b.n	8007cee <_dtoa_r+0x296>
 8007d78:	69e3      	ldr	r3, [r4, #28]
 8007d7a:	9a00      	ldr	r2, [sp, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	2b0e      	cmp	r3, #14
 8007d82:	f200 80a8 	bhi.w	8007ed6 <_dtoa_r+0x47e>
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	f000 80a5 	beq.w	8007ed6 <_dtoa_r+0x47e>
 8007d8c:	f1bb 0f00 	cmp.w	fp, #0
 8007d90:	dd38      	ble.n	8007e04 <_dtoa_r+0x3ac>
 8007d92:	4bc0      	ldr	r3, [pc, #768]	; (8008094 <_dtoa_r+0x63c>)
 8007d94:	f00b 020f 	and.w	r2, fp, #15
 8007d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007da0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007da4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007da8:	d019      	beq.n	8007dde <_dtoa_r+0x386>
 8007daa:	4bbb      	ldr	r3, [pc, #748]	; (8008098 <_dtoa_r+0x640>)
 8007dac:	ec51 0b18 	vmov	r0, r1, d8
 8007db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db4:	f7f8 fd5a 	bl	800086c <__aeabi_ddiv>
 8007db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dbc:	f008 080f 	and.w	r8, r8, #15
 8007dc0:	2503      	movs	r5, #3
 8007dc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008098 <_dtoa_r+0x640>
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	d10a      	bne.n	8007de2 <_dtoa_r+0x38a>
 8007dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	f7f8 fd4a 	bl	800086c <__aeabi_ddiv>
 8007dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ddc:	e02b      	b.n	8007e36 <_dtoa_r+0x3de>
 8007dde:	2502      	movs	r5, #2
 8007de0:	e7ef      	b.n	8007dc2 <_dtoa_r+0x36a>
 8007de2:	f018 0f01 	tst.w	r8, #1
 8007de6:	d008      	beq.n	8007dfa <_dtoa_r+0x3a2>
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007df0:	f7f8 fc12 	bl	8000618 <__aeabi_dmul>
 8007df4:	3501      	adds	r5, #1
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007dfe:	f109 0908 	add.w	r9, r9, #8
 8007e02:	e7e0      	b.n	8007dc6 <_dtoa_r+0x36e>
 8007e04:	f000 809f 	beq.w	8007f46 <_dtoa_r+0x4ee>
 8007e08:	f1cb 0600 	rsb	r6, fp, #0
 8007e0c:	4ba1      	ldr	r3, [pc, #644]	; (8008094 <_dtoa_r+0x63c>)
 8007e0e:	4fa2      	ldr	r7, [pc, #648]	; (8008098 <_dtoa_r+0x640>)
 8007e10:	f006 020f 	and.w	r2, r6, #15
 8007e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	ec51 0b18 	vmov	r0, r1, d8
 8007e20:	f7f8 fbfa 	bl	8000618 <__aeabi_dmul>
 8007e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e28:	1136      	asrs	r6, r6, #4
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2502      	movs	r5, #2
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	d17e      	bne.n	8007f30 <_dtoa_r+0x4d8>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1d0      	bne.n	8007dd8 <_dtoa_r+0x380>
 8007e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8084 	beq.w	8007f4a <_dtoa_r+0x4f2>
 8007e42:	4b96      	ldr	r3, [pc, #600]	; (800809c <_dtoa_r+0x644>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 fe57 	bl	8000afc <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d07b      	beq.n	8007f4a <_dtoa_r+0x4f2>
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d078      	beq.n	8007f4a <_dtoa_r+0x4f2>
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dd39      	ble.n	8007ed2 <_dtoa_r+0x47a>
 8007e5e:	4b90      	ldr	r3, [pc, #576]	; (80080a0 <_dtoa_r+0x648>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	4640      	mov	r0, r8
 8007e64:	4649      	mov	r1, r9
 8007e66:	f7f8 fbd7 	bl	8000618 <__aeabi_dmul>
 8007e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6e:	9e01      	ldr	r6, [sp, #4]
 8007e70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e74:	3501      	adds	r5, #1
 8007e76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7f8 fb62 	bl	8000544 <__aeabi_i2d>
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	f7f8 fbc8 	bl	8000618 <__aeabi_dmul>
 8007e88:	4b86      	ldr	r3, [pc, #536]	; (80080a4 <_dtoa_r+0x64c>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fa0e 	bl	80002ac <__adddf3>
 8007e90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d158      	bne.n	8007f50 <_dtoa_r+0x4f8>
 8007e9e:	4b82      	ldr	r3, [pc, #520]	; (80080a8 <_dtoa_r+0x650>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	f7f8 f9ff 	bl	80002a8 <__aeabi_dsub>
 8007eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eae:	4680      	mov	r8, r0
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	f7f8 fe41 	bl	8000b38 <__aeabi_dcmpgt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8296 	bne.w	80083e8 <_dtoa_r+0x990>
 8007ebc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	f7f8 fe18 	bl	8000afc <__aeabi_dcmplt>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f040 8289 	bne.w	80083e4 <_dtoa_r+0x98c>
 8007ed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f2c0 814e 	blt.w	800817a <_dtoa_r+0x722>
 8007ede:	f1bb 0f0e 	cmp.w	fp, #14
 8007ee2:	f300 814a 	bgt.w	800817a <_dtoa_r+0x722>
 8007ee6:	4b6b      	ldr	r3, [pc, #428]	; (8008094 <_dtoa_r+0x63c>)
 8007ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f280 80dc 	bge.w	80080b0 <_dtoa_r+0x658>
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f300 80d8 	bgt.w	80080b0 <_dtoa_r+0x658>
 8007f00:	f040 826f 	bne.w	80083e2 <_dtoa_r+0x98a>
 8007f04:	4b68      	ldr	r3, [pc, #416]	; (80080a8 <_dtoa_r+0x650>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 fb84 	bl	8000618 <__aeabi_dmul>
 8007f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f14:	f7f8 fe06 	bl	8000b24 <__aeabi_dcmpge>
 8007f18:	9e04      	ldr	r6, [sp, #16]
 8007f1a:	4637      	mov	r7, r6
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f040 8245 	bne.w	80083ac <_dtoa_r+0x954>
 8007f22:	9d00      	ldr	r5, [sp, #0]
 8007f24:	2331      	movs	r3, #49	; 0x31
 8007f26:	f805 3b01 	strb.w	r3, [r5], #1
 8007f2a:	f10b 0b01 	add.w	fp, fp, #1
 8007f2e:	e241      	b.n	80083b4 <_dtoa_r+0x95c>
 8007f30:	07f2      	lsls	r2, r6, #31
 8007f32:	d505      	bpl.n	8007f40 <_dtoa_r+0x4e8>
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	f7f8 fb6e 	bl	8000618 <__aeabi_dmul>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	2301      	movs	r3, #1
 8007f40:	1076      	asrs	r6, r6, #1
 8007f42:	3708      	adds	r7, #8
 8007f44:	e773      	b.n	8007e2e <_dtoa_r+0x3d6>
 8007f46:	2502      	movs	r5, #2
 8007f48:	e775      	b.n	8007e36 <_dtoa_r+0x3de>
 8007f4a:	9e04      	ldr	r6, [sp, #16]
 8007f4c:	465f      	mov	r7, fp
 8007f4e:	e792      	b.n	8007e76 <_dtoa_r+0x41e>
 8007f50:	9900      	ldr	r1, [sp, #0]
 8007f52:	4b50      	ldr	r3, [pc, #320]	; (8008094 <_dtoa_r+0x63c>)
 8007f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f58:	4431      	add	r1, r6
 8007f5a:	9102      	str	r1, [sp, #8]
 8007f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f5e:	eeb0 9a47 	vmov.f32	s18, s14
 8007f62:	eef0 9a67 	vmov.f32	s19, s15
 8007f66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d044      	beq.n	8007ffc <_dtoa_r+0x5a4>
 8007f72:	494e      	ldr	r1, [pc, #312]	; (80080ac <_dtoa_r+0x654>)
 8007f74:	2000      	movs	r0, #0
 8007f76:	f7f8 fc79 	bl	800086c <__aeabi_ddiv>
 8007f7a:	ec53 2b19 	vmov	r2, r3, d9
 8007f7e:	f7f8 f993 	bl	80002a8 <__aeabi_dsub>
 8007f82:	9d00      	ldr	r5, [sp, #0]
 8007f84:	ec41 0b19 	vmov	d9, r0, r1
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	f7f8 fdf4 	bl	8000b78 <__aeabi_d2iz>
 8007f90:	4606      	mov	r6, r0
 8007f92:	f7f8 fad7 	bl	8000544 <__aeabi_i2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 f983 	bl	80002a8 <__aeabi_dsub>
 8007fa2:	3630      	adds	r6, #48	; 0x30
 8007fa4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fa8:	ec53 2b19 	vmov	r2, r3, d9
 8007fac:	4680      	mov	r8, r0
 8007fae:	4689      	mov	r9, r1
 8007fb0:	f7f8 fda4 	bl	8000afc <__aeabi_dcmplt>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d164      	bne.n	8008082 <_dtoa_r+0x62a>
 8007fb8:	4642      	mov	r2, r8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	4937      	ldr	r1, [pc, #220]	; (800809c <_dtoa_r+0x644>)
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	f7f8 f972 	bl	80002a8 <__aeabi_dsub>
 8007fc4:	ec53 2b19 	vmov	r2, r3, d9
 8007fc8:	f7f8 fd98 	bl	8000afc <__aeabi_dcmplt>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	f040 80b6 	bne.w	800813e <_dtoa_r+0x6e6>
 8007fd2:	9b02      	ldr	r3, [sp, #8]
 8007fd4:	429d      	cmp	r5, r3
 8007fd6:	f43f af7c 	beq.w	8007ed2 <_dtoa_r+0x47a>
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <_dtoa_r+0x648>)
 8007fdc:	ec51 0b19 	vmov	r0, r1, d9
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f7f8 fb19 	bl	8000618 <__aeabi_dmul>
 8007fe6:	4b2e      	ldr	r3, [pc, #184]	; (80080a0 <_dtoa_r+0x648>)
 8007fe8:	ec41 0b19 	vmov	d9, r0, r1
 8007fec:	2200      	movs	r2, #0
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 fb11 	bl	8000618 <__aeabi_dmul>
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	4689      	mov	r9, r1
 8007ffa:	e7c5      	b.n	8007f88 <_dtoa_r+0x530>
 8007ffc:	ec51 0b17 	vmov	r0, r1, d7
 8008000:	f7f8 fb0a 	bl	8000618 <__aeabi_dmul>
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	9d00      	ldr	r5, [sp, #0]
 8008008:	930f      	str	r3, [sp, #60]	; 0x3c
 800800a:	ec41 0b19 	vmov	d9, r0, r1
 800800e:	4649      	mov	r1, r9
 8008010:	4640      	mov	r0, r8
 8008012:	f7f8 fdb1 	bl	8000b78 <__aeabi_d2iz>
 8008016:	4606      	mov	r6, r0
 8008018:	f7f8 fa94 	bl	8000544 <__aeabi_i2d>
 800801c:	3630      	adds	r6, #48	; 0x30
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4640      	mov	r0, r8
 8008024:	4649      	mov	r1, r9
 8008026:	f7f8 f93f 	bl	80002a8 <__aeabi_dsub>
 800802a:	f805 6b01 	strb.w	r6, [r5], #1
 800802e:	9b02      	ldr	r3, [sp, #8]
 8008030:	429d      	cmp	r5, r3
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	d124      	bne.n	8008086 <_dtoa_r+0x62e>
 800803c:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <_dtoa_r+0x654>)
 800803e:	ec51 0b19 	vmov	r0, r1, d9
 8008042:	f7f8 f933 	bl	80002ac <__adddf3>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fd73 	bl	8000b38 <__aeabi_dcmpgt>
 8008052:	2800      	cmp	r0, #0
 8008054:	d173      	bne.n	800813e <_dtoa_r+0x6e6>
 8008056:	ec53 2b19 	vmov	r2, r3, d9
 800805a:	4914      	ldr	r1, [pc, #80]	; (80080ac <_dtoa_r+0x654>)
 800805c:	2000      	movs	r0, #0
 800805e:	f7f8 f923 	bl	80002a8 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 fd47 	bl	8000afc <__aeabi_dcmplt>
 800806e:	2800      	cmp	r0, #0
 8008070:	f43f af2f 	beq.w	8007ed2 <_dtoa_r+0x47a>
 8008074:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008076:	1e6b      	subs	r3, r5, #1
 8008078:	930f      	str	r3, [sp, #60]	; 0x3c
 800807a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800807e:	2b30      	cmp	r3, #48	; 0x30
 8008080:	d0f8      	beq.n	8008074 <_dtoa_r+0x61c>
 8008082:	46bb      	mov	fp, r7
 8008084:	e04a      	b.n	800811c <_dtoa_r+0x6c4>
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <_dtoa_r+0x648>)
 8008088:	f7f8 fac6 	bl	8000618 <__aeabi_dmul>
 800808c:	4680      	mov	r8, r0
 800808e:	4689      	mov	r9, r1
 8008090:	e7bd      	b.n	800800e <_dtoa_r+0x5b6>
 8008092:	bf00      	nop
 8008094:	0800b7d0 	.word	0x0800b7d0
 8008098:	0800b7a8 	.word	0x0800b7a8
 800809c:	3ff00000 	.word	0x3ff00000
 80080a0:	40240000 	.word	0x40240000
 80080a4:	401c0000 	.word	0x401c0000
 80080a8:	40140000 	.word	0x40140000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080b4:	9d00      	ldr	r5, [sp, #0]
 80080b6:	4642      	mov	r2, r8
 80080b8:	464b      	mov	r3, r9
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 fbd5 	bl	800086c <__aeabi_ddiv>
 80080c2:	f7f8 fd59 	bl	8000b78 <__aeabi_d2iz>
 80080c6:	9001      	str	r0, [sp, #4]
 80080c8:	f7f8 fa3c 	bl	8000544 <__aeabi_i2d>
 80080cc:	4642      	mov	r2, r8
 80080ce:	464b      	mov	r3, r9
 80080d0:	f7f8 faa2 	bl	8000618 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f8e4 	bl	80002a8 <__aeabi_dsub>
 80080e0:	9e01      	ldr	r6, [sp, #4]
 80080e2:	9f04      	ldr	r7, [sp, #16]
 80080e4:	3630      	adds	r6, #48	; 0x30
 80080e6:	f805 6b01 	strb.w	r6, [r5], #1
 80080ea:	9e00      	ldr	r6, [sp, #0]
 80080ec:	1bae      	subs	r6, r5, r6
 80080ee:	42b7      	cmp	r7, r6
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	d134      	bne.n	8008160 <_dtoa_r+0x708>
 80080f6:	f7f8 f8d9 	bl	80002ac <__adddf3>
 80080fa:	4642      	mov	r2, r8
 80080fc:	464b      	mov	r3, r9
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	f7f8 fd19 	bl	8000b38 <__aeabi_dcmpgt>
 8008106:	b9c8      	cbnz	r0, 800813c <_dtoa_r+0x6e4>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 fcea 	bl	8000ae8 <__aeabi_dcmpeq>
 8008114:	b110      	cbz	r0, 800811c <_dtoa_r+0x6c4>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	07db      	lsls	r3, r3, #31
 800811a:	d40f      	bmi.n	800813c <_dtoa_r+0x6e4>
 800811c:	4651      	mov	r1, sl
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fbcc 	bl	80088bc <_Bfree>
 8008124:	2300      	movs	r3, #0
 8008126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008128:	702b      	strb	r3, [r5, #0]
 800812a:	f10b 0301 	add.w	r3, fp, #1
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008132:	2b00      	cmp	r3, #0
 8008134:	f43f ace2 	beq.w	8007afc <_dtoa_r+0xa4>
 8008138:	601d      	str	r5, [r3, #0]
 800813a:	e4df      	b.n	8007afc <_dtoa_r+0xa4>
 800813c:	465f      	mov	r7, fp
 800813e:	462b      	mov	r3, r5
 8008140:	461d      	mov	r5, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a39      	cmp	r2, #57	; 0x39
 8008148:	d106      	bne.n	8008158 <_dtoa_r+0x700>
 800814a:	9a00      	ldr	r2, [sp, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d1f7      	bne.n	8008140 <_dtoa_r+0x6e8>
 8008150:	9900      	ldr	r1, [sp, #0]
 8008152:	2230      	movs	r2, #48	; 0x30
 8008154:	3701      	adds	r7, #1
 8008156:	700a      	strb	r2, [r1, #0]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	3201      	adds	r2, #1
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e790      	b.n	8008082 <_dtoa_r+0x62a>
 8008160:	4ba3      	ldr	r3, [pc, #652]	; (80083f0 <_dtoa_r+0x998>)
 8008162:	2200      	movs	r2, #0
 8008164:	f7f8 fa58 	bl	8000618 <__aeabi_dmul>
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	4606      	mov	r6, r0
 800816e:	460f      	mov	r7, r1
 8008170:	f7f8 fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d09e      	beq.n	80080b6 <_dtoa_r+0x65e>
 8008178:	e7d0      	b.n	800811c <_dtoa_r+0x6c4>
 800817a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800817c:	2a00      	cmp	r2, #0
 800817e:	f000 80ca 	beq.w	8008316 <_dtoa_r+0x8be>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	2a01      	cmp	r2, #1
 8008186:	f300 80ad 	bgt.w	80082e4 <_dtoa_r+0x88c>
 800818a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800818c:	2a00      	cmp	r2, #0
 800818e:	f000 80a5 	beq.w	80082dc <_dtoa_r+0x884>
 8008192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008196:	9e08      	ldr	r6, [sp, #32]
 8008198:	9d05      	ldr	r5, [sp, #20]
 800819a:	9a05      	ldr	r2, [sp, #20]
 800819c:	441a      	add	r2, r3
 800819e:	9205      	str	r2, [sp, #20]
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	2101      	movs	r1, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	4620      	mov	r0, r4
 80081a8:	9206      	str	r2, [sp, #24]
 80081aa:	f000 fc87 	bl	8008abc <__i2b>
 80081ae:	4607      	mov	r7, r0
 80081b0:	b165      	cbz	r5, 80081cc <_dtoa_r+0x774>
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd09      	ble.n	80081cc <_dtoa_r+0x774>
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	9a05      	ldr	r2, [sp, #20]
 80081bc:	bfa8      	it	ge
 80081be:	462b      	movge	r3, r5
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	9205      	str	r2, [sp, #20]
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	1aed      	subs	r5, r5, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	9306      	str	r3, [sp, #24]
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	b1f3      	cbz	r3, 800820e <_dtoa_r+0x7b6>
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80a3 	beq.w	800831e <_dtoa_r+0x8c6>
 80081d8:	2e00      	cmp	r6, #0
 80081da:	dd10      	ble.n	80081fe <_dtoa_r+0x7a6>
 80081dc:	4639      	mov	r1, r7
 80081de:	4632      	mov	r2, r6
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fd2b 	bl	8008c3c <__pow5mult>
 80081e6:	4652      	mov	r2, sl
 80081e8:	4601      	mov	r1, r0
 80081ea:	4607      	mov	r7, r0
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fc7b 	bl	8008ae8 <__multiply>
 80081f2:	4651      	mov	r1, sl
 80081f4:	4680      	mov	r8, r0
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fb60 	bl	80088bc <_Bfree>
 80081fc:	46c2      	mov	sl, r8
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	1b9a      	subs	r2, r3, r6
 8008202:	d004      	beq.n	800820e <_dtoa_r+0x7b6>
 8008204:	4651      	mov	r1, sl
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fd18 	bl	8008c3c <__pow5mult>
 800820c:	4682      	mov	sl, r0
 800820e:	2101      	movs	r1, #1
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fc53 	bl	8008abc <__i2b>
 8008216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008218:	2b00      	cmp	r3, #0
 800821a:	4606      	mov	r6, r0
 800821c:	f340 8081 	ble.w	8008322 <_dtoa_r+0x8ca>
 8008220:	461a      	mov	r2, r3
 8008222:	4601      	mov	r1, r0
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fd09 	bl	8008c3c <__pow5mult>
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	2b01      	cmp	r3, #1
 800822e:	4606      	mov	r6, r0
 8008230:	dd7a      	ble.n	8008328 <_dtoa_r+0x8d0>
 8008232:	f04f 0800 	mov.w	r8, #0
 8008236:	6933      	ldr	r3, [r6, #16]
 8008238:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800823c:	6918      	ldr	r0, [r3, #16]
 800823e:	f000 fbef 	bl	8008a20 <__hi0bits>
 8008242:	f1c0 0020 	rsb	r0, r0, #32
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	4418      	add	r0, r3
 800824a:	f010 001f 	ands.w	r0, r0, #31
 800824e:	f000 8094 	beq.w	800837a <_dtoa_r+0x922>
 8008252:	f1c0 0320 	rsb	r3, r0, #32
 8008256:	2b04      	cmp	r3, #4
 8008258:	f340 8085 	ble.w	8008366 <_dtoa_r+0x90e>
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	f1c0 001c 	rsb	r0, r0, #28
 8008262:	4403      	add	r3, r0
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	4403      	add	r3, r0
 800826a:	4405      	add	r5, r0
 800826c:	9306      	str	r3, [sp, #24]
 800826e:	9b05      	ldr	r3, [sp, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dd05      	ble.n	8008280 <_dtoa_r+0x828>
 8008274:	4651      	mov	r1, sl
 8008276:	461a      	mov	r2, r3
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fd39 	bl	8008cf0 <__lshift>
 800827e:	4682      	mov	sl, r0
 8008280:	9b06      	ldr	r3, [sp, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	dd05      	ble.n	8008292 <_dtoa_r+0x83a>
 8008286:	4631      	mov	r1, r6
 8008288:	461a      	mov	r2, r3
 800828a:	4620      	mov	r0, r4
 800828c:	f000 fd30 	bl	8008cf0 <__lshift>
 8008290:	4606      	mov	r6, r0
 8008292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d072      	beq.n	800837e <_dtoa_r+0x926>
 8008298:	4631      	mov	r1, r6
 800829a:	4650      	mov	r0, sl
 800829c:	f000 fd94 	bl	8008dc8 <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	da6c      	bge.n	800837e <_dtoa_r+0x926>
 80082a4:	2300      	movs	r3, #0
 80082a6:	4651      	mov	r1, sl
 80082a8:	220a      	movs	r2, #10
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fb28 	bl	8008900 <__multadd>
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082b6:	4682      	mov	sl, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 81b0 	beq.w	800861e <_dtoa_r+0xbc6>
 80082be:	2300      	movs	r3, #0
 80082c0:	4639      	mov	r1, r7
 80082c2:	220a      	movs	r2, #10
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fb1b 	bl	8008900 <__multadd>
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	4607      	mov	r7, r0
 80082d0:	f300 8096 	bgt.w	8008400 <_dtoa_r+0x9a8>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	dc59      	bgt.n	800838e <_dtoa_r+0x936>
 80082da:	e091      	b.n	8008400 <_dtoa_r+0x9a8>
 80082dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082e2:	e758      	b.n	8008196 <_dtoa_r+0x73e>
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	1e5e      	subs	r6, r3, #1
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	42b3      	cmp	r3, r6
 80082ec:	bfbf      	itttt	lt
 80082ee:	9b08      	ldrlt	r3, [sp, #32]
 80082f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80082f2:	9608      	strlt	r6, [sp, #32]
 80082f4:	1af3      	sublt	r3, r6, r3
 80082f6:	bfb4      	ite	lt
 80082f8:	18d2      	addlt	r2, r2, r3
 80082fa:	1b9e      	subge	r6, r3, r6
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	bfbc      	itt	lt
 8008300:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008302:	2600      	movlt	r6, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfb7      	itett	lt
 8008308:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800830c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008310:	1a9d      	sublt	r5, r3, r2
 8008312:	2300      	movlt	r3, #0
 8008314:	e741      	b.n	800819a <_dtoa_r+0x742>
 8008316:	9e08      	ldr	r6, [sp, #32]
 8008318:	9d05      	ldr	r5, [sp, #20]
 800831a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800831c:	e748      	b.n	80081b0 <_dtoa_r+0x758>
 800831e:	9a08      	ldr	r2, [sp, #32]
 8008320:	e770      	b.n	8008204 <_dtoa_r+0x7ac>
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	2b01      	cmp	r3, #1
 8008326:	dc19      	bgt.n	800835c <_dtoa_r+0x904>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	b9bb      	cbnz	r3, 800835c <_dtoa_r+0x904>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008332:	b99b      	cbnz	r3, 800835c <_dtoa_r+0x904>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	b183      	cbz	r3, 8008362 <_dtoa_r+0x90a>
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	3301      	adds	r3, #1
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	3301      	adds	r3, #1
 800834a:	9306      	str	r3, [sp, #24]
 800834c:	f04f 0801 	mov.w	r8, #1
 8008350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008352:	2b00      	cmp	r3, #0
 8008354:	f47f af6f 	bne.w	8008236 <_dtoa_r+0x7de>
 8008358:	2001      	movs	r0, #1
 800835a:	e774      	b.n	8008246 <_dtoa_r+0x7ee>
 800835c:	f04f 0800 	mov.w	r8, #0
 8008360:	e7f6      	b.n	8008350 <_dtoa_r+0x8f8>
 8008362:	4698      	mov	r8, r3
 8008364:	e7f4      	b.n	8008350 <_dtoa_r+0x8f8>
 8008366:	d082      	beq.n	800826e <_dtoa_r+0x816>
 8008368:	9a05      	ldr	r2, [sp, #20]
 800836a:	331c      	adds	r3, #28
 800836c:	441a      	add	r2, r3
 800836e:	9205      	str	r2, [sp, #20]
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	441a      	add	r2, r3
 8008374:	441d      	add	r5, r3
 8008376:	9206      	str	r2, [sp, #24]
 8008378:	e779      	b.n	800826e <_dtoa_r+0x816>
 800837a:	4603      	mov	r3, r0
 800837c:	e7f4      	b.n	8008368 <_dtoa_r+0x910>
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dc37      	bgt.n	80083f4 <_dtoa_r+0x99c>
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	2b02      	cmp	r3, #2
 8008388:	dd34      	ble.n	80083f4 <_dtoa_r+0x99c>
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	b963      	cbnz	r3, 80083ac <_dtoa_r+0x954>
 8008392:	4631      	mov	r1, r6
 8008394:	2205      	movs	r2, #5
 8008396:	4620      	mov	r0, r4
 8008398:	f000 fab2 	bl	8008900 <__multadd>
 800839c:	4601      	mov	r1, r0
 800839e:	4606      	mov	r6, r0
 80083a0:	4650      	mov	r0, sl
 80083a2:	f000 fd11 	bl	8008dc8 <__mcmp>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f73f adbb 	bgt.w	8007f22 <_dtoa_r+0x4ca>
 80083ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ae:	9d00      	ldr	r5, [sp, #0]
 80083b0:	ea6f 0b03 	mvn.w	fp, r3
 80083b4:	f04f 0800 	mov.w	r8, #0
 80083b8:	4631      	mov	r1, r6
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fa7e 	bl	80088bc <_Bfree>
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	f43f aeab 	beq.w	800811c <_dtoa_r+0x6c4>
 80083c6:	f1b8 0f00 	cmp.w	r8, #0
 80083ca:	d005      	beq.n	80083d8 <_dtoa_r+0x980>
 80083cc:	45b8      	cmp	r8, r7
 80083ce:	d003      	beq.n	80083d8 <_dtoa_r+0x980>
 80083d0:	4641      	mov	r1, r8
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fa72 	bl	80088bc <_Bfree>
 80083d8:	4639      	mov	r1, r7
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fa6e 	bl	80088bc <_Bfree>
 80083e0:	e69c      	b.n	800811c <_dtoa_r+0x6c4>
 80083e2:	2600      	movs	r6, #0
 80083e4:	4637      	mov	r7, r6
 80083e6:	e7e1      	b.n	80083ac <_dtoa_r+0x954>
 80083e8:	46bb      	mov	fp, r7
 80083ea:	4637      	mov	r7, r6
 80083ec:	e599      	b.n	8007f22 <_dtoa_r+0x4ca>
 80083ee:	bf00      	nop
 80083f0:	40240000 	.word	0x40240000
 80083f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80c8 	beq.w	800858c <_dtoa_r+0xb34>
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	2d00      	cmp	r5, #0
 8008402:	dd05      	ble.n	8008410 <_dtoa_r+0x9b8>
 8008404:	4639      	mov	r1, r7
 8008406:	462a      	mov	r2, r5
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fc71 	bl	8008cf0 <__lshift>
 800840e:	4607      	mov	r7, r0
 8008410:	f1b8 0f00 	cmp.w	r8, #0
 8008414:	d05b      	beq.n	80084ce <_dtoa_r+0xa76>
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fa0f 	bl	800883c <_Balloc>
 800841e:	4605      	mov	r5, r0
 8008420:	b928      	cbnz	r0, 800842e <_dtoa_r+0x9d6>
 8008422:	4b83      	ldr	r3, [pc, #524]	; (8008630 <_dtoa_r+0xbd8>)
 8008424:	4602      	mov	r2, r0
 8008426:	f240 21ef 	movw	r1, #751	; 0x2ef
 800842a:	f7ff bb2e 	b.w	8007a8a <_dtoa_r+0x32>
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	3202      	adds	r2, #2
 8008432:	0092      	lsls	r2, r2, #2
 8008434:	f107 010c 	add.w	r1, r7, #12
 8008438:	300c      	adds	r0, #12
 800843a:	f7ff fa71 	bl	8007920 <memcpy>
 800843e:	2201      	movs	r2, #1
 8008440:	4629      	mov	r1, r5
 8008442:	4620      	mov	r0, r4
 8008444:	f000 fc54 	bl	8008cf0 <__lshift>
 8008448:	9b00      	ldr	r3, [sp, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008452:	4413      	add	r3, r2
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	46b8      	mov	r8, r7
 800845e:	9306      	str	r3, [sp, #24]
 8008460:	4607      	mov	r7, r0
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	4631      	mov	r1, r6
 8008466:	3b01      	subs	r3, #1
 8008468:	4650      	mov	r0, sl
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	f7ff fa6c 	bl	8007948 <quorem>
 8008470:	4641      	mov	r1, r8
 8008472:	9002      	str	r0, [sp, #8]
 8008474:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008478:	4650      	mov	r0, sl
 800847a:	f000 fca5 	bl	8008dc8 <__mcmp>
 800847e:	463a      	mov	r2, r7
 8008480:	9005      	str	r0, [sp, #20]
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fcbb 	bl	8008e00 <__mdiff>
 800848a:	68c2      	ldr	r2, [r0, #12]
 800848c:	4605      	mov	r5, r0
 800848e:	bb02      	cbnz	r2, 80084d2 <_dtoa_r+0xa7a>
 8008490:	4601      	mov	r1, r0
 8008492:	4650      	mov	r0, sl
 8008494:	f000 fc98 	bl	8008dc8 <__mcmp>
 8008498:	4602      	mov	r2, r0
 800849a:	4629      	mov	r1, r5
 800849c:	4620      	mov	r0, r4
 800849e:	9209      	str	r2, [sp, #36]	; 0x24
 80084a0:	f000 fa0c 	bl	80088bc <_Bfree>
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a8:	9d04      	ldr	r5, [sp, #16]
 80084aa:	ea43 0102 	orr.w	r1, r3, r2
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	4319      	orrs	r1, r3
 80084b2:	d110      	bne.n	80084d6 <_dtoa_r+0xa7e>
 80084b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b8:	d029      	beq.n	800850e <_dtoa_r+0xab6>
 80084ba:	9b05      	ldr	r3, [sp, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd02      	ble.n	80084c6 <_dtoa_r+0xa6e>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	f883 9000 	strb.w	r9, [r3]
 80084cc:	e774      	b.n	80083b8 <_dtoa_r+0x960>
 80084ce:	4638      	mov	r0, r7
 80084d0:	e7ba      	b.n	8008448 <_dtoa_r+0x9f0>
 80084d2:	2201      	movs	r2, #1
 80084d4:	e7e1      	b.n	800849a <_dtoa_r+0xa42>
 80084d6:	9b05      	ldr	r3, [sp, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	db04      	blt.n	80084e6 <_dtoa_r+0xa8e>
 80084dc:	9907      	ldr	r1, [sp, #28]
 80084de:	430b      	orrs	r3, r1
 80084e0:	9906      	ldr	r1, [sp, #24]
 80084e2:	430b      	orrs	r3, r1
 80084e4:	d120      	bne.n	8008528 <_dtoa_r+0xad0>
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	dded      	ble.n	80084c6 <_dtoa_r+0xa6e>
 80084ea:	4651      	mov	r1, sl
 80084ec:	2201      	movs	r2, #1
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fbfe 	bl	8008cf0 <__lshift>
 80084f4:	4631      	mov	r1, r6
 80084f6:	4682      	mov	sl, r0
 80084f8:	f000 fc66 	bl	8008dc8 <__mcmp>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	dc03      	bgt.n	8008508 <_dtoa_r+0xab0>
 8008500:	d1e1      	bne.n	80084c6 <_dtoa_r+0xa6e>
 8008502:	f019 0f01 	tst.w	r9, #1
 8008506:	d0de      	beq.n	80084c6 <_dtoa_r+0xa6e>
 8008508:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800850c:	d1d8      	bne.n	80084c0 <_dtoa_r+0xa68>
 800850e:	9a01      	ldr	r2, [sp, #4]
 8008510:	2339      	movs	r3, #57	; 0x39
 8008512:	7013      	strb	r3, [r2, #0]
 8008514:	462b      	mov	r3, r5
 8008516:	461d      	mov	r5, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800851e:	2a39      	cmp	r2, #57	; 0x39
 8008520:	d06c      	beq.n	80085fc <_dtoa_r+0xba4>
 8008522:	3201      	adds	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e747      	b.n	80083b8 <_dtoa_r+0x960>
 8008528:	2a00      	cmp	r2, #0
 800852a:	dd07      	ble.n	800853c <_dtoa_r+0xae4>
 800852c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008530:	d0ed      	beq.n	800850e <_dtoa_r+0xab6>
 8008532:	9a01      	ldr	r2, [sp, #4]
 8008534:	f109 0301 	add.w	r3, r9, #1
 8008538:	7013      	strb	r3, [r2, #0]
 800853a:	e73d      	b.n	80083b8 <_dtoa_r+0x960>
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	9a08      	ldr	r2, [sp, #32]
 8008540:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008544:	4293      	cmp	r3, r2
 8008546:	d043      	beq.n	80085d0 <_dtoa_r+0xb78>
 8008548:	4651      	mov	r1, sl
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4620      	mov	r0, r4
 8008550:	f000 f9d6 	bl	8008900 <__multadd>
 8008554:	45b8      	cmp	r8, r7
 8008556:	4682      	mov	sl, r0
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	f04f 020a 	mov.w	r2, #10
 8008560:	4641      	mov	r1, r8
 8008562:	4620      	mov	r0, r4
 8008564:	d107      	bne.n	8008576 <_dtoa_r+0xb1e>
 8008566:	f000 f9cb 	bl	8008900 <__multadd>
 800856a:	4680      	mov	r8, r0
 800856c:	4607      	mov	r7, r0
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	3301      	adds	r3, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	e775      	b.n	8008462 <_dtoa_r+0xa0a>
 8008576:	f000 f9c3 	bl	8008900 <__multadd>
 800857a:	4639      	mov	r1, r7
 800857c:	4680      	mov	r8, r0
 800857e:	2300      	movs	r3, #0
 8008580:	220a      	movs	r2, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f000 f9bc 	bl	8008900 <__multadd>
 8008588:	4607      	mov	r7, r0
 800858a:	e7f0      	b.n	800856e <_dtoa_r+0xb16>
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	9d00      	ldr	r5, [sp, #0]
 8008592:	4631      	mov	r1, r6
 8008594:	4650      	mov	r0, sl
 8008596:	f7ff f9d7 	bl	8007948 <quorem>
 800859a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	f805 9b01 	strb.w	r9, [r5], #1
 80085a4:	1aea      	subs	r2, r5, r3
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	dd07      	ble.n	80085bc <_dtoa_r+0xb64>
 80085ac:	4651      	mov	r1, sl
 80085ae:	2300      	movs	r3, #0
 80085b0:	220a      	movs	r2, #10
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f9a4 	bl	8008900 <__multadd>
 80085b8:	4682      	mov	sl, r0
 80085ba:	e7ea      	b.n	8008592 <_dtoa_r+0xb3a>
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfc8      	it	gt
 80085c2:	461d      	movgt	r5, r3
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	bfd8      	it	le
 80085c8:	2501      	movle	r5, #1
 80085ca:	441d      	add	r5, r3
 80085cc:	f04f 0800 	mov.w	r8, #0
 80085d0:	4651      	mov	r1, sl
 80085d2:	2201      	movs	r2, #1
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fb8b 	bl	8008cf0 <__lshift>
 80085da:	4631      	mov	r1, r6
 80085dc:	4682      	mov	sl, r0
 80085de:	f000 fbf3 	bl	8008dc8 <__mcmp>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	dc96      	bgt.n	8008514 <_dtoa_r+0xabc>
 80085e6:	d102      	bne.n	80085ee <_dtoa_r+0xb96>
 80085e8:	f019 0f01 	tst.w	r9, #1
 80085ec:	d192      	bne.n	8008514 <_dtoa_r+0xabc>
 80085ee:	462b      	mov	r3, r5
 80085f0:	461d      	mov	r5, r3
 80085f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085f6:	2a30      	cmp	r2, #48	; 0x30
 80085f8:	d0fa      	beq.n	80085f0 <_dtoa_r+0xb98>
 80085fa:	e6dd      	b.n	80083b8 <_dtoa_r+0x960>
 80085fc:	9a00      	ldr	r2, [sp, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d189      	bne.n	8008516 <_dtoa_r+0xabe>
 8008602:	f10b 0b01 	add.w	fp, fp, #1
 8008606:	2331      	movs	r3, #49	; 0x31
 8008608:	e796      	b.n	8008538 <_dtoa_r+0xae0>
 800860a:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <_dtoa_r+0xbdc>)
 800860c:	f7ff ba99 	b.w	8007b42 <_dtoa_r+0xea>
 8008610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008612:	2b00      	cmp	r3, #0
 8008614:	f47f aa6d 	bne.w	8007af2 <_dtoa_r+0x9a>
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <_dtoa_r+0xbe0>)
 800861a:	f7ff ba92 	b.w	8007b42 <_dtoa_r+0xea>
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	dcb5      	bgt.n	8008590 <_dtoa_r+0xb38>
 8008624:	9b07      	ldr	r3, [sp, #28]
 8008626:	2b02      	cmp	r3, #2
 8008628:	f73f aeb1 	bgt.w	800838e <_dtoa_r+0x936>
 800862c:	e7b0      	b.n	8008590 <_dtoa_r+0xb38>
 800862e:	bf00      	nop
 8008630:	0800b73d 	.word	0x0800b73d
 8008634:	0800b698 	.word	0x0800b698
 8008638:	0800b6c1 	.word	0x0800b6c1

0800863c <_free_r>:
 800863c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800863e:	2900      	cmp	r1, #0
 8008640:	d044      	beq.n	80086cc <_free_r+0x90>
 8008642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008646:	9001      	str	r0, [sp, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f1a1 0404 	sub.w	r4, r1, #4
 800864e:	bfb8      	it	lt
 8008650:	18e4      	addlt	r4, r4, r3
 8008652:	f000 f8e7 	bl	8008824 <__malloc_lock>
 8008656:	4a1e      	ldr	r2, [pc, #120]	; (80086d0 <_free_r+0x94>)
 8008658:	9801      	ldr	r0, [sp, #4]
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	b933      	cbnz	r3, 800866c <_free_r+0x30>
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	6014      	str	r4, [r2, #0]
 8008662:	b003      	add	sp, #12
 8008664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008668:	f000 b8e2 	b.w	8008830 <__malloc_unlock>
 800866c:	42a3      	cmp	r3, r4
 800866e:	d908      	bls.n	8008682 <_free_r+0x46>
 8008670:	6825      	ldr	r5, [r4, #0]
 8008672:	1961      	adds	r1, r4, r5
 8008674:	428b      	cmp	r3, r1
 8008676:	bf01      	itttt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	e7ed      	b.n	800865e <_free_r+0x22>
 8008682:	461a      	mov	r2, r3
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b10b      	cbz	r3, 800868c <_free_r+0x50>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d9fa      	bls.n	8008682 <_free_r+0x46>
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	1855      	adds	r5, r2, r1
 8008690:	42a5      	cmp	r5, r4
 8008692:	d10b      	bne.n	80086ac <_free_r+0x70>
 8008694:	6824      	ldr	r4, [r4, #0]
 8008696:	4421      	add	r1, r4
 8008698:	1854      	adds	r4, r2, r1
 800869a:	42a3      	cmp	r3, r4
 800869c:	6011      	str	r1, [r2, #0]
 800869e:	d1e0      	bne.n	8008662 <_free_r+0x26>
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	6053      	str	r3, [r2, #4]
 80086a6:	440c      	add	r4, r1
 80086a8:	6014      	str	r4, [r2, #0]
 80086aa:	e7da      	b.n	8008662 <_free_r+0x26>
 80086ac:	d902      	bls.n	80086b4 <_free_r+0x78>
 80086ae:	230c      	movs	r3, #12
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	e7d6      	b.n	8008662 <_free_r+0x26>
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	1961      	adds	r1, r4, r5
 80086b8:	428b      	cmp	r3, r1
 80086ba:	bf04      	itt	eq
 80086bc:	6819      	ldreq	r1, [r3, #0]
 80086be:	685b      	ldreq	r3, [r3, #4]
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	bf04      	itt	eq
 80086c4:	1949      	addeq	r1, r1, r5
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	6054      	str	r4, [r2, #4]
 80086ca:	e7ca      	b.n	8008662 <_free_r+0x26>
 80086cc:	b003      	add	sp, #12
 80086ce:	bd30      	pop	{r4, r5, pc}
 80086d0:	20001b48 	.word	0x20001b48

080086d4 <malloc>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <malloc+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f000 b823 	b.w	8008724 <_malloc_r>
 80086de:	bf00      	nop
 80086e0:	20000064 	.word	0x20000064

080086e4 <sbrk_aligned>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	4e0e      	ldr	r6, [pc, #56]	; (8008720 <sbrk_aligned+0x3c>)
 80086e8:	460c      	mov	r4, r1
 80086ea:	6831      	ldr	r1, [r6, #0]
 80086ec:	4605      	mov	r5, r0
 80086ee:	b911      	cbnz	r1, 80086f6 <sbrk_aligned+0x12>
 80086f0:	f002 f878 	bl	800a7e4 <_sbrk_r>
 80086f4:	6030      	str	r0, [r6, #0]
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f002 f873 	bl	800a7e4 <_sbrk_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d00a      	beq.n	8008718 <sbrk_aligned+0x34>
 8008702:	1cc4      	adds	r4, r0, #3
 8008704:	f024 0403 	bic.w	r4, r4, #3
 8008708:	42a0      	cmp	r0, r4
 800870a:	d007      	beq.n	800871c <sbrk_aligned+0x38>
 800870c:	1a21      	subs	r1, r4, r0
 800870e:	4628      	mov	r0, r5
 8008710:	f002 f868 	bl	800a7e4 <_sbrk_r>
 8008714:	3001      	adds	r0, #1
 8008716:	d101      	bne.n	800871c <sbrk_aligned+0x38>
 8008718:	f04f 34ff 	mov.w	r4, #4294967295
 800871c:	4620      	mov	r0, r4
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	20001b4c 	.word	0x20001b4c

08008724 <_malloc_r>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	1ccd      	adds	r5, r1, #3
 800872a:	f025 0503 	bic.w	r5, r5, #3
 800872e:	3508      	adds	r5, #8
 8008730:	2d0c      	cmp	r5, #12
 8008732:	bf38      	it	cc
 8008734:	250c      	movcc	r5, #12
 8008736:	2d00      	cmp	r5, #0
 8008738:	4607      	mov	r7, r0
 800873a:	db01      	blt.n	8008740 <_malloc_r+0x1c>
 800873c:	42a9      	cmp	r1, r5
 800873e:	d905      	bls.n	800874c <_malloc_r+0x28>
 8008740:	230c      	movs	r3, #12
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	2600      	movs	r6, #0
 8008746:	4630      	mov	r0, r6
 8008748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800874c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008820 <_malloc_r+0xfc>
 8008750:	f000 f868 	bl	8008824 <__malloc_lock>
 8008754:	f8d8 3000 	ldr.w	r3, [r8]
 8008758:	461c      	mov	r4, r3
 800875a:	bb5c      	cbnz	r4, 80087b4 <_malloc_r+0x90>
 800875c:	4629      	mov	r1, r5
 800875e:	4638      	mov	r0, r7
 8008760:	f7ff ffc0 	bl	80086e4 <sbrk_aligned>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	4604      	mov	r4, r0
 8008768:	d155      	bne.n	8008816 <_malloc_r+0xf2>
 800876a:	f8d8 4000 	ldr.w	r4, [r8]
 800876e:	4626      	mov	r6, r4
 8008770:	2e00      	cmp	r6, #0
 8008772:	d145      	bne.n	8008800 <_malloc_r+0xdc>
 8008774:	2c00      	cmp	r4, #0
 8008776:	d048      	beq.n	800880a <_malloc_r+0xe6>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	4631      	mov	r1, r6
 800877c:	4638      	mov	r0, r7
 800877e:	eb04 0903 	add.w	r9, r4, r3
 8008782:	f002 f82f 	bl	800a7e4 <_sbrk_r>
 8008786:	4581      	cmp	r9, r0
 8008788:	d13f      	bne.n	800880a <_malloc_r+0xe6>
 800878a:	6821      	ldr	r1, [r4, #0]
 800878c:	1a6d      	subs	r5, r5, r1
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ffa7 	bl	80086e4 <sbrk_aligned>
 8008796:	3001      	adds	r0, #1
 8008798:	d037      	beq.n	800880a <_malloc_r+0xe6>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	442b      	add	r3, r5
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	f8d8 3000 	ldr.w	r3, [r8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d038      	beq.n	800881a <_malloc_r+0xf6>
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	42a2      	cmp	r2, r4
 80087ac:	d12b      	bne.n	8008806 <_malloc_r+0xe2>
 80087ae:	2200      	movs	r2, #0
 80087b0:	605a      	str	r2, [r3, #4]
 80087b2:	e00f      	b.n	80087d4 <_malloc_r+0xb0>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	1b52      	subs	r2, r2, r5
 80087b8:	d41f      	bmi.n	80087fa <_malloc_r+0xd6>
 80087ba:	2a0b      	cmp	r2, #11
 80087bc:	d917      	bls.n	80087ee <_malloc_r+0xca>
 80087be:	1961      	adds	r1, r4, r5
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	6025      	str	r5, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	6059      	strne	r1, [r3, #4]
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	bf08      	it	eq
 80087cc:	f8c8 1000 	streq.w	r1, [r8]
 80087d0:	5162      	str	r2, [r4, r5]
 80087d2:	604b      	str	r3, [r1, #4]
 80087d4:	4638      	mov	r0, r7
 80087d6:	f104 060b 	add.w	r6, r4, #11
 80087da:	f000 f829 	bl	8008830 <__malloc_unlock>
 80087de:	f026 0607 	bic.w	r6, r6, #7
 80087e2:	1d23      	adds	r3, r4, #4
 80087e4:	1af2      	subs	r2, r6, r3
 80087e6:	d0ae      	beq.n	8008746 <_malloc_r+0x22>
 80087e8:	1b9b      	subs	r3, r3, r6
 80087ea:	50a3      	str	r3, [r4, r2]
 80087ec:	e7ab      	b.n	8008746 <_malloc_r+0x22>
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	6862      	ldr	r2, [r4, #4]
 80087f2:	d1dd      	bne.n	80087b0 <_malloc_r+0x8c>
 80087f4:	f8c8 2000 	str.w	r2, [r8]
 80087f8:	e7ec      	b.n	80087d4 <_malloc_r+0xb0>
 80087fa:	4623      	mov	r3, r4
 80087fc:	6864      	ldr	r4, [r4, #4]
 80087fe:	e7ac      	b.n	800875a <_malloc_r+0x36>
 8008800:	4634      	mov	r4, r6
 8008802:	6876      	ldr	r6, [r6, #4]
 8008804:	e7b4      	b.n	8008770 <_malloc_r+0x4c>
 8008806:	4613      	mov	r3, r2
 8008808:	e7cc      	b.n	80087a4 <_malloc_r+0x80>
 800880a:	230c      	movs	r3, #12
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4638      	mov	r0, r7
 8008810:	f000 f80e 	bl	8008830 <__malloc_unlock>
 8008814:	e797      	b.n	8008746 <_malloc_r+0x22>
 8008816:	6025      	str	r5, [r4, #0]
 8008818:	e7dc      	b.n	80087d4 <_malloc_r+0xb0>
 800881a:	605b      	str	r3, [r3, #4]
 800881c:	deff      	udf	#255	; 0xff
 800881e:	bf00      	nop
 8008820:	20001b48 	.word	0x20001b48

08008824 <__malloc_lock>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__malloc_lock+0x8>)
 8008826:	f7ff b879 	b.w	800791c <__retarget_lock_acquire_recursive>
 800882a:	bf00      	nop
 800882c:	20001b44 	.word	0x20001b44

08008830 <__malloc_unlock>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__malloc_unlock+0x8>)
 8008832:	f7ff b874 	b.w	800791e <__retarget_lock_release_recursive>
 8008836:	bf00      	nop
 8008838:	20001b44 	.word	0x20001b44

0800883c <_Balloc>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	69c6      	ldr	r6, [r0, #28]
 8008840:	4604      	mov	r4, r0
 8008842:	460d      	mov	r5, r1
 8008844:	b976      	cbnz	r6, 8008864 <_Balloc+0x28>
 8008846:	2010      	movs	r0, #16
 8008848:	f7ff ff44 	bl	80086d4 <malloc>
 800884c:	4602      	mov	r2, r0
 800884e:	61e0      	str	r0, [r4, #28]
 8008850:	b920      	cbnz	r0, 800885c <_Balloc+0x20>
 8008852:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <_Balloc+0x78>)
 8008854:	4818      	ldr	r0, [pc, #96]	; (80088b8 <_Balloc+0x7c>)
 8008856:	216b      	movs	r1, #107	; 0x6b
 8008858:	f001 ffde 	bl	800a818 <__assert_func>
 800885c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008860:	6006      	str	r6, [r0, #0]
 8008862:	60c6      	str	r6, [r0, #12]
 8008864:	69e6      	ldr	r6, [r4, #28]
 8008866:	68f3      	ldr	r3, [r6, #12]
 8008868:	b183      	cbz	r3, 800888c <_Balloc+0x50>
 800886a:	69e3      	ldr	r3, [r4, #28]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008872:	b9b8      	cbnz	r0, 80088a4 <_Balloc+0x68>
 8008874:	2101      	movs	r1, #1
 8008876:	fa01 f605 	lsl.w	r6, r1, r5
 800887a:	1d72      	adds	r2, r6, #5
 800887c:	0092      	lsls	r2, r2, #2
 800887e:	4620      	mov	r0, r4
 8008880:	f001 ffe8 	bl	800a854 <_calloc_r>
 8008884:	b160      	cbz	r0, 80088a0 <_Balloc+0x64>
 8008886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800888a:	e00e      	b.n	80088aa <_Balloc+0x6e>
 800888c:	2221      	movs	r2, #33	; 0x21
 800888e:	2104      	movs	r1, #4
 8008890:	4620      	mov	r0, r4
 8008892:	f001 ffdf 	bl	800a854 <_calloc_r>
 8008896:	69e3      	ldr	r3, [r4, #28]
 8008898:	60f0      	str	r0, [r6, #12]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e4      	bne.n	800886a <_Balloc+0x2e>
 80088a0:	2000      	movs	r0, #0
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	6802      	ldr	r2, [r0, #0]
 80088a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088aa:	2300      	movs	r3, #0
 80088ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088b0:	e7f7      	b.n	80088a2 <_Balloc+0x66>
 80088b2:	bf00      	nop
 80088b4:	0800b6ce 	.word	0x0800b6ce
 80088b8:	0800b74e 	.word	0x0800b74e

080088bc <_Bfree>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	69c6      	ldr	r6, [r0, #28]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b976      	cbnz	r6, 80088e4 <_Bfree+0x28>
 80088c6:	2010      	movs	r0, #16
 80088c8:	f7ff ff04 	bl	80086d4 <malloc>
 80088cc:	4602      	mov	r2, r0
 80088ce:	61e8      	str	r0, [r5, #28]
 80088d0:	b920      	cbnz	r0, 80088dc <_Bfree+0x20>
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <_Bfree+0x3c>)
 80088d4:	4809      	ldr	r0, [pc, #36]	; (80088fc <_Bfree+0x40>)
 80088d6:	218f      	movs	r1, #143	; 0x8f
 80088d8:	f001 ff9e 	bl	800a818 <__assert_func>
 80088dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e0:	6006      	str	r6, [r0, #0]
 80088e2:	60c6      	str	r6, [r0, #12]
 80088e4:	b13c      	cbz	r4, 80088f6 <_Bfree+0x3a>
 80088e6:	69eb      	ldr	r3, [r5, #28]
 80088e8:	6862      	ldr	r2, [r4, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088f0:	6021      	str	r1, [r4, #0]
 80088f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	0800b6ce 	.word	0x0800b6ce
 80088fc:	0800b74e 	.word	0x0800b74e

08008900 <__multadd>:
 8008900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008904:	690d      	ldr	r5, [r1, #16]
 8008906:	4607      	mov	r7, r0
 8008908:	460c      	mov	r4, r1
 800890a:	461e      	mov	r6, r3
 800890c:	f101 0c14 	add.w	ip, r1, #20
 8008910:	2000      	movs	r0, #0
 8008912:	f8dc 3000 	ldr.w	r3, [ip]
 8008916:	b299      	uxth	r1, r3
 8008918:	fb02 6101 	mla	r1, r2, r1, r6
 800891c:	0c1e      	lsrs	r6, r3, #16
 800891e:	0c0b      	lsrs	r3, r1, #16
 8008920:	fb02 3306 	mla	r3, r2, r6, r3
 8008924:	b289      	uxth	r1, r1
 8008926:	3001      	adds	r0, #1
 8008928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800892c:	4285      	cmp	r5, r0
 800892e:	f84c 1b04 	str.w	r1, [ip], #4
 8008932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008936:	dcec      	bgt.n	8008912 <__multadd+0x12>
 8008938:	b30e      	cbz	r6, 800897e <__multadd+0x7e>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	42ab      	cmp	r3, r5
 800893e:	dc19      	bgt.n	8008974 <__multadd+0x74>
 8008940:	6861      	ldr	r1, [r4, #4]
 8008942:	4638      	mov	r0, r7
 8008944:	3101      	adds	r1, #1
 8008946:	f7ff ff79 	bl	800883c <_Balloc>
 800894a:	4680      	mov	r8, r0
 800894c:	b928      	cbnz	r0, 800895a <__multadd+0x5a>
 800894e:	4602      	mov	r2, r0
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <__multadd+0x84>)
 8008952:	480d      	ldr	r0, [pc, #52]	; (8008988 <__multadd+0x88>)
 8008954:	21ba      	movs	r1, #186	; 0xba
 8008956:	f001 ff5f 	bl	800a818 <__assert_func>
 800895a:	6922      	ldr	r2, [r4, #16]
 800895c:	3202      	adds	r2, #2
 800895e:	f104 010c 	add.w	r1, r4, #12
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	300c      	adds	r0, #12
 8008966:	f7fe ffdb 	bl	8007920 <memcpy>
 800896a:	4621      	mov	r1, r4
 800896c:	4638      	mov	r0, r7
 800896e:	f7ff ffa5 	bl	80088bc <_Bfree>
 8008972:	4644      	mov	r4, r8
 8008974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008978:	3501      	adds	r5, #1
 800897a:	615e      	str	r6, [r3, #20]
 800897c:	6125      	str	r5, [r4, #16]
 800897e:	4620      	mov	r0, r4
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	0800b73d 	.word	0x0800b73d
 8008988:	0800b74e 	.word	0x0800b74e

0800898c <__s2b>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	4615      	mov	r5, r2
 8008994:	461f      	mov	r7, r3
 8008996:	2209      	movs	r2, #9
 8008998:	3308      	adds	r3, #8
 800899a:	4606      	mov	r6, r0
 800899c:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a0:	2100      	movs	r1, #0
 80089a2:	2201      	movs	r2, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	db09      	blt.n	80089bc <__s2b+0x30>
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff ff47 	bl	800883c <_Balloc>
 80089ae:	b940      	cbnz	r0, 80089c2 <__s2b+0x36>
 80089b0:	4602      	mov	r2, r0
 80089b2:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <__s2b+0x8c>)
 80089b4:	4819      	ldr	r0, [pc, #100]	; (8008a1c <__s2b+0x90>)
 80089b6:	21d3      	movs	r1, #211	; 0xd3
 80089b8:	f001 ff2e 	bl	800a818 <__assert_func>
 80089bc:	0052      	lsls	r2, r2, #1
 80089be:	3101      	adds	r1, #1
 80089c0:	e7f0      	b.n	80089a4 <__s2b+0x18>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	6143      	str	r3, [r0, #20]
 80089c6:	2d09      	cmp	r5, #9
 80089c8:	f04f 0301 	mov.w	r3, #1
 80089cc:	6103      	str	r3, [r0, #16]
 80089ce:	dd16      	ble.n	80089fe <__s2b+0x72>
 80089d0:	f104 0909 	add.w	r9, r4, #9
 80089d4:	46c8      	mov	r8, r9
 80089d6:	442c      	add	r4, r5
 80089d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089dc:	4601      	mov	r1, r0
 80089de:	3b30      	subs	r3, #48	; 0x30
 80089e0:	220a      	movs	r2, #10
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7ff ff8c 	bl	8008900 <__multadd>
 80089e8:	45a0      	cmp	r8, r4
 80089ea:	d1f5      	bne.n	80089d8 <__s2b+0x4c>
 80089ec:	f1a5 0408 	sub.w	r4, r5, #8
 80089f0:	444c      	add	r4, r9
 80089f2:	1b2d      	subs	r5, r5, r4
 80089f4:	1963      	adds	r3, r4, r5
 80089f6:	42bb      	cmp	r3, r7
 80089f8:	db04      	blt.n	8008a04 <__s2b+0x78>
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	340a      	adds	r4, #10
 8008a00:	2509      	movs	r5, #9
 8008a02:	e7f6      	b.n	80089f2 <__s2b+0x66>
 8008a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a08:	4601      	mov	r1, r0
 8008a0a:	3b30      	subs	r3, #48	; 0x30
 8008a0c:	220a      	movs	r2, #10
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ff76 	bl	8008900 <__multadd>
 8008a14:	e7ee      	b.n	80089f4 <__s2b+0x68>
 8008a16:	bf00      	nop
 8008a18:	0800b73d 	.word	0x0800b73d
 8008a1c:	0800b74e 	.word	0x0800b74e

08008a20 <__hi0bits>:
 8008a20:	0c03      	lsrs	r3, r0, #16
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	b9d3      	cbnz	r3, 8008a5c <__hi0bits+0x3c>
 8008a26:	0400      	lsls	r0, r0, #16
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a2e:	bf04      	itt	eq
 8008a30:	0200      	lsleq	r0, r0, #8
 8008a32:	3308      	addeq	r3, #8
 8008a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a38:	bf04      	itt	eq
 8008a3a:	0100      	lsleq	r0, r0, #4
 8008a3c:	3304      	addeq	r3, #4
 8008a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a42:	bf04      	itt	eq
 8008a44:	0080      	lsleq	r0, r0, #2
 8008a46:	3302      	addeq	r3, #2
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	db05      	blt.n	8008a58 <__hi0bits+0x38>
 8008a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a50:	f103 0301 	add.w	r3, r3, #1
 8008a54:	bf08      	it	eq
 8008a56:	2320      	moveq	r3, #32
 8008a58:	4618      	mov	r0, r3
 8008a5a:	4770      	bx	lr
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e7e4      	b.n	8008a2a <__hi0bits+0xa>

08008a60 <__lo0bits>:
 8008a60:	6803      	ldr	r3, [r0, #0]
 8008a62:	f013 0207 	ands.w	r2, r3, #7
 8008a66:	d00c      	beq.n	8008a82 <__lo0bits+0x22>
 8008a68:	07d9      	lsls	r1, r3, #31
 8008a6a:	d422      	bmi.n	8008ab2 <__lo0bits+0x52>
 8008a6c:	079a      	lsls	r2, r3, #30
 8008a6e:	bf49      	itett	mi
 8008a70:	085b      	lsrmi	r3, r3, #1
 8008a72:	089b      	lsrpl	r3, r3, #2
 8008a74:	6003      	strmi	r3, [r0, #0]
 8008a76:	2201      	movmi	r2, #1
 8008a78:	bf5c      	itt	pl
 8008a7a:	6003      	strpl	r3, [r0, #0]
 8008a7c:	2202      	movpl	r2, #2
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4770      	bx	lr
 8008a82:	b299      	uxth	r1, r3
 8008a84:	b909      	cbnz	r1, 8008a8a <__lo0bits+0x2a>
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	2210      	movs	r2, #16
 8008a8a:	b2d9      	uxtb	r1, r3
 8008a8c:	b909      	cbnz	r1, 8008a92 <__lo0bits+0x32>
 8008a8e:	3208      	adds	r2, #8
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	0719      	lsls	r1, r3, #28
 8008a94:	bf04      	itt	eq
 8008a96:	091b      	lsreq	r3, r3, #4
 8008a98:	3204      	addeq	r2, #4
 8008a9a:	0799      	lsls	r1, r3, #30
 8008a9c:	bf04      	itt	eq
 8008a9e:	089b      	lsreq	r3, r3, #2
 8008aa0:	3202      	addeq	r2, #2
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d403      	bmi.n	8008aae <__lo0bits+0x4e>
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	f102 0201 	add.w	r2, r2, #1
 8008aac:	d003      	beq.n	8008ab6 <__lo0bits+0x56>
 8008aae:	6003      	str	r3, [r0, #0]
 8008ab0:	e7e5      	b.n	8008a7e <__lo0bits+0x1e>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	e7e3      	b.n	8008a7e <__lo0bits+0x1e>
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	e7e1      	b.n	8008a7e <__lo0bits+0x1e>
	...

08008abc <__i2b>:
 8008abc:	b510      	push	{r4, lr}
 8008abe:	460c      	mov	r4, r1
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	f7ff febb 	bl	800883c <_Balloc>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	b928      	cbnz	r0, 8008ad6 <__i2b+0x1a>
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <__i2b+0x24>)
 8008acc:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <__i2b+0x28>)
 8008ace:	f240 1145 	movw	r1, #325	; 0x145
 8008ad2:	f001 fea1 	bl	800a818 <__assert_func>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	6144      	str	r4, [r0, #20]
 8008ada:	6103      	str	r3, [r0, #16]
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800b73d 	.word	0x0800b73d
 8008ae4:	0800b74e 	.word	0x0800b74e

08008ae8 <__multiply>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	4691      	mov	r9, r2
 8008aee:	690a      	ldr	r2, [r1, #16]
 8008af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	bfb8      	it	lt
 8008af8:	460b      	movlt	r3, r1
 8008afa:	460c      	mov	r4, r1
 8008afc:	bfbc      	itt	lt
 8008afe:	464c      	movlt	r4, r9
 8008b00:	4699      	movlt	r9, r3
 8008b02:	6927      	ldr	r7, [r4, #16]
 8008b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	6861      	ldr	r1, [r4, #4]
 8008b0c:	eb07 060a 	add.w	r6, r7, sl
 8008b10:	42b3      	cmp	r3, r6
 8008b12:	b085      	sub	sp, #20
 8008b14:	bfb8      	it	lt
 8008b16:	3101      	addlt	r1, #1
 8008b18:	f7ff fe90 	bl	800883c <_Balloc>
 8008b1c:	b930      	cbnz	r0, 8008b2c <__multiply+0x44>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b44      	ldr	r3, [pc, #272]	; (8008c34 <__multiply+0x14c>)
 8008b22:	4845      	ldr	r0, [pc, #276]	; (8008c38 <__multiply+0x150>)
 8008b24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b28:	f001 fe76 	bl	800a818 <__assert_func>
 8008b2c:	f100 0514 	add.w	r5, r0, #20
 8008b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b34:	462b      	mov	r3, r5
 8008b36:	2200      	movs	r2, #0
 8008b38:	4543      	cmp	r3, r8
 8008b3a:	d321      	bcc.n	8008b80 <__multiply+0x98>
 8008b3c:	f104 0314 	add.w	r3, r4, #20
 8008b40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b44:	f109 0314 	add.w	r3, r9, #20
 8008b48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	1b3a      	subs	r2, r7, r4
 8008b50:	3a15      	subs	r2, #21
 8008b52:	f022 0203 	bic.w	r2, r2, #3
 8008b56:	3204      	adds	r2, #4
 8008b58:	f104 0115 	add.w	r1, r4, #21
 8008b5c:	428f      	cmp	r7, r1
 8008b5e:	bf38      	it	cc
 8008b60:	2204      	movcc	r2, #4
 8008b62:	9201      	str	r2, [sp, #4]
 8008b64:	9a02      	ldr	r2, [sp, #8]
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d80c      	bhi.n	8008b86 <__multiply+0x9e>
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	dd03      	ble.n	8008b78 <__multiply+0x90>
 8008b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d05b      	beq.n	8008c30 <__multiply+0x148>
 8008b78:	6106      	str	r6, [r0, #16]
 8008b7a:	b005      	add	sp, #20
 8008b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	f843 2b04 	str.w	r2, [r3], #4
 8008b84:	e7d8      	b.n	8008b38 <__multiply+0x50>
 8008b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b8a:	f1ba 0f00 	cmp.w	sl, #0
 8008b8e:	d024      	beq.n	8008bda <__multiply+0xf2>
 8008b90:	f104 0e14 	add.w	lr, r4, #20
 8008b94:	46a9      	mov	r9, r5
 8008b96:	f04f 0c00 	mov.w	ip, #0
 8008b9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b9e:	f8d9 1000 	ldr.w	r1, [r9]
 8008ba2:	fa1f fb82 	uxth.w	fp, r2
 8008ba6:	b289      	uxth	r1, r1
 8008ba8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8008bb4:	4461      	add	r1, ip
 8008bb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bba:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bc2:	b289      	uxth	r1, r1
 8008bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bc8:	4577      	cmp	r7, lr
 8008bca:	f849 1b04 	str.w	r1, [r9], #4
 8008bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bd2:	d8e2      	bhi.n	8008b9a <__multiply+0xb2>
 8008bd4:	9a01      	ldr	r2, [sp, #4]
 8008bd6:	f845 c002 	str.w	ip, [r5, r2]
 8008bda:	9a03      	ldr	r2, [sp, #12]
 8008bdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008be0:	3304      	adds	r3, #4
 8008be2:	f1b9 0f00 	cmp.w	r9, #0
 8008be6:	d021      	beq.n	8008c2c <__multiply+0x144>
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	f104 0c14 	add.w	ip, r4, #20
 8008bee:	46ae      	mov	lr, r5
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8008bf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8008c00:	4452      	add	r2, sl
 8008c02:	b289      	uxth	r1, r1
 8008c04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c08:	f84e 1b04 	str.w	r1, [lr], #4
 8008c0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c14:	f8be 1000 	ldrh.w	r1, [lr]
 8008c18:	fb09 110a 	mla	r1, r9, sl, r1
 8008c1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c20:	4567      	cmp	r7, ip
 8008c22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c26:	d8e5      	bhi.n	8008bf4 <__multiply+0x10c>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	50a9      	str	r1, [r5, r2]
 8008c2c:	3504      	adds	r5, #4
 8008c2e:	e799      	b.n	8008b64 <__multiply+0x7c>
 8008c30:	3e01      	subs	r6, #1
 8008c32:	e79b      	b.n	8008b6c <__multiply+0x84>
 8008c34:	0800b73d 	.word	0x0800b73d
 8008c38:	0800b74e 	.word	0x0800b74e

08008c3c <__pow5mult>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	4615      	mov	r5, r2
 8008c42:	f012 0203 	ands.w	r2, r2, #3
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	d007      	beq.n	8008c5c <__pow5mult+0x20>
 8008c4c:	4c25      	ldr	r4, [pc, #148]	; (8008ce4 <__pow5mult+0xa8>)
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	2300      	movs	r3, #0
 8008c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c56:	f7ff fe53 	bl	8008900 <__multadd>
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	10ad      	asrs	r5, r5, #2
 8008c5e:	d03d      	beq.n	8008cdc <__pow5mult+0xa0>
 8008c60:	69f4      	ldr	r4, [r6, #28]
 8008c62:	b97c      	cbnz	r4, 8008c84 <__pow5mult+0x48>
 8008c64:	2010      	movs	r0, #16
 8008c66:	f7ff fd35 	bl	80086d4 <malloc>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	61f0      	str	r0, [r6, #28]
 8008c6e:	b928      	cbnz	r0, 8008c7c <__pow5mult+0x40>
 8008c70:	4b1d      	ldr	r3, [pc, #116]	; (8008ce8 <__pow5mult+0xac>)
 8008c72:	481e      	ldr	r0, [pc, #120]	; (8008cec <__pow5mult+0xb0>)
 8008c74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c78:	f001 fdce 	bl	800a818 <__assert_func>
 8008c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c80:	6004      	str	r4, [r0, #0]
 8008c82:	60c4      	str	r4, [r0, #12]
 8008c84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c8c:	b94c      	cbnz	r4, 8008ca2 <__pow5mult+0x66>
 8008c8e:	f240 2171 	movw	r1, #625	; 0x271
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7ff ff12 	bl	8008abc <__i2b>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	f04f 0900 	mov.w	r9, #0
 8008ca6:	07eb      	lsls	r3, r5, #31
 8008ca8:	d50a      	bpl.n	8008cc0 <__pow5mult+0x84>
 8008caa:	4639      	mov	r1, r7
 8008cac:	4622      	mov	r2, r4
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff ff1a 	bl	8008ae8 <__multiply>
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff fdff 	bl	80088bc <_Bfree>
 8008cbe:	4647      	mov	r7, r8
 8008cc0:	106d      	asrs	r5, r5, #1
 8008cc2:	d00b      	beq.n	8008cdc <__pow5mult+0xa0>
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	b938      	cbnz	r0, 8008cd8 <__pow5mult+0x9c>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff ff0b 	bl	8008ae8 <__multiply>
 8008cd2:	6020      	str	r0, [r4, #0]
 8008cd4:	f8c0 9000 	str.w	r9, [r0]
 8008cd8:	4604      	mov	r4, r0
 8008cda:	e7e4      	b.n	8008ca6 <__pow5mult+0x6a>
 8008cdc:	4638      	mov	r0, r7
 8008cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800b898 	.word	0x0800b898
 8008ce8:	0800b6ce 	.word	0x0800b6ce
 8008cec:	0800b74e 	.word	0x0800b74e

08008cf0 <__lshift>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	6849      	ldr	r1, [r1, #4]
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	4607      	mov	r7, r0
 8008d02:	4691      	mov	r9, r2
 8008d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d08:	f108 0601 	add.w	r6, r8, #1
 8008d0c:	42b3      	cmp	r3, r6
 8008d0e:	db0b      	blt.n	8008d28 <__lshift+0x38>
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff fd93 	bl	800883c <_Balloc>
 8008d16:	4605      	mov	r5, r0
 8008d18:	b948      	cbnz	r0, 8008d2e <__lshift+0x3e>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4b28      	ldr	r3, [pc, #160]	; (8008dc0 <__lshift+0xd0>)
 8008d1e:	4829      	ldr	r0, [pc, #164]	; (8008dc4 <__lshift+0xd4>)
 8008d20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d24:	f001 fd78 	bl	800a818 <__assert_func>
 8008d28:	3101      	adds	r1, #1
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	e7ee      	b.n	8008d0c <__lshift+0x1c>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f100 0114 	add.w	r1, r0, #20
 8008d34:	f100 0210 	add.w	r2, r0, #16
 8008d38:	4618      	mov	r0, r3
 8008d3a:	4553      	cmp	r3, sl
 8008d3c:	db33      	blt.n	8008da6 <__lshift+0xb6>
 8008d3e:	6920      	ldr	r0, [r4, #16]
 8008d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d44:	f104 0314 	add.w	r3, r4, #20
 8008d48:	f019 091f 	ands.w	r9, r9, #31
 8008d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d54:	d02b      	beq.n	8008dae <__lshift+0xbe>
 8008d56:	f1c9 0e20 	rsb	lr, r9, #32
 8008d5a:	468a      	mov	sl, r1
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	fa00 f009 	lsl.w	r0, r0, r9
 8008d64:	4310      	orrs	r0, r2
 8008d66:	f84a 0b04 	str.w	r0, [sl], #4
 8008d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6e:	459c      	cmp	ip, r3
 8008d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d74:	d8f3      	bhi.n	8008d5e <__lshift+0x6e>
 8008d76:	ebac 0304 	sub.w	r3, ip, r4
 8008d7a:	3b15      	subs	r3, #21
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	3304      	adds	r3, #4
 8008d82:	f104 0015 	add.w	r0, r4, #21
 8008d86:	4584      	cmp	ip, r0
 8008d88:	bf38      	it	cc
 8008d8a:	2304      	movcc	r3, #4
 8008d8c:	50ca      	str	r2, [r1, r3]
 8008d8e:	b10a      	cbz	r2, 8008d94 <__lshift+0xa4>
 8008d90:	f108 0602 	add.w	r6, r8, #2
 8008d94:	3e01      	subs	r6, #1
 8008d96:	4638      	mov	r0, r7
 8008d98:	612e      	str	r6, [r5, #16]
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	f7ff fd8e 	bl	80088bc <_Bfree>
 8008da0:	4628      	mov	r0, r5
 8008da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008daa:	3301      	adds	r3, #1
 8008dac:	e7c5      	b.n	8008d3a <__lshift+0x4a>
 8008dae:	3904      	subs	r1, #4
 8008db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db8:	459c      	cmp	ip, r3
 8008dba:	d8f9      	bhi.n	8008db0 <__lshift+0xc0>
 8008dbc:	e7ea      	b.n	8008d94 <__lshift+0xa4>
 8008dbe:	bf00      	nop
 8008dc0:	0800b73d 	.word	0x0800b73d
 8008dc4:	0800b74e 	.word	0x0800b74e

08008dc8 <__mcmp>:
 8008dc8:	b530      	push	{r4, r5, lr}
 8008dca:	6902      	ldr	r2, [r0, #16]
 8008dcc:	690c      	ldr	r4, [r1, #16]
 8008dce:	1b12      	subs	r2, r2, r4
 8008dd0:	d10e      	bne.n	8008df0 <__mcmp+0x28>
 8008dd2:	f100 0314 	add.w	r3, r0, #20
 8008dd6:	3114      	adds	r1, #20
 8008dd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008de0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008de4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008de8:	42a5      	cmp	r5, r4
 8008dea:	d003      	beq.n	8008df4 <__mcmp+0x2c>
 8008dec:	d305      	bcc.n	8008dfa <__mcmp+0x32>
 8008dee:	2201      	movs	r2, #1
 8008df0:	4610      	mov	r0, r2
 8008df2:	bd30      	pop	{r4, r5, pc}
 8008df4:	4283      	cmp	r3, r0
 8008df6:	d3f3      	bcc.n	8008de0 <__mcmp+0x18>
 8008df8:	e7fa      	b.n	8008df0 <__mcmp+0x28>
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfe:	e7f7      	b.n	8008df0 <__mcmp+0x28>

08008e00 <__mdiff>:
 8008e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	460c      	mov	r4, r1
 8008e06:	4606      	mov	r6, r0
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4690      	mov	r8, r2
 8008e0e:	f7ff ffdb 	bl	8008dc8 <__mcmp>
 8008e12:	1e05      	subs	r5, r0, #0
 8008e14:	d110      	bne.n	8008e38 <__mdiff+0x38>
 8008e16:	4629      	mov	r1, r5
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7ff fd0f 	bl	800883c <_Balloc>
 8008e1e:	b930      	cbnz	r0, 8008e2e <__mdiff+0x2e>
 8008e20:	4b3a      	ldr	r3, [pc, #232]	; (8008f0c <__mdiff+0x10c>)
 8008e22:	4602      	mov	r2, r0
 8008e24:	f240 2137 	movw	r1, #567	; 0x237
 8008e28:	4839      	ldr	r0, [pc, #228]	; (8008f10 <__mdiff+0x110>)
 8008e2a:	f001 fcf5 	bl	800a818 <__assert_func>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	bfa4      	itt	ge
 8008e3a:	4643      	movge	r3, r8
 8008e3c:	46a0      	movge	r8, r4
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e44:	bfa6      	itte	ge
 8008e46:	461c      	movge	r4, r3
 8008e48:	2500      	movge	r5, #0
 8008e4a:	2501      	movlt	r5, #1
 8008e4c:	f7ff fcf6 	bl	800883c <_Balloc>
 8008e50:	b920      	cbnz	r0, 8008e5c <__mdiff+0x5c>
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <__mdiff+0x10c>)
 8008e54:	4602      	mov	r2, r0
 8008e56:	f240 2145 	movw	r1, #581	; 0x245
 8008e5a:	e7e5      	b.n	8008e28 <__mdiff+0x28>
 8008e5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e60:	6926      	ldr	r6, [r4, #16]
 8008e62:	60c5      	str	r5, [r0, #12]
 8008e64:	f104 0914 	add.w	r9, r4, #20
 8008e68:	f108 0514 	add.w	r5, r8, #20
 8008e6c:	f100 0e14 	add.w	lr, r0, #20
 8008e70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e78:	f108 0210 	add.w	r2, r8, #16
 8008e7c:	46f2      	mov	sl, lr
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e88:	fa11 f88b 	uxtah	r8, r1, fp
 8008e8c:	b299      	uxth	r1, r3
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	eba8 0801 	sub.w	r8, r8, r1
 8008e94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e9c:	fa1f f888 	uxth.w	r8, r8
 8008ea0:	1419      	asrs	r1, r3, #16
 8008ea2:	454e      	cmp	r6, r9
 8008ea4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ea8:	f84a 3b04 	str.w	r3, [sl], #4
 8008eac:	d8e8      	bhi.n	8008e80 <__mdiff+0x80>
 8008eae:	1b33      	subs	r3, r6, r4
 8008eb0:	3b15      	subs	r3, #21
 8008eb2:	f023 0303 	bic.w	r3, r3, #3
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	3415      	adds	r4, #21
 8008eba:	42a6      	cmp	r6, r4
 8008ebc:	bf38      	it	cc
 8008ebe:	2304      	movcc	r3, #4
 8008ec0:	441d      	add	r5, r3
 8008ec2:	4473      	add	r3, lr
 8008ec4:	469e      	mov	lr, r3
 8008ec6:	462e      	mov	r6, r5
 8008ec8:	4566      	cmp	r6, ip
 8008eca:	d30e      	bcc.n	8008eea <__mdiff+0xea>
 8008ecc:	f10c 0203 	add.w	r2, ip, #3
 8008ed0:	1b52      	subs	r2, r2, r5
 8008ed2:	f022 0203 	bic.w	r2, r2, #3
 8008ed6:	3d03      	subs	r5, #3
 8008ed8:	45ac      	cmp	ip, r5
 8008eda:	bf38      	it	cc
 8008edc:	2200      	movcc	r2, #0
 8008ede:	4413      	add	r3, r2
 8008ee0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ee4:	b17a      	cbz	r2, 8008f06 <__mdiff+0x106>
 8008ee6:	6107      	str	r7, [r0, #16]
 8008ee8:	e7a4      	b.n	8008e34 <__mdiff+0x34>
 8008eea:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eee:	fa11 f288 	uxtah	r2, r1, r8
 8008ef2:	1414      	asrs	r4, r2, #16
 8008ef4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008efe:	f84e 2b04 	str.w	r2, [lr], #4
 8008f02:	1421      	asrs	r1, r4, #16
 8008f04:	e7e0      	b.n	8008ec8 <__mdiff+0xc8>
 8008f06:	3f01      	subs	r7, #1
 8008f08:	e7ea      	b.n	8008ee0 <__mdiff+0xe0>
 8008f0a:	bf00      	nop
 8008f0c:	0800b73d 	.word	0x0800b73d
 8008f10:	0800b74e 	.word	0x0800b74e

08008f14 <__ulp>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	ed8d 0b00 	vstr	d0, [sp]
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <__ulp+0x48>)
 8008f1e:	4013      	ands	r3, r2
 8008f20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dc08      	bgt.n	8008f3a <__ulp+0x26>
 8008f28:	425b      	negs	r3, r3
 8008f2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008f2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f32:	da04      	bge.n	8008f3e <__ulp+0x2a>
 8008f34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f38:	4113      	asrs	r3, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	e008      	b.n	8008f50 <__ulp+0x3c>
 8008f3e:	f1a2 0314 	sub.w	r3, r2, #20
 8008f42:	2b1e      	cmp	r3, #30
 8008f44:	bfda      	itte	le
 8008f46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008f4a:	40da      	lsrle	r2, r3
 8008f4c:	2201      	movgt	r2, #1
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	ec41 0b10 	vmov	d0, r0, r1
 8008f58:	b002      	add	sp, #8
 8008f5a:	4770      	bx	lr
 8008f5c:	7ff00000 	.word	0x7ff00000

08008f60 <__b2d>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	6906      	ldr	r6, [r0, #16]
 8008f66:	f100 0814 	add.w	r8, r0, #20
 8008f6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f6e:	1f37      	subs	r7, r6, #4
 8008f70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7ff fd53 	bl	8008a20 <__hi0bits>
 8008f7a:	f1c0 0320 	rsb	r3, r0, #32
 8008f7e:	280a      	cmp	r0, #10
 8008f80:	600b      	str	r3, [r1, #0]
 8008f82:	491b      	ldr	r1, [pc, #108]	; (8008ff0 <__b2d+0x90>)
 8008f84:	dc15      	bgt.n	8008fb2 <__b2d+0x52>
 8008f86:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f8e:	45b8      	cmp	r8, r7
 8008f90:	ea43 0501 	orr.w	r5, r3, r1
 8008f94:	bf34      	ite	cc
 8008f96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f9a:	2300      	movcs	r3, #0
 8008f9c:	3015      	adds	r0, #21
 8008f9e:	fa02 f000 	lsl.w	r0, r2, r0
 8008fa2:	fa23 f30c 	lsr.w	r3, r3, ip
 8008fa6:	4303      	orrs	r3, r0
 8008fa8:	461c      	mov	r4, r3
 8008faa:	ec45 4b10 	vmov	d0, r4, r5
 8008fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb2:	45b8      	cmp	r8, r7
 8008fb4:	bf3a      	itte	cc
 8008fb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fba:	f1a6 0708 	subcc.w	r7, r6, #8
 8008fbe:	2300      	movcs	r3, #0
 8008fc0:	380b      	subs	r0, #11
 8008fc2:	d012      	beq.n	8008fea <__b2d+0x8a>
 8008fc4:	f1c0 0120 	rsb	r1, r0, #32
 8008fc8:	fa23 f401 	lsr.w	r4, r3, r1
 8008fcc:	4082      	lsls	r2, r0
 8008fce:	4322      	orrs	r2, r4
 8008fd0:	4547      	cmp	r7, r8
 8008fd2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008fd6:	bf8c      	ite	hi
 8008fd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008fdc:	2200      	movls	r2, #0
 8008fde:	4083      	lsls	r3, r0
 8008fe0:	40ca      	lsrs	r2, r1
 8008fe2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	e7de      	b.n	8008fa8 <__b2d+0x48>
 8008fea:	ea42 0501 	orr.w	r5, r2, r1
 8008fee:	e7db      	b.n	8008fa8 <__b2d+0x48>
 8008ff0:	3ff00000 	.word	0x3ff00000

08008ff4 <__d2b>:
 8008ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	ec59 8b10 	vmov	r8, r9, d0
 8009000:	4616      	mov	r6, r2
 8009002:	f7ff fc1b 	bl	800883c <_Balloc>
 8009006:	4604      	mov	r4, r0
 8009008:	b930      	cbnz	r0, 8009018 <__d2b+0x24>
 800900a:	4602      	mov	r2, r0
 800900c:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <__d2b+0xac>)
 800900e:	4825      	ldr	r0, [pc, #148]	; (80090a4 <__d2b+0xb0>)
 8009010:	f240 310f 	movw	r1, #783	; 0x30f
 8009014:	f001 fc00 	bl	800a818 <__assert_func>
 8009018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800901c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009020:	bb2d      	cbnz	r5, 800906e <__d2b+0x7a>
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	f1b8 0300 	subs.w	r3, r8, #0
 8009028:	d026      	beq.n	8009078 <__d2b+0x84>
 800902a:	4668      	mov	r0, sp
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	f7ff fd17 	bl	8008a60 <__lo0bits>
 8009032:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009036:	b1e8      	cbz	r0, 8009074 <__d2b+0x80>
 8009038:	f1c0 0320 	rsb	r3, r0, #32
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	430b      	orrs	r3, r1
 8009042:	40c2      	lsrs	r2, r0
 8009044:	6163      	str	r3, [r4, #20]
 8009046:	9201      	str	r2, [sp, #4]
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	61a3      	str	r3, [r4, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf14      	ite	ne
 8009050:	2202      	movne	r2, #2
 8009052:	2201      	moveq	r2, #1
 8009054:	6122      	str	r2, [r4, #16]
 8009056:	b1bd      	cbz	r5, 8009088 <__d2b+0x94>
 8009058:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800905c:	4405      	add	r5, r0
 800905e:	603d      	str	r5, [r7, #0]
 8009060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4620      	mov	r0, r4
 8009068:	b003      	add	sp, #12
 800906a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800906e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009072:	e7d6      	b.n	8009022 <__d2b+0x2e>
 8009074:	6161      	str	r1, [r4, #20]
 8009076:	e7e7      	b.n	8009048 <__d2b+0x54>
 8009078:	a801      	add	r0, sp, #4
 800907a:	f7ff fcf1 	bl	8008a60 <__lo0bits>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	6163      	str	r3, [r4, #20]
 8009082:	3020      	adds	r0, #32
 8009084:	2201      	movs	r2, #1
 8009086:	e7e5      	b.n	8009054 <__d2b+0x60>
 8009088:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800908c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009090:	6038      	str	r0, [r7, #0]
 8009092:	6918      	ldr	r0, [r3, #16]
 8009094:	f7ff fcc4 	bl	8008a20 <__hi0bits>
 8009098:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800909c:	e7e2      	b.n	8009064 <__d2b+0x70>
 800909e:	bf00      	nop
 80090a0:	0800b73d 	.word	0x0800b73d
 80090a4:	0800b74e 	.word	0x0800b74e

080090a8 <__ratio>:
 80090a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4688      	mov	r8, r1
 80090ae:	4669      	mov	r1, sp
 80090b0:	4681      	mov	r9, r0
 80090b2:	f7ff ff55 	bl	8008f60 <__b2d>
 80090b6:	a901      	add	r1, sp, #4
 80090b8:	4640      	mov	r0, r8
 80090ba:	ec55 4b10 	vmov	r4, r5, d0
 80090be:	f7ff ff4f 	bl	8008f60 <__b2d>
 80090c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090ca:	eba3 0c02 	sub.w	ip, r3, r2
 80090ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090d8:	ec51 0b10 	vmov	r0, r1, d0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfd6      	itet	le
 80090e0:	460a      	movle	r2, r1
 80090e2:	462a      	movgt	r2, r5
 80090e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090e8:	468b      	mov	fp, r1
 80090ea:	462f      	mov	r7, r5
 80090ec:	bfd4      	ite	le
 80090ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80090f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090f6:	4620      	mov	r0, r4
 80090f8:	ee10 2a10 	vmov	r2, s0
 80090fc:	465b      	mov	r3, fp
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fbb4 	bl	800086c <__aeabi_ddiv>
 8009104:	ec41 0b10 	vmov	d0, r0, r1
 8009108:	b003      	add	sp, #12
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800910e <__copybits>:
 800910e:	3901      	subs	r1, #1
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	1149      	asrs	r1, r1, #5
 8009114:	6914      	ldr	r4, [r2, #16]
 8009116:	3101      	adds	r1, #1
 8009118:	f102 0314 	add.w	r3, r2, #20
 800911c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009120:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009124:	1f05      	subs	r5, r0, #4
 8009126:	42a3      	cmp	r3, r4
 8009128:	d30c      	bcc.n	8009144 <__copybits+0x36>
 800912a:	1aa3      	subs	r3, r4, r2
 800912c:	3b11      	subs	r3, #17
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	3211      	adds	r2, #17
 8009134:	42a2      	cmp	r2, r4
 8009136:	bf88      	it	hi
 8009138:	2300      	movhi	r3, #0
 800913a:	4418      	add	r0, r3
 800913c:	2300      	movs	r3, #0
 800913e:	4288      	cmp	r0, r1
 8009140:	d305      	bcc.n	800914e <__copybits+0x40>
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	f853 6b04 	ldr.w	r6, [r3], #4
 8009148:	f845 6f04 	str.w	r6, [r5, #4]!
 800914c:	e7eb      	b.n	8009126 <__copybits+0x18>
 800914e:	f840 3b04 	str.w	r3, [r0], #4
 8009152:	e7f4      	b.n	800913e <__copybits+0x30>

08009154 <__any_on>:
 8009154:	f100 0214 	add.w	r2, r0, #20
 8009158:	6900      	ldr	r0, [r0, #16]
 800915a:	114b      	asrs	r3, r1, #5
 800915c:	4298      	cmp	r0, r3
 800915e:	b510      	push	{r4, lr}
 8009160:	db11      	blt.n	8009186 <__any_on+0x32>
 8009162:	dd0a      	ble.n	800917a <__any_on+0x26>
 8009164:	f011 011f 	ands.w	r1, r1, #31
 8009168:	d007      	beq.n	800917a <__any_on+0x26>
 800916a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800916e:	fa24 f001 	lsr.w	r0, r4, r1
 8009172:	fa00 f101 	lsl.w	r1, r0, r1
 8009176:	428c      	cmp	r4, r1
 8009178:	d10b      	bne.n	8009192 <__any_on+0x3e>
 800917a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800917e:	4293      	cmp	r3, r2
 8009180:	d803      	bhi.n	800918a <__any_on+0x36>
 8009182:	2000      	movs	r0, #0
 8009184:	bd10      	pop	{r4, pc}
 8009186:	4603      	mov	r3, r0
 8009188:	e7f7      	b.n	800917a <__any_on+0x26>
 800918a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800918e:	2900      	cmp	r1, #0
 8009190:	d0f5      	beq.n	800917e <__any_on+0x2a>
 8009192:	2001      	movs	r0, #1
 8009194:	e7f6      	b.n	8009184 <__any_on+0x30>

08009196 <sulp>:
 8009196:	b570      	push	{r4, r5, r6, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	460d      	mov	r5, r1
 800919c:	ec45 4b10 	vmov	d0, r4, r5
 80091a0:	4616      	mov	r6, r2
 80091a2:	f7ff feb7 	bl	8008f14 <__ulp>
 80091a6:	ec51 0b10 	vmov	r0, r1, d0
 80091aa:	b17e      	cbz	r6, 80091cc <sulp+0x36>
 80091ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dd09      	ble.n	80091cc <sulp+0x36>
 80091b8:	051b      	lsls	r3, r3, #20
 80091ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091be:	2400      	movs	r4, #0
 80091c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091c4:	4622      	mov	r2, r4
 80091c6:	462b      	mov	r3, r5
 80091c8:	f7f7 fa26 	bl	8000618 <__aeabi_dmul>
 80091cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080091d0 <_strtod_l>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	ed2d 8b02 	vpush	{d8}
 80091d8:	b09b      	sub	sp, #108	; 0x6c
 80091da:	4604      	mov	r4, r0
 80091dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80091de:	2200      	movs	r2, #0
 80091e0:	9216      	str	r2, [sp, #88]	; 0x58
 80091e2:	460d      	mov	r5, r1
 80091e4:	f04f 0800 	mov.w	r8, #0
 80091e8:	f04f 0900 	mov.w	r9, #0
 80091ec:	460a      	mov	r2, r1
 80091ee:	9215      	str	r2, [sp, #84]	; 0x54
 80091f0:	7811      	ldrb	r1, [r2, #0]
 80091f2:	292b      	cmp	r1, #43	; 0x2b
 80091f4:	d04c      	beq.n	8009290 <_strtod_l+0xc0>
 80091f6:	d83a      	bhi.n	800926e <_strtod_l+0x9e>
 80091f8:	290d      	cmp	r1, #13
 80091fa:	d834      	bhi.n	8009266 <_strtod_l+0x96>
 80091fc:	2908      	cmp	r1, #8
 80091fe:	d834      	bhi.n	800926a <_strtod_l+0x9a>
 8009200:	2900      	cmp	r1, #0
 8009202:	d03d      	beq.n	8009280 <_strtod_l+0xb0>
 8009204:	2200      	movs	r2, #0
 8009206:	920a      	str	r2, [sp, #40]	; 0x28
 8009208:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800920a:	7832      	ldrb	r2, [r6, #0]
 800920c:	2a30      	cmp	r2, #48	; 0x30
 800920e:	f040 80b4 	bne.w	800937a <_strtod_l+0x1aa>
 8009212:	7872      	ldrb	r2, [r6, #1]
 8009214:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009218:	2a58      	cmp	r2, #88	; 0x58
 800921a:	d170      	bne.n	80092fe <_strtod_l+0x12e>
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	ab16      	add	r3, sp, #88	; 0x58
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4a8e      	ldr	r2, [pc, #568]	; (8009460 <_strtod_l+0x290>)
 8009228:	ab17      	add	r3, sp, #92	; 0x5c
 800922a:	a915      	add	r1, sp, #84	; 0x54
 800922c:	4620      	mov	r0, r4
 800922e:	f001 fb8f 	bl	800a950 <__gethex>
 8009232:	f010 070f 	ands.w	r7, r0, #15
 8009236:	4605      	mov	r5, r0
 8009238:	d005      	beq.n	8009246 <_strtod_l+0x76>
 800923a:	2f06      	cmp	r7, #6
 800923c:	d12a      	bne.n	8009294 <_strtod_l+0xc4>
 800923e:	3601      	adds	r6, #1
 8009240:	2300      	movs	r3, #0
 8009242:	9615      	str	r6, [sp, #84]	; 0x54
 8009244:	930a      	str	r3, [sp, #40]	; 0x28
 8009246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009248:	2b00      	cmp	r3, #0
 800924a:	f040 857f 	bne.w	8009d4c <_strtod_l+0xb7c>
 800924e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009250:	b1db      	cbz	r3, 800928a <_strtod_l+0xba>
 8009252:	4642      	mov	r2, r8
 8009254:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009258:	ec43 2b10 	vmov	d0, r2, r3
 800925c:	b01b      	add	sp, #108	; 0x6c
 800925e:	ecbd 8b02 	vpop	{d8}
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	2920      	cmp	r1, #32
 8009268:	d1cc      	bne.n	8009204 <_strtod_l+0x34>
 800926a:	3201      	adds	r2, #1
 800926c:	e7bf      	b.n	80091ee <_strtod_l+0x1e>
 800926e:	292d      	cmp	r1, #45	; 0x2d
 8009270:	d1c8      	bne.n	8009204 <_strtod_l+0x34>
 8009272:	2101      	movs	r1, #1
 8009274:	910a      	str	r1, [sp, #40]	; 0x28
 8009276:	1c51      	adds	r1, r2, #1
 8009278:	9115      	str	r1, [sp, #84]	; 0x54
 800927a:	7852      	ldrb	r2, [r2, #1]
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1c3      	bne.n	8009208 <_strtod_l+0x38>
 8009280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009282:	9515      	str	r5, [sp, #84]	; 0x54
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 855f 	bne.w	8009d48 <_strtod_l+0xb78>
 800928a:	4642      	mov	r2, r8
 800928c:	464b      	mov	r3, r9
 800928e:	e7e3      	b.n	8009258 <_strtod_l+0x88>
 8009290:	2100      	movs	r1, #0
 8009292:	e7ef      	b.n	8009274 <_strtod_l+0xa4>
 8009294:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009296:	b13a      	cbz	r2, 80092a8 <_strtod_l+0xd8>
 8009298:	2135      	movs	r1, #53	; 0x35
 800929a:	a818      	add	r0, sp, #96	; 0x60
 800929c:	f7ff ff37 	bl	800910e <__copybits>
 80092a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7ff fb0a 	bl	80088bc <_Bfree>
 80092a8:	3f01      	subs	r7, #1
 80092aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092ac:	2f04      	cmp	r7, #4
 80092ae:	d806      	bhi.n	80092be <_strtod_l+0xee>
 80092b0:	e8df f007 	tbb	[pc, r7]
 80092b4:	201d0314 	.word	0x201d0314
 80092b8:	14          	.byte	0x14
 80092b9:	00          	.byte	0x00
 80092ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80092be:	05e9      	lsls	r1, r5, #23
 80092c0:	bf48      	it	mi
 80092c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80092c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092ca:	0d1b      	lsrs	r3, r3, #20
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1b9      	bne.n	8009246 <_strtod_l+0x76>
 80092d2:	f7fe faf9 	bl	80078c8 <__errno>
 80092d6:	2322      	movs	r3, #34	; 0x22
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	e7b4      	b.n	8009246 <_strtod_l+0x76>
 80092dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80092e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80092e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80092e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80092ec:	e7e7      	b.n	80092be <_strtod_l+0xee>
 80092ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009468 <_strtod_l+0x298>
 80092f2:	e7e4      	b.n	80092be <_strtod_l+0xee>
 80092f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80092f8:	f04f 38ff 	mov.w	r8, #4294967295
 80092fc:	e7df      	b.n	80092be <_strtod_l+0xee>
 80092fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	9215      	str	r2, [sp, #84]	; 0x54
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b30      	cmp	r3, #48	; 0x30
 8009308:	d0f9      	beq.n	80092fe <_strtod_l+0x12e>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d09b      	beq.n	8009246 <_strtod_l+0x76>
 800930e:	2301      	movs	r3, #1
 8009310:	f04f 0a00 	mov.w	sl, #0
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009318:	930b      	str	r3, [sp, #44]	; 0x2c
 800931a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800931e:	46d3      	mov	fp, sl
 8009320:	220a      	movs	r2, #10
 8009322:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009324:	7806      	ldrb	r6, [r0, #0]
 8009326:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800932a:	b2d9      	uxtb	r1, r3
 800932c:	2909      	cmp	r1, #9
 800932e:	d926      	bls.n	800937e <_strtod_l+0x1ae>
 8009330:	494c      	ldr	r1, [pc, #304]	; (8009464 <_strtod_l+0x294>)
 8009332:	2201      	movs	r2, #1
 8009334:	f001 fa22 	bl	800a77c <strncmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	d030      	beq.n	800939e <_strtod_l+0x1ce>
 800933c:	2000      	movs	r0, #0
 800933e:	4632      	mov	r2, r6
 8009340:	9005      	str	r0, [sp, #20]
 8009342:	465e      	mov	r6, fp
 8009344:	4603      	mov	r3, r0
 8009346:	2a65      	cmp	r2, #101	; 0x65
 8009348:	d001      	beq.n	800934e <_strtod_l+0x17e>
 800934a:	2a45      	cmp	r2, #69	; 0x45
 800934c:	d113      	bne.n	8009376 <_strtod_l+0x1a6>
 800934e:	b91e      	cbnz	r6, 8009358 <_strtod_l+0x188>
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	4302      	orrs	r2, r0
 8009354:	d094      	beq.n	8009280 <_strtod_l+0xb0>
 8009356:	2600      	movs	r6, #0
 8009358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800935a:	1c6a      	adds	r2, r5, #1
 800935c:	9215      	str	r2, [sp, #84]	; 0x54
 800935e:	786a      	ldrb	r2, [r5, #1]
 8009360:	2a2b      	cmp	r2, #43	; 0x2b
 8009362:	d074      	beq.n	800944e <_strtod_l+0x27e>
 8009364:	2a2d      	cmp	r2, #45	; 0x2d
 8009366:	d078      	beq.n	800945a <_strtod_l+0x28a>
 8009368:	f04f 0c00 	mov.w	ip, #0
 800936c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009370:	2909      	cmp	r1, #9
 8009372:	d97f      	bls.n	8009474 <_strtod_l+0x2a4>
 8009374:	9515      	str	r5, [sp, #84]	; 0x54
 8009376:	2700      	movs	r7, #0
 8009378:	e09e      	b.n	80094b8 <_strtod_l+0x2e8>
 800937a:	2300      	movs	r3, #0
 800937c:	e7c8      	b.n	8009310 <_strtod_l+0x140>
 800937e:	f1bb 0f08 	cmp.w	fp, #8
 8009382:	bfd8      	it	le
 8009384:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009386:	f100 0001 	add.w	r0, r0, #1
 800938a:	bfda      	itte	le
 800938c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009390:	9309      	strle	r3, [sp, #36]	; 0x24
 8009392:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009396:	f10b 0b01 	add.w	fp, fp, #1
 800939a:	9015      	str	r0, [sp, #84]	; 0x54
 800939c:	e7c1      	b.n	8009322 <_strtod_l+0x152>
 800939e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	9215      	str	r2, [sp, #84]	; 0x54
 80093a4:	785a      	ldrb	r2, [r3, #1]
 80093a6:	f1bb 0f00 	cmp.w	fp, #0
 80093aa:	d037      	beq.n	800941c <_strtod_l+0x24c>
 80093ac:	9005      	str	r0, [sp, #20]
 80093ae:	465e      	mov	r6, fp
 80093b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093b4:	2b09      	cmp	r3, #9
 80093b6:	d912      	bls.n	80093de <_strtod_l+0x20e>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7c4      	b.n	8009346 <_strtod_l+0x176>
 80093bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	9215      	str	r2, [sp, #84]	; 0x54
 80093c2:	785a      	ldrb	r2, [r3, #1]
 80093c4:	3001      	adds	r0, #1
 80093c6:	2a30      	cmp	r2, #48	; 0x30
 80093c8:	d0f8      	beq.n	80093bc <_strtod_l+0x1ec>
 80093ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80093ce:	2b08      	cmp	r3, #8
 80093d0:	f200 84c1 	bhi.w	8009d56 <_strtod_l+0xb86>
 80093d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d6:	9005      	str	r0, [sp, #20]
 80093d8:	2000      	movs	r0, #0
 80093da:	930b      	str	r3, [sp, #44]	; 0x2c
 80093dc:	4606      	mov	r6, r0
 80093de:	3a30      	subs	r2, #48	; 0x30
 80093e0:	f100 0301 	add.w	r3, r0, #1
 80093e4:	d014      	beq.n	8009410 <_strtod_l+0x240>
 80093e6:	9905      	ldr	r1, [sp, #20]
 80093e8:	4419      	add	r1, r3
 80093ea:	9105      	str	r1, [sp, #20]
 80093ec:	4633      	mov	r3, r6
 80093ee:	eb00 0c06 	add.w	ip, r0, r6
 80093f2:	210a      	movs	r1, #10
 80093f4:	4563      	cmp	r3, ip
 80093f6:	d113      	bne.n	8009420 <_strtod_l+0x250>
 80093f8:	1833      	adds	r3, r6, r0
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	f106 0601 	add.w	r6, r6, #1
 8009400:	4406      	add	r6, r0
 8009402:	dc1a      	bgt.n	800943a <_strtod_l+0x26a>
 8009404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009406:	230a      	movs	r3, #10
 8009408:	fb03 2301 	mla	r3, r3, r1, r2
 800940c:	9309      	str	r3, [sp, #36]	; 0x24
 800940e:	2300      	movs	r3, #0
 8009410:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009412:	1c51      	adds	r1, r2, #1
 8009414:	9115      	str	r1, [sp, #84]	; 0x54
 8009416:	7852      	ldrb	r2, [r2, #1]
 8009418:	4618      	mov	r0, r3
 800941a:	e7c9      	b.n	80093b0 <_strtod_l+0x1e0>
 800941c:	4658      	mov	r0, fp
 800941e:	e7d2      	b.n	80093c6 <_strtod_l+0x1f6>
 8009420:	2b08      	cmp	r3, #8
 8009422:	f103 0301 	add.w	r3, r3, #1
 8009426:	dc03      	bgt.n	8009430 <_strtod_l+0x260>
 8009428:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800942a:	434f      	muls	r7, r1
 800942c:	9709      	str	r7, [sp, #36]	; 0x24
 800942e:	e7e1      	b.n	80093f4 <_strtod_l+0x224>
 8009430:	2b10      	cmp	r3, #16
 8009432:	bfd8      	it	le
 8009434:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009438:	e7dc      	b.n	80093f4 <_strtod_l+0x224>
 800943a:	2e10      	cmp	r6, #16
 800943c:	bfdc      	itt	le
 800943e:	230a      	movle	r3, #10
 8009440:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009444:	e7e3      	b.n	800940e <_strtod_l+0x23e>
 8009446:	2300      	movs	r3, #0
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	2301      	movs	r3, #1
 800944c:	e780      	b.n	8009350 <_strtod_l+0x180>
 800944e:	f04f 0c00 	mov.w	ip, #0
 8009452:	1caa      	adds	r2, r5, #2
 8009454:	9215      	str	r2, [sp, #84]	; 0x54
 8009456:	78aa      	ldrb	r2, [r5, #2]
 8009458:	e788      	b.n	800936c <_strtod_l+0x19c>
 800945a:	f04f 0c01 	mov.w	ip, #1
 800945e:	e7f8      	b.n	8009452 <_strtod_l+0x282>
 8009460:	0800b8a8 	.word	0x0800b8a8
 8009464:	0800b8a4 	.word	0x0800b8a4
 8009468:	7ff00000 	.word	0x7ff00000
 800946c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800946e:	1c51      	adds	r1, r2, #1
 8009470:	9115      	str	r1, [sp, #84]	; 0x54
 8009472:	7852      	ldrb	r2, [r2, #1]
 8009474:	2a30      	cmp	r2, #48	; 0x30
 8009476:	d0f9      	beq.n	800946c <_strtod_l+0x29c>
 8009478:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800947c:	2908      	cmp	r1, #8
 800947e:	f63f af7a 	bhi.w	8009376 <_strtod_l+0x1a6>
 8009482:	3a30      	subs	r2, #48	; 0x30
 8009484:	9208      	str	r2, [sp, #32]
 8009486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009488:	920c      	str	r2, [sp, #48]	; 0x30
 800948a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800948c:	1c57      	adds	r7, r2, #1
 800948e:	9715      	str	r7, [sp, #84]	; 0x54
 8009490:	7852      	ldrb	r2, [r2, #1]
 8009492:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009496:	f1be 0f09 	cmp.w	lr, #9
 800949a:	d938      	bls.n	800950e <_strtod_l+0x33e>
 800949c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800949e:	1a7f      	subs	r7, r7, r1
 80094a0:	2f08      	cmp	r7, #8
 80094a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80094a6:	dc03      	bgt.n	80094b0 <_strtod_l+0x2e0>
 80094a8:	9908      	ldr	r1, [sp, #32]
 80094aa:	428f      	cmp	r7, r1
 80094ac:	bfa8      	it	ge
 80094ae:	460f      	movge	r7, r1
 80094b0:	f1bc 0f00 	cmp.w	ip, #0
 80094b4:	d000      	beq.n	80094b8 <_strtod_l+0x2e8>
 80094b6:	427f      	negs	r7, r7
 80094b8:	2e00      	cmp	r6, #0
 80094ba:	d14f      	bne.n	800955c <_strtod_l+0x38c>
 80094bc:	9904      	ldr	r1, [sp, #16]
 80094be:	4301      	orrs	r1, r0
 80094c0:	f47f aec1 	bne.w	8009246 <_strtod_l+0x76>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f47f aedb 	bne.w	8009280 <_strtod_l+0xb0>
 80094ca:	2a69      	cmp	r2, #105	; 0x69
 80094cc:	d029      	beq.n	8009522 <_strtod_l+0x352>
 80094ce:	dc26      	bgt.n	800951e <_strtod_l+0x34e>
 80094d0:	2a49      	cmp	r2, #73	; 0x49
 80094d2:	d026      	beq.n	8009522 <_strtod_l+0x352>
 80094d4:	2a4e      	cmp	r2, #78	; 0x4e
 80094d6:	f47f aed3 	bne.w	8009280 <_strtod_l+0xb0>
 80094da:	499b      	ldr	r1, [pc, #620]	; (8009748 <_strtod_l+0x578>)
 80094dc:	a815      	add	r0, sp, #84	; 0x54
 80094de:	f001 fc77 	bl	800add0 <__match>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f43f aecc 	beq.w	8009280 <_strtod_l+0xb0>
 80094e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b28      	cmp	r3, #40	; 0x28
 80094ee:	d12f      	bne.n	8009550 <_strtod_l+0x380>
 80094f0:	4996      	ldr	r1, [pc, #600]	; (800974c <_strtod_l+0x57c>)
 80094f2:	aa18      	add	r2, sp, #96	; 0x60
 80094f4:	a815      	add	r0, sp, #84	; 0x54
 80094f6:	f001 fc7f 	bl	800adf8 <__hexnan>
 80094fa:	2805      	cmp	r0, #5
 80094fc:	d128      	bne.n	8009550 <_strtod_l+0x380>
 80094fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009504:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009508:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800950c:	e69b      	b.n	8009246 <_strtod_l+0x76>
 800950e:	9f08      	ldr	r7, [sp, #32]
 8009510:	210a      	movs	r1, #10
 8009512:	fb01 2107 	mla	r1, r1, r7, r2
 8009516:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800951a:	9208      	str	r2, [sp, #32]
 800951c:	e7b5      	b.n	800948a <_strtod_l+0x2ba>
 800951e:	2a6e      	cmp	r2, #110	; 0x6e
 8009520:	e7d9      	b.n	80094d6 <_strtod_l+0x306>
 8009522:	498b      	ldr	r1, [pc, #556]	; (8009750 <_strtod_l+0x580>)
 8009524:	a815      	add	r0, sp, #84	; 0x54
 8009526:	f001 fc53 	bl	800add0 <__match>
 800952a:	2800      	cmp	r0, #0
 800952c:	f43f aea8 	beq.w	8009280 <_strtod_l+0xb0>
 8009530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009532:	4988      	ldr	r1, [pc, #544]	; (8009754 <_strtod_l+0x584>)
 8009534:	3b01      	subs	r3, #1
 8009536:	a815      	add	r0, sp, #84	; 0x54
 8009538:	9315      	str	r3, [sp, #84]	; 0x54
 800953a:	f001 fc49 	bl	800add0 <__match>
 800953e:	b910      	cbnz	r0, 8009546 <_strtod_l+0x376>
 8009540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009542:	3301      	adds	r3, #1
 8009544:	9315      	str	r3, [sp, #84]	; 0x54
 8009546:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009764 <_strtod_l+0x594>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	e67a      	b.n	8009246 <_strtod_l+0x76>
 8009550:	4881      	ldr	r0, [pc, #516]	; (8009758 <_strtod_l+0x588>)
 8009552:	f001 f959 	bl	800a808 <nan>
 8009556:	ec59 8b10 	vmov	r8, r9, d0
 800955a:	e674      	b.n	8009246 <_strtod_l+0x76>
 800955c:	9b05      	ldr	r3, [sp, #20]
 800955e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009560:	1afb      	subs	r3, r7, r3
 8009562:	f1bb 0f00 	cmp.w	fp, #0
 8009566:	bf08      	it	eq
 8009568:	46b3      	moveq	fp, r6
 800956a:	2e10      	cmp	r6, #16
 800956c:	9308      	str	r3, [sp, #32]
 800956e:	4635      	mov	r5, r6
 8009570:	bfa8      	it	ge
 8009572:	2510      	movge	r5, #16
 8009574:	f7f6 ffd6 	bl	8000524 <__aeabi_ui2d>
 8009578:	2e09      	cmp	r6, #9
 800957a:	4680      	mov	r8, r0
 800957c:	4689      	mov	r9, r1
 800957e:	dd13      	ble.n	80095a8 <_strtod_l+0x3d8>
 8009580:	4b76      	ldr	r3, [pc, #472]	; (800975c <_strtod_l+0x58c>)
 8009582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800958a:	f7f7 f845 	bl	8000618 <__aeabi_dmul>
 800958e:	4680      	mov	r8, r0
 8009590:	4650      	mov	r0, sl
 8009592:	4689      	mov	r9, r1
 8009594:	f7f6 ffc6 	bl	8000524 <__aeabi_ui2d>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4640      	mov	r0, r8
 800959e:	4649      	mov	r1, r9
 80095a0:	f7f6 fe84 	bl	80002ac <__adddf3>
 80095a4:	4680      	mov	r8, r0
 80095a6:	4689      	mov	r9, r1
 80095a8:	2e0f      	cmp	r6, #15
 80095aa:	dc38      	bgt.n	800961e <_strtod_l+0x44e>
 80095ac:	9b08      	ldr	r3, [sp, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f43f ae49 	beq.w	8009246 <_strtod_l+0x76>
 80095b4:	dd24      	ble.n	8009600 <_strtod_l+0x430>
 80095b6:	2b16      	cmp	r3, #22
 80095b8:	dc0b      	bgt.n	80095d2 <_strtod_l+0x402>
 80095ba:	4968      	ldr	r1, [pc, #416]	; (800975c <_strtod_l+0x58c>)
 80095bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c4:	4642      	mov	r2, r8
 80095c6:	464b      	mov	r3, r9
 80095c8:	f7f7 f826 	bl	8000618 <__aeabi_dmul>
 80095cc:	4680      	mov	r8, r0
 80095ce:	4689      	mov	r9, r1
 80095d0:	e639      	b.n	8009246 <_strtod_l+0x76>
 80095d2:	9a08      	ldr	r2, [sp, #32]
 80095d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80095d8:	4293      	cmp	r3, r2
 80095da:	db20      	blt.n	800961e <_strtod_l+0x44e>
 80095dc:	4c5f      	ldr	r4, [pc, #380]	; (800975c <_strtod_l+0x58c>)
 80095de:	f1c6 060f 	rsb	r6, r6, #15
 80095e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80095e6:	4642      	mov	r2, r8
 80095e8:	464b      	mov	r3, r9
 80095ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ee:	f7f7 f813 	bl	8000618 <__aeabi_dmul>
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	1b9e      	subs	r6, r3, r6
 80095f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80095fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095fe:	e7e3      	b.n	80095c8 <_strtod_l+0x3f8>
 8009600:	9b08      	ldr	r3, [sp, #32]
 8009602:	3316      	adds	r3, #22
 8009604:	db0b      	blt.n	800961e <_strtod_l+0x44e>
 8009606:	9b05      	ldr	r3, [sp, #20]
 8009608:	1bdf      	subs	r7, r3, r7
 800960a:	4b54      	ldr	r3, [pc, #336]	; (800975c <_strtod_l+0x58c>)
 800960c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009614:	4640      	mov	r0, r8
 8009616:	4649      	mov	r1, r9
 8009618:	f7f7 f928 	bl	800086c <__aeabi_ddiv>
 800961c:	e7d6      	b.n	80095cc <_strtod_l+0x3fc>
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	1b75      	subs	r5, r6, r5
 8009622:	441d      	add	r5, r3
 8009624:	2d00      	cmp	r5, #0
 8009626:	dd70      	ble.n	800970a <_strtod_l+0x53a>
 8009628:	f015 030f 	ands.w	r3, r5, #15
 800962c:	d00a      	beq.n	8009644 <_strtod_l+0x474>
 800962e:	494b      	ldr	r1, [pc, #300]	; (800975c <_strtod_l+0x58c>)
 8009630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800963c:	f7f6 ffec 	bl	8000618 <__aeabi_dmul>
 8009640:	4680      	mov	r8, r0
 8009642:	4689      	mov	r9, r1
 8009644:	f035 050f 	bics.w	r5, r5, #15
 8009648:	d04d      	beq.n	80096e6 <_strtod_l+0x516>
 800964a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800964e:	dd22      	ble.n	8009696 <_strtod_l+0x4c6>
 8009650:	2500      	movs	r5, #0
 8009652:	46ab      	mov	fp, r5
 8009654:	9509      	str	r5, [sp, #36]	; 0x24
 8009656:	9505      	str	r5, [sp, #20]
 8009658:	2322      	movs	r3, #34	; 0x22
 800965a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009764 <_strtod_l+0x594>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	f04f 0800 	mov.w	r8, #0
 8009664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	f43f aded 	beq.w	8009246 <_strtod_l+0x76>
 800966c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff f924 	bl	80088bc <_Bfree>
 8009674:	9905      	ldr	r1, [sp, #20]
 8009676:	4620      	mov	r0, r4
 8009678:	f7ff f920 	bl	80088bc <_Bfree>
 800967c:	4659      	mov	r1, fp
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff f91c 	bl	80088bc <_Bfree>
 8009684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff f918 	bl	80088bc <_Bfree>
 800968c:	4629      	mov	r1, r5
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff f914 	bl	80088bc <_Bfree>
 8009694:	e5d7      	b.n	8009246 <_strtod_l+0x76>
 8009696:	4b32      	ldr	r3, [pc, #200]	; (8009760 <_strtod_l+0x590>)
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	2300      	movs	r3, #0
 800969c:	112d      	asrs	r5, r5, #4
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	469a      	mov	sl, r3
 80096a4:	2d01      	cmp	r5, #1
 80096a6:	dc21      	bgt.n	80096ec <_strtod_l+0x51c>
 80096a8:	b10b      	cbz	r3, 80096ae <_strtod_l+0x4de>
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	492c      	ldr	r1, [pc, #176]	; (8009760 <_strtod_l+0x590>)
 80096b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80096b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c0:	f7f6 ffaa 	bl	8000618 <__aeabi_dmul>
 80096c4:	4b27      	ldr	r3, [pc, #156]	; (8009764 <_strtod_l+0x594>)
 80096c6:	460a      	mov	r2, r1
 80096c8:	400b      	ands	r3, r1
 80096ca:	4927      	ldr	r1, [pc, #156]	; (8009768 <_strtod_l+0x598>)
 80096cc:	428b      	cmp	r3, r1
 80096ce:	4680      	mov	r8, r0
 80096d0:	d8be      	bhi.n	8009650 <_strtod_l+0x480>
 80096d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80096d6:	428b      	cmp	r3, r1
 80096d8:	bf86      	itte	hi
 80096da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800976c <_strtod_l+0x59c>
 80096de:	f04f 38ff 	movhi.w	r8, #4294967295
 80096e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80096e6:	2300      	movs	r3, #0
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	e07b      	b.n	80097e4 <_strtod_l+0x614>
 80096ec:	07ea      	lsls	r2, r5, #31
 80096ee:	d505      	bpl.n	80096fc <_strtod_l+0x52c>
 80096f0:	9b04      	ldr	r3, [sp, #16]
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ff8f 	bl	8000618 <__aeabi_dmul>
 80096fa:	2301      	movs	r3, #1
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	3208      	adds	r2, #8
 8009700:	f10a 0a01 	add.w	sl, sl, #1
 8009704:	106d      	asrs	r5, r5, #1
 8009706:	9204      	str	r2, [sp, #16]
 8009708:	e7cc      	b.n	80096a4 <_strtod_l+0x4d4>
 800970a:	d0ec      	beq.n	80096e6 <_strtod_l+0x516>
 800970c:	426d      	negs	r5, r5
 800970e:	f015 020f 	ands.w	r2, r5, #15
 8009712:	d00a      	beq.n	800972a <_strtod_l+0x55a>
 8009714:	4b11      	ldr	r3, [pc, #68]	; (800975c <_strtod_l+0x58c>)
 8009716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800971a:	4640      	mov	r0, r8
 800971c:	4649      	mov	r1, r9
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f7 f8a3 	bl	800086c <__aeabi_ddiv>
 8009726:	4680      	mov	r8, r0
 8009728:	4689      	mov	r9, r1
 800972a:	112d      	asrs	r5, r5, #4
 800972c:	d0db      	beq.n	80096e6 <_strtod_l+0x516>
 800972e:	2d1f      	cmp	r5, #31
 8009730:	dd1e      	ble.n	8009770 <_strtod_l+0x5a0>
 8009732:	2500      	movs	r5, #0
 8009734:	46ab      	mov	fp, r5
 8009736:	9509      	str	r5, [sp, #36]	; 0x24
 8009738:	9505      	str	r5, [sp, #20]
 800973a:	2322      	movs	r3, #34	; 0x22
 800973c:	f04f 0800 	mov.w	r8, #0
 8009740:	f04f 0900 	mov.w	r9, #0
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	e78d      	b.n	8009664 <_strtod_l+0x494>
 8009748:	0800b695 	.word	0x0800b695
 800974c:	0800b8bc 	.word	0x0800b8bc
 8009750:	0800b68d 	.word	0x0800b68d
 8009754:	0800b6c4 	.word	0x0800b6c4
 8009758:	0800ba4d 	.word	0x0800ba4d
 800975c:	0800b7d0 	.word	0x0800b7d0
 8009760:	0800b7a8 	.word	0x0800b7a8
 8009764:	7ff00000 	.word	0x7ff00000
 8009768:	7ca00000 	.word	0x7ca00000
 800976c:	7fefffff 	.word	0x7fefffff
 8009770:	f015 0310 	ands.w	r3, r5, #16
 8009774:	bf18      	it	ne
 8009776:	236a      	movne	r3, #106	; 0x6a
 8009778:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009b1c <_strtod_l+0x94c>
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	4640      	mov	r0, r8
 8009780:	4649      	mov	r1, r9
 8009782:	2300      	movs	r3, #0
 8009784:	07ea      	lsls	r2, r5, #31
 8009786:	d504      	bpl.n	8009792 <_strtod_l+0x5c2>
 8009788:	e9da 2300 	ldrd	r2, r3, [sl]
 800978c:	f7f6 ff44 	bl	8000618 <__aeabi_dmul>
 8009790:	2301      	movs	r3, #1
 8009792:	106d      	asrs	r5, r5, #1
 8009794:	f10a 0a08 	add.w	sl, sl, #8
 8009798:	d1f4      	bne.n	8009784 <_strtod_l+0x5b4>
 800979a:	b10b      	cbz	r3, 80097a0 <_strtod_l+0x5d0>
 800979c:	4680      	mov	r8, r0
 800979e:	4689      	mov	r9, r1
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	b1bb      	cbz	r3, 80097d4 <_strtod_l+0x604>
 80097a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80097a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	4649      	mov	r1, r9
 80097b0:	dd10      	ble.n	80097d4 <_strtod_l+0x604>
 80097b2:	2b1f      	cmp	r3, #31
 80097b4:	f340 811e 	ble.w	80099f4 <_strtod_l+0x824>
 80097b8:	2b34      	cmp	r3, #52	; 0x34
 80097ba:	bfde      	ittt	le
 80097bc:	f04f 33ff 	movle.w	r3, #4294967295
 80097c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097c4:	4093      	lslle	r3, r2
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	bfcc      	ite	gt
 80097cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80097d0:	ea03 0901 	andle.w	r9, r3, r1
 80097d4:	2200      	movs	r2, #0
 80097d6:	2300      	movs	r3, #0
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f7 f984 	bl	8000ae8 <__aeabi_dcmpeq>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1a6      	bne.n	8009732 <_strtod_l+0x562>
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097ea:	4633      	mov	r3, r6
 80097ec:	465a      	mov	r2, fp
 80097ee:	4620      	mov	r0, r4
 80097f0:	f7ff f8cc 	bl	800898c <__s2b>
 80097f4:	9009      	str	r0, [sp, #36]	; 0x24
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f af2a 	beq.w	8009650 <_strtod_l+0x480>
 80097fc:	9a08      	ldr	r2, [sp, #32]
 80097fe:	9b05      	ldr	r3, [sp, #20]
 8009800:	2a00      	cmp	r2, #0
 8009802:	eba3 0307 	sub.w	r3, r3, r7
 8009806:	bfa8      	it	ge
 8009808:	2300      	movge	r3, #0
 800980a:	930c      	str	r3, [sp, #48]	; 0x30
 800980c:	2500      	movs	r5, #0
 800980e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009812:	9312      	str	r3, [sp, #72]	; 0x48
 8009814:	46ab      	mov	fp, r5
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	4620      	mov	r0, r4
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	f7ff f80e 	bl	800883c <_Balloc>
 8009820:	9005      	str	r0, [sp, #20]
 8009822:	2800      	cmp	r0, #0
 8009824:	f43f af18 	beq.w	8009658 <_strtod_l+0x488>
 8009828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	3202      	adds	r2, #2
 800982e:	f103 010c 	add.w	r1, r3, #12
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f7fe f873 	bl	8007920 <memcpy>
 800983a:	ec49 8b10 	vmov	d0, r8, r9
 800983e:	aa18      	add	r2, sp, #96	; 0x60
 8009840:	a917      	add	r1, sp, #92	; 0x5c
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fbd6 	bl	8008ff4 <__d2b>
 8009848:	ec49 8b18 	vmov	d8, r8, r9
 800984c:	9016      	str	r0, [sp, #88]	; 0x58
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f af02 	beq.w	8009658 <_strtod_l+0x488>
 8009854:	2101      	movs	r1, #1
 8009856:	4620      	mov	r0, r4
 8009858:	f7ff f930 	bl	8008abc <__i2b>
 800985c:	4683      	mov	fp, r0
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f aefa 	beq.w	8009658 <_strtod_l+0x488>
 8009864:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009866:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009868:	2e00      	cmp	r6, #0
 800986a:	bfab      	itete	ge
 800986c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800986e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009870:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009872:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009876:	bfac      	ite	ge
 8009878:	eb06 0a03 	addge.w	sl, r6, r3
 800987c:	1b9f      	sublt	r7, r3, r6
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	1af6      	subs	r6, r6, r3
 8009882:	4416      	add	r6, r2
 8009884:	4ba0      	ldr	r3, [pc, #640]	; (8009b08 <_strtod_l+0x938>)
 8009886:	3e01      	subs	r6, #1
 8009888:	429e      	cmp	r6, r3
 800988a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800988e:	f280 80c4 	bge.w	8009a1a <_strtod_l+0x84a>
 8009892:	1b9b      	subs	r3, r3, r6
 8009894:	2b1f      	cmp	r3, #31
 8009896:	eba2 0203 	sub.w	r2, r2, r3
 800989a:	f04f 0101 	mov.w	r1, #1
 800989e:	f300 80b0 	bgt.w	8009a02 <_strtod_l+0x832>
 80098a2:	fa01 f303 	lsl.w	r3, r1, r3
 80098a6:	930e      	str	r3, [sp, #56]	; 0x38
 80098a8:	2300      	movs	r3, #0
 80098aa:	930d      	str	r3, [sp, #52]	; 0x34
 80098ac:	eb0a 0602 	add.w	r6, sl, r2
 80098b0:	9b04      	ldr	r3, [sp, #16]
 80098b2:	45b2      	cmp	sl, r6
 80098b4:	4417      	add	r7, r2
 80098b6:	441f      	add	r7, r3
 80098b8:	4653      	mov	r3, sl
 80098ba:	bfa8      	it	ge
 80098bc:	4633      	movge	r3, r6
 80098be:	42bb      	cmp	r3, r7
 80098c0:	bfa8      	it	ge
 80098c2:	463b      	movge	r3, r7
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bfc2      	ittt	gt
 80098c8:	1af6      	subgt	r6, r6, r3
 80098ca:	1aff      	subgt	r7, r7, r3
 80098cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80098d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dd17      	ble.n	8009906 <_strtod_l+0x736>
 80098d6:	4659      	mov	r1, fp
 80098d8:	461a      	mov	r2, r3
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff f9ae 	bl	8008c3c <__pow5mult>
 80098e0:	4683      	mov	fp, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f43f aeb8 	beq.w	8009658 <_strtod_l+0x488>
 80098e8:	4601      	mov	r1, r0
 80098ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7ff f8fb 	bl	8008ae8 <__multiply>
 80098f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f43f aeaf 	beq.w	8009658 <_strtod_l+0x488>
 80098fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7fe ffdd 	bl	80088bc <_Bfree>
 8009902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009904:	9316      	str	r3, [sp, #88]	; 0x58
 8009906:	2e00      	cmp	r6, #0
 8009908:	f300 808c 	bgt.w	8009a24 <_strtod_l+0x854>
 800990c:	9b08      	ldr	r3, [sp, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd08      	ble.n	8009924 <_strtod_l+0x754>
 8009912:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009914:	9905      	ldr	r1, [sp, #20]
 8009916:	4620      	mov	r0, r4
 8009918:	f7ff f990 	bl	8008c3c <__pow5mult>
 800991c:	9005      	str	r0, [sp, #20]
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f ae9a 	beq.w	8009658 <_strtod_l+0x488>
 8009924:	2f00      	cmp	r7, #0
 8009926:	dd08      	ble.n	800993a <_strtod_l+0x76a>
 8009928:	9905      	ldr	r1, [sp, #20]
 800992a:	463a      	mov	r2, r7
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff f9df 	bl	8008cf0 <__lshift>
 8009932:	9005      	str	r0, [sp, #20]
 8009934:	2800      	cmp	r0, #0
 8009936:	f43f ae8f 	beq.w	8009658 <_strtod_l+0x488>
 800993a:	f1ba 0f00 	cmp.w	sl, #0
 800993e:	dd08      	ble.n	8009952 <_strtod_l+0x782>
 8009940:	4659      	mov	r1, fp
 8009942:	4652      	mov	r2, sl
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff f9d3 	bl	8008cf0 <__lshift>
 800994a:	4683      	mov	fp, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	f43f ae83 	beq.w	8009658 <_strtod_l+0x488>
 8009952:	9a05      	ldr	r2, [sp, #20]
 8009954:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff fa52 	bl	8008e00 <__mdiff>
 800995c:	4605      	mov	r5, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f ae7a 	beq.w	8009658 <_strtod_l+0x488>
 8009964:	68c3      	ldr	r3, [r0, #12]
 8009966:	930b      	str	r3, [sp, #44]	; 0x2c
 8009968:	2300      	movs	r3, #0
 800996a:	60c3      	str	r3, [r0, #12]
 800996c:	4659      	mov	r1, fp
 800996e:	f7ff fa2b 	bl	8008dc8 <__mcmp>
 8009972:	2800      	cmp	r0, #0
 8009974:	da60      	bge.n	8009a38 <_strtod_l+0x868>
 8009976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009978:	ea53 0308 	orrs.w	r3, r3, r8
 800997c:	f040 8084 	bne.w	8009a88 <_strtod_l+0x8b8>
 8009980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009984:	2b00      	cmp	r3, #0
 8009986:	d17f      	bne.n	8009a88 <_strtod_l+0x8b8>
 8009988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800998c:	0d1b      	lsrs	r3, r3, #20
 800998e:	051b      	lsls	r3, r3, #20
 8009990:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009994:	d978      	bls.n	8009a88 <_strtod_l+0x8b8>
 8009996:	696b      	ldr	r3, [r5, #20]
 8009998:	b913      	cbnz	r3, 80099a0 <_strtod_l+0x7d0>
 800999a:	692b      	ldr	r3, [r5, #16]
 800999c:	2b01      	cmp	r3, #1
 800999e:	dd73      	ble.n	8009a88 <_strtod_l+0x8b8>
 80099a0:	4629      	mov	r1, r5
 80099a2:	2201      	movs	r2, #1
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff f9a3 	bl	8008cf0 <__lshift>
 80099aa:	4659      	mov	r1, fp
 80099ac:	4605      	mov	r5, r0
 80099ae:	f7ff fa0b 	bl	8008dc8 <__mcmp>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	dd68      	ble.n	8009a88 <_strtod_l+0x8b8>
 80099b6:	9904      	ldr	r1, [sp, #16]
 80099b8:	4a54      	ldr	r2, [pc, #336]	; (8009b0c <_strtod_l+0x93c>)
 80099ba:	464b      	mov	r3, r9
 80099bc:	2900      	cmp	r1, #0
 80099be:	f000 8084 	beq.w	8009aca <_strtod_l+0x8fa>
 80099c2:	ea02 0109 	and.w	r1, r2, r9
 80099c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099ca:	dc7e      	bgt.n	8009aca <_strtod_l+0x8fa>
 80099cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099d0:	f77f aeb3 	ble.w	800973a <_strtod_l+0x56a>
 80099d4:	4b4e      	ldr	r3, [pc, #312]	; (8009b10 <_strtod_l+0x940>)
 80099d6:	4640      	mov	r0, r8
 80099d8:	4649      	mov	r1, r9
 80099da:	2200      	movs	r2, #0
 80099dc:	f7f6 fe1c 	bl	8000618 <__aeabi_dmul>
 80099e0:	4b4a      	ldr	r3, [pc, #296]	; (8009b0c <_strtod_l+0x93c>)
 80099e2:	400b      	ands	r3, r1
 80099e4:	4680      	mov	r8, r0
 80099e6:	4689      	mov	r9, r1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f47f ae3f 	bne.w	800966c <_strtod_l+0x49c>
 80099ee:	2322      	movs	r3, #34	; 0x22
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	e63b      	b.n	800966c <_strtod_l+0x49c>
 80099f4:	f04f 32ff 	mov.w	r2, #4294967295
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	ea03 0808 	and.w	r8, r3, r8
 8009a00:	e6e8      	b.n	80097d4 <_strtod_l+0x604>
 8009a02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009a06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009a0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009a0e:	36e2      	adds	r6, #226	; 0xe2
 8009a10:	fa01 f306 	lsl.w	r3, r1, r6
 8009a14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009a18:	e748      	b.n	80098ac <_strtod_l+0x6dc>
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009a22:	e743      	b.n	80098ac <_strtod_l+0x6dc>
 8009a24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a26:	4632      	mov	r2, r6
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff f961 	bl	8008cf0 <__lshift>
 8009a2e:	9016      	str	r0, [sp, #88]	; 0x58
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f47f af6b 	bne.w	800990c <_strtod_l+0x73c>
 8009a36:	e60f      	b.n	8009658 <_strtod_l+0x488>
 8009a38:	46ca      	mov	sl, r9
 8009a3a:	d171      	bne.n	8009b20 <_strtod_l+0x950>
 8009a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a42:	b352      	cbz	r2, 8009a9a <_strtod_l+0x8ca>
 8009a44:	4a33      	ldr	r2, [pc, #204]	; (8009b14 <_strtod_l+0x944>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d12a      	bne.n	8009aa0 <_strtod_l+0x8d0>
 8009a4a:	9b04      	ldr	r3, [sp, #16]
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	b1fb      	cbz	r3, 8009a90 <_strtod_l+0x8c0>
 8009a50:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <_strtod_l+0x93c>)
 8009a52:	ea09 0303 	and.w	r3, r9, r3
 8009a56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5e:	d81a      	bhi.n	8009a96 <_strtod_l+0x8c6>
 8009a60:	0d1b      	lsrs	r3, r3, #20
 8009a62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	d118      	bne.n	8009aa0 <_strtod_l+0x8d0>
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <_strtod_l+0x948>)
 8009a70:	459a      	cmp	sl, r3
 8009a72:	d102      	bne.n	8009a7a <_strtod_l+0x8aa>
 8009a74:	3101      	adds	r1, #1
 8009a76:	f43f adef 	beq.w	8009658 <_strtod_l+0x488>
 8009a7a:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <_strtod_l+0x93c>)
 8009a7c:	ea0a 0303 	and.w	r3, sl, r3
 8009a80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009a84:	f04f 0800 	mov.w	r8, #0
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1a2      	bne.n	80099d4 <_strtod_l+0x804>
 8009a8e:	e5ed      	b.n	800966c <_strtod_l+0x49c>
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295
 8009a94:	e7e9      	b.n	8009a6a <_strtod_l+0x89a>
 8009a96:	4613      	mov	r3, r2
 8009a98:	e7e7      	b.n	8009a6a <_strtod_l+0x89a>
 8009a9a:	ea53 0308 	orrs.w	r3, r3, r8
 8009a9e:	d08a      	beq.n	80099b6 <_strtod_l+0x7e6>
 8009aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aa2:	b1e3      	cbz	r3, 8009ade <_strtod_l+0x90e>
 8009aa4:	ea13 0f0a 	tst.w	r3, sl
 8009aa8:	d0ee      	beq.n	8009a88 <_strtod_l+0x8b8>
 8009aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	b1c3      	cbz	r3, 8009ae6 <_strtod_l+0x916>
 8009ab4:	f7ff fb6f 	bl	8009196 <sulp>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	ec51 0b18 	vmov	r0, r1, d8
 8009ac0:	f7f6 fbf4 	bl	80002ac <__adddf3>
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	e7de      	b.n	8009a88 <_strtod_l+0x8b8>
 8009aca:	4013      	ands	r3, r2
 8009acc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ad0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ad4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ad8:	f04f 38ff 	mov.w	r8, #4294967295
 8009adc:	e7d4      	b.n	8009a88 <_strtod_l+0x8b8>
 8009ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae0:	ea13 0f08 	tst.w	r3, r8
 8009ae4:	e7e0      	b.n	8009aa8 <_strtod_l+0x8d8>
 8009ae6:	f7ff fb56 	bl	8009196 <sulp>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	ec51 0b18 	vmov	r0, r1, d8
 8009af2:	f7f6 fbd9 	bl	80002a8 <__aeabi_dsub>
 8009af6:	2200      	movs	r2, #0
 8009af8:	2300      	movs	r3, #0
 8009afa:	4680      	mov	r8, r0
 8009afc:	4689      	mov	r9, r1
 8009afe:	f7f6 fff3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d0c0      	beq.n	8009a88 <_strtod_l+0x8b8>
 8009b06:	e618      	b.n	800973a <_strtod_l+0x56a>
 8009b08:	fffffc02 	.word	0xfffffc02
 8009b0c:	7ff00000 	.word	0x7ff00000
 8009b10:	39500000 	.word	0x39500000
 8009b14:	000fffff 	.word	0x000fffff
 8009b18:	7fefffff 	.word	0x7fefffff
 8009b1c:	0800b8d0 	.word	0x0800b8d0
 8009b20:	4659      	mov	r1, fp
 8009b22:	4628      	mov	r0, r5
 8009b24:	f7ff fac0 	bl	80090a8 <__ratio>
 8009b28:	ec57 6b10 	vmov	r6, r7, d0
 8009b2c:	ee10 0a10 	vmov	r0, s0
 8009b30:	2200      	movs	r2, #0
 8009b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 ffea 	bl	8000b10 <__aeabi_dcmple>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d071      	beq.n	8009c24 <_strtod_l+0xa54>
 8009b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d17c      	bne.n	8009c40 <_strtod_l+0xa70>
 8009b46:	f1b8 0f00 	cmp.w	r8, #0
 8009b4a:	d15a      	bne.n	8009c02 <_strtod_l+0xa32>
 8009b4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d15d      	bne.n	8009c10 <_strtod_l+0xa40>
 8009b54:	4b90      	ldr	r3, [pc, #576]	; (8009d98 <_strtod_l+0xbc8>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 ffce 	bl	8000afc <__aeabi_dcmplt>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d15c      	bne.n	8009c1e <_strtod_l+0xa4e>
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	4b8c      	ldr	r3, [pc, #560]	; (8009d9c <_strtod_l+0xbcc>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f7f6 fd54 	bl	8000618 <__aeabi_dmul>
 8009b70:	4606      	mov	r6, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009b78:	9606      	str	r6, [sp, #24]
 8009b7a:	9307      	str	r3, [sp, #28]
 8009b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b84:	4b86      	ldr	r3, [pc, #536]	; (8009da0 <_strtod_l+0xbd0>)
 8009b86:	ea0a 0303 	and.w	r3, sl, r3
 8009b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b8e:	4b85      	ldr	r3, [pc, #532]	; (8009da4 <_strtod_l+0xbd4>)
 8009b90:	429a      	cmp	r2, r3
 8009b92:	f040 8090 	bne.w	8009cb6 <_strtod_l+0xae6>
 8009b96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009b9a:	ec49 8b10 	vmov	d0, r8, r9
 8009b9e:	f7ff f9b9 	bl	8008f14 <__ulp>
 8009ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ba6:	ec51 0b10 	vmov	r0, r1, d0
 8009baa:	f7f6 fd35 	bl	8000618 <__aeabi_dmul>
 8009bae:	4642      	mov	r2, r8
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	f7f6 fb7b 	bl	80002ac <__adddf3>
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4979      	ldr	r1, [pc, #484]	; (8009da0 <_strtod_l+0xbd0>)
 8009bba:	4a7b      	ldr	r2, [pc, #492]	; (8009da8 <_strtod_l+0xbd8>)
 8009bbc:	4019      	ands	r1, r3
 8009bbe:	4291      	cmp	r1, r2
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	d944      	bls.n	8009c4e <_strtod_l+0xa7e>
 8009bc4:	ee18 2a90 	vmov	r2, s17
 8009bc8:	4b78      	ldr	r3, [pc, #480]	; (8009dac <_strtod_l+0xbdc>)
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d104      	bne.n	8009bd8 <_strtod_l+0xa08>
 8009bce:	ee18 3a10 	vmov	r3, s16
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	f43f ad40 	beq.w	8009658 <_strtod_l+0x488>
 8009bd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009dac <_strtod_l+0xbdc>
 8009bdc:	f04f 38ff 	mov.w	r8, #4294967295
 8009be0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7fe fe6a 	bl	80088bc <_Bfree>
 8009be8:	9905      	ldr	r1, [sp, #20]
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7fe fe66 	bl	80088bc <_Bfree>
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7fe fe62 	bl	80088bc <_Bfree>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7fe fe5e 	bl	80088bc <_Bfree>
 8009c00:	e609      	b.n	8009816 <_strtod_l+0x646>
 8009c02:	f1b8 0f01 	cmp.w	r8, #1
 8009c06:	d103      	bne.n	8009c10 <_strtod_l+0xa40>
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	f43f ad95 	beq.w	800973a <_strtod_l+0x56a>
 8009c10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009d68 <_strtod_l+0xb98>
 8009c14:	4f60      	ldr	r7, [pc, #384]	; (8009d98 <_strtod_l+0xbc8>)
 8009c16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	e7ae      	b.n	8009b7c <_strtod_l+0x9ac>
 8009c1e:	4f5f      	ldr	r7, [pc, #380]	; (8009d9c <_strtod_l+0xbcc>)
 8009c20:	2600      	movs	r6, #0
 8009c22:	e7a7      	b.n	8009b74 <_strtod_l+0x9a4>
 8009c24:	4b5d      	ldr	r3, [pc, #372]	; (8009d9c <_strtod_l+0xbcc>)
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fcf4 	bl	8000618 <__aeabi_dmul>
 8009c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d09c      	beq.n	8009b74 <_strtod_l+0x9a4>
 8009c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c3e:	e79d      	b.n	8009b7c <_strtod_l+0x9ac>
 8009c40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009d70 <_strtod_l+0xba0>
 8009c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c48:	ec57 6b17 	vmov	r6, r7, d7
 8009c4c:	e796      	b.n	8009b7c <_strtod_l+0x9ac>
 8009c4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	46ca      	mov	sl, r9
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1c2      	bne.n	8009be0 <_strtod_l+0xa10>
 8009c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c60:	0d1b      	lsrs	r3, r3, #20
 8009c62:	051b      	lsls	r3, r3, #20
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d1bb      	bne.n	8009be0 <_strtod_l+0xa10>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f7 f834 	bl	8000cd8 <__aeabi_d2lz>
 8009c70:	f7f6 fca4 	bl	80005bc <__aeabi_l2d>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fb14 	bl	80002a8 <__aeabi_dsub>
 8009c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c86:	ea43 0308 	orr.w	r3, r3, r8
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	d054      	beq.n	8009d3c <_strtod_l+0xb6c>
 8009c92:	a339      	add	r3, pc, #228	; (adr r3, 8009d78 <_strtod_l+0xba8>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 ff30 	bl	8000afc <__aeabi_dcmplt>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f47f ace5 	bne.w	800966c <_strtod_l+0x49c>
 8009ca2:	a337      	add	r3, pc, #220	; (adr r3, 8009d80 <_strtod_l+0xbb0>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 ff44 	bl	8000b38 <__aeabi_dcmpgt>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d095      	beq.n	8009be0 <_strtod_l+0xa10>
 8009cb4:	e4da      	b.n	800966c <_strtod_l+0x49c>
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	b333      	cbz	r3, 8009d08 <_strtod_l+0xb38>
 8009cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cc0:	d822      	bhi.n	8009d08 <_strtod_l+0xb38>
 8009cc2:	a331      	add	r3, pc, #196	; (adr r3, 8009d88 <_strtod_l+0xbb8>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 ff20 	bl	8000b10 <__aeabi_dcmple>
 8009cd0:	b1a0      	cbz	r0, 8009cfc <_strtod_l+0xb2c>
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7f6 ff77 	bl	8000bc8 <__aeabi_d2uiz>
 8009cda:	2801      	cmp	r0, #1
 8009cdc:	bf38      	it	cc
 8009cde:	2001      	movcc	r0, #1
 8009ce0:	f7f6 fc20 	bl	8000524 <__aeabi_ui2d>
 8009ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	bb23      	cbnz	r3, 8009d36 <_strtod_l+0xb66>
 8009cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cf0:	9010      	str	r0, [sp, #64]	; 0x40
 8009cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8009cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009d10:	eef0 0a68 	vmov.f32	s1, s17
 8009d14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009d18:	f7ff f8fc 	bl	8008f14 <__ulp>
 8009d1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d20:	ec53 2b10 	vmov	r2, r3, d0
 8009d24:	f7f6 fc78 	bl	8000618 <__aeabi_dmul>
 8009d28:	ec53 2b18 	vmov	r2, r3, d8
 8009d2c:	f7f6 fabe 	bl	80002ac <__adddf3>
 8009d30:	4680      	mov	r8, r0
 8009d32:	4689      	mov	r9, r1
 8009d34:	e78d      	b.n	8009c52 <_strtod_l+0xa82>
 8009d36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d3a:	e7db      	b.n	8009cf4 <_strtod_l+0xb24>
 8009d3c:	a314      	add	r3, pc, #80	; (adr r3, 8009d90 <_strtod_l+0xbc0>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fedb 	bl	8000afc <__aeabi_dcmplt>
 8009d46:	e7b3      	b.n	8009cb0 <_strtod_l+0xae0>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	f7ff ba7c 	b.w	800924e <_strtod_l+0x7e>
 8009d56:	2a65      	cmp	r2, #101	; 0x65
 8009d58:	f43f ab75 	beq.w	8009446 <_strtod_l+0x276>
 8009d5c:	2a45      	cmp	r2, #69	; 0x45
 8009d5e:	f43f ab72 	beq.w	8009446 <_strtod_l+0x276>
 8009d62:	2301      	movs	r3, #1
 8009d64:	f7ff bbaa 	b.w	80094bc <_strtod_l+0x2ec>
 8009d68:	00000000 	.word	0x00000000
 8009d6c:	bff00000 	.word	0xbff00000
 8009d70:	00000000 	.word	0x00000000
 8009d74:	3ff00000 	.word	0x3ff00000
 8009d78:	94a03595 	.word	0x94a03595
 8009d7c:	3fdfffff 	.word	0x3fdfffff
 8009d80:	35afe535 	.word	0x35afe535
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	ffc00000 	.word	0xffc00000
 8009d8c:	41dfffff 	.word	0x41dfffff
 8009d90:	94a03595 	.word	0x94a03595
 8009d94:	3fcfffff 	.word	0x3fcfffff
 8009d98:	3ff00000 	.word	0x3ff00000
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	7ff00000 	.word	0x7ff00000
 8009da4:	7fe00000 	.word	0x7fe00000
 8009da8:	7c9fffff 	.word	0x7c9fffff
 8009dac:	7fefffff 	.word	0x7fefffff

08009db0 <_strtod_r>:
 8009db0:	4b01      	ldr	r3, [pc, #4]	; (8009db8 <_strtod_r+0x8>)
 8009db2:	f7ff ba0d 	b.w	80091d0 <_strtod_l>
 8009db6:	bf00      	nop
 8009db8:	20000068 	.word	0x20000068

08009dbc <_strtol_l.constprop.0>:
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc2:	d001      	beq.n	8009dc8 <_strtol_l.constprop.0+0xc>
 8009dc4:	2b24      	cmp	r3, #36	; 0x24
 8009dc6:	d906      	bls.n	8009dd6 <_strtol_l.constprop.0+0x1a>
 8009dc8:	f7fd fd7e 	bl	80078c8 <__errno>
 8009dcc:	2316      	movs	r3, #22
 8009dce:	6003      	str	r3, [r0, #0]
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ebc <_strtol_l.constprop.0+0x100>
 8009dda:	460d      	mov	r5, r1
 8009ddc:	462e      	mov	r6, r5
 8009dde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009de2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009de6:	f017 0708 	ands.w	r7, r7, #8
 8009dea:	d1f7      	bne.n	8009ddc <_strtol_l.constprop.0+0x20>
 8009dec:	2c2d      	cmp	r4, #45	; 0x2d
 8009dee:	d132      	bne.n	8009e56 <_strtol_l.constprop.0+0x9a>
 8009df0:	782c      	ldrb	r4, [r5, #0]
 8009df2:	2701      	movs	r7, #1
 8009df4:	1cb5      	adds	r5, r6, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d05b      	beq.n	8009eb2 <_strtol_l.constprop.0+0xf6>
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d109      	bne.n	8009e12 <_strtol_l.constprop.0+0x56>
 8009dfe:	2c30      	cmp	r4, #48	; 0x30
 8009e00:	d107      	bne.n	8009e12 <_strtol_l.constprop.0+0x56>
 8009e02:	782c      	ldrb	r4, [r5, #0]
 8009e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e08:	2c58      	cmp	r4, #88	; 0x58
 8009e0a:	d14d      	bne.n	8009ea8 <_strtol_l.constprop.0+0xec>
 8009e0c:	786c      	ldrb	r4, [r5, #1]
 8009e0e:	2310      	movs	r3, #16
 8009e10:	3502      	adds	r5, #2
 8009e12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e1a:	f04f 0e00 	mov.w	lr, #0
 8009e1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e22:	4676      	mov	r6, lr
 8009e24:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009e2c:	f1bc 0f09 	cmp.w	ip, #9
 8009e30:	d816      	bhi.n	8009e60 <_strtol_l.constprop.0+0xa4>
 8009e32:	4664      	mov	r4, ip
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	dd24      	ble.n	8009e82 <_strtol_l.constprop.0+0xc6>
 8009e38:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e3c:	d008      	beq.n	8009e50 <_strtol_l.constprop.0+0x94>
 8009e3e:	45b1      	cmp	r9, r6
 8009e40:	d31c      	bcc.n	8009e7c <_strtol_l.constprop.0+0xc0>
 8009e42:	d101      	bne.n	8009e48 <_strtol_l.constprop.0+0x8c>
 8009e44:	45a2      	cmp	sl, r4
 8009e46:	db19      	blt.n	8009e7c <_strtol_l.constprop.0+0xc0>
 8009e48:	fb06 4603 	mla	r6, r6, r3, r4
 8009e4c:	f04f 0e01 	mov.w	lr, #1
 8009e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e54:	e7e8      	b.n	8009e28 <_strtol_l.constprop.0+0x6c>
 8009e56:	2c2b      	cmp	r4, #43	; 0x2b
 8009e58:	bf04      	itt	eq
 8009e5a:	782c      	ldrbeq	r4, [r5, #0]
 8009e5c:	1cb5      	addeq	r5, r6, #2
 8009e5e:	e7ca      	b.n	8009df6 <_strtol_l.constprop.0+0x3a>
 8009e60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e64:	f1bc 0f19 	cmp.w	ip, #25
 8009e68:	d801      	bhi.n	8009e6e <_strtol_l.constprop.0+0xb2>
 8009e6a:	3c37      	subs	r4, #55	; 0x37
 8009e6c:	e7e2      	b.n	8009e34 <_strtol_l.constprop.0+0x78>
 8009e6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009e72:	f1bc 0f19 	cmp.w	ip, #25
 8009e76:	d804      	bhi.n	8009e82 <_strtol_l.constprop.0+0xc6>
 8009e78:	3c57      	subs	r4, #87	; 0x57
 8009e7a:	e7db      	b.n	8009e34 <_strtol_l.constprop.0+0x78>
 8009e7c:	f04f 3eff 	mov.w	lr, #4294967295
 8009e80:	e7e6      	b.n	8009e50 <_strtol_l.constprop.0+0x94>
 8009e82:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e86:	d105      	bne.n	8009e94 <_strtol_l.constprop.0+0xd8>
 8009e88:	2322      	movs	r3, #34	; 0x22
 8009e8a:	6003      	str	r3, [r0, #0]
 8009e8c:	4646      	mov	r6, r8
 8009e8e:	b942      	cbnz	r2, 8009ea2 <_strtol_l.constprop.0+0xe6>
 8009e90:	4630      	mov	r0, r6
 8009e92:	e79e      	b.n	8009dd2 <_strtol_l.constprop.0+0x16>
 8009e94:	b107      	cbz	r7, 8009e98 <_strtol_l.constprop.0+0xdc>
 8009e96:	4276      	negs	r6, r6
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	d0f9      	beq.n	8009e90 <_strtol_l.constprop.0+0xd4>
 8009e9c:	f1be 0f00 	cmp.w	lr, #0
 8009ea0:	d000      	beq.n	8009ea4 <_strtol_l.constprop.0+0xe8>
 8009ea2:	1e69      	subs	r1, r5, #1
 8009ea4:	6011      	str	r1, [r2, #0]
 8009ea6:	e7f3      	b.n	8009e90 <_strtol_l.constprop.0+0xd4>
 8009ea8:	2430      	movs	r4, #48	; 0x30
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1b1      	bne.n	8009e12 <_strtol_l.constprop.0+0x56>
 8009eae:	2308      	movs	r3, #8
 8009eb0:	e7af      	b.n	8009e12 <_strtol_l.constprop.0+0x56>
 8009eb2:	2c30      	cmp	r4, #48	; 0x30
 8009eb4:	d0a5      	beq.n	8009e02 <_strtol_l.constprop.0+0x46>
 8009eb6:	230a      	movs	r3, #10
 8009eb8:	e7ab      	b.n	8009e12 <_strtol_l.constprop.0+0x56>
 8009eba:	bf00      	nop
 8009ebc:	0800b8f9 	.word	0x0800b8f9

08009ec0 <_strtol_r>:
 8009ec0:	f7ff bf7c 	b.w	8009dbc <_strtol_l.constprop.0>

08009ec4 <__ssputs_r>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	688e      	ldr	r6, [r1, #8]
 8009eca:	461f      	mov	r7, r3
 8009ecc:	42be      	cmp	r6, r7
 8009ece:	680b      	ldr	r3, [r1, #0]
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4690      	mov	r8, r2
 8009ed6:	d82c      	bhi.n	8009f32 <__ssputs_r+0x6e>
 8009ed8:	898a      	ldrh	r2, [r1, #12]
 8009eda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ede:	d026      	beq.n	8009f2e <__ssputs_r+0x6a>
 8009ee0:	6965      	ldr	r5, [r4, #20]
 8009ee2:	6909      	ldr	r1, [r1, #16]
 8009ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee8:	eba3 0901 	sub.w	r9, r3, r1
 8009eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef0:	1c7b      	adds	r3, r7, #1
 8009ef2:	444b      	add	r3, r9
 8009ef4:	106d      	asrs	r5, r5, #1
 8009ef6:	429d      	cmp	r5, r3
 8009ef8:	bf38      	it	cc
 8009efa:	461d      	movcc	r5, r3
 8009efc:	0553      	lsls	r3, r2, #21
 8009efe:	d527      	bpl.n	8009f50 <__ssputs_r+0x8c>
 8009f00:	4629      	mov	r1, r5
 8009f02:	f7fe fc0f 	bl	8008724 <_malloc_r>
 8009f06:	4606      	mov	r6, r0
 8009f08:	b360      	cbz	r0, 8009f64 <__ssputs_r+0xa0>
 8009f0a:	6921      	ldr	r1, [r4, #16]
 8009f0c:	464a      	mov	r2, r9
 8009f0e:	f7fd fd07 	bl	8007920 <memcpy>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f1c:	81a3      	strh	r3, [r4, #12]
 8009f1e:	6126      	str	r6, [r4, #16]
 8009f20:	6165      	str	r5, [r4, #20]
 8009f22:	444e      	add	r6, r9
 8009f24:	eba5 0509 	sub.w	r5, r5, r9
 8009f28:	6026      	str	r6, [r4, #0]
 8009f2a:	60a5      	str	r5, [r4, #8]
 8009f2c:	463e      	mov	r6, r7
 8009f2e:	42be      	cmp	r6, r7
 8009f30:	d900      	bls.n	8009f34 <__ssputs_r+0x70>
 8009f32:	463e      	mov	r6, r7
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	4632      	mov	r2, r6
 8009f38:	4641      	mov	r1, r8
 8009f3a:	f000 fc05 	bl	800a748 <memmove>
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	1b9b      	subs	r3, r3, r6
 8009f42:	60a3      	str	r3, [r4, #8]
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	4433      	add	r3, r6
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f50:	462a      	mov	r2, r5
 8009f52:	f000 fffe 	bl	800af52 <_realloc_r>
 8009f56:	4606      	mov	r6, r0
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d1e0      	bne.n	8009f1e <__ssputs_r+0x5a>
 8009f5c:	6921      	ldr	r1, [r4, #16]
 8009f5e:	4650      	mov	r0, sl
 8009f60:	f7fe fb6c 	bl	800863c <_free_r>
 8009f64:	230c      	movs	r3, #12
 8009f66:	f8ca 3000 	str.w	r3, [sl]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	e7e9      	b.n	8009f4c <__ssputs_r+0x88>

08009f78 <_svfiprintf_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4698      	mov	r8, r3
 8009f7e:	898b      	ldrh	r3, [r1, #12]
 8009f80:	061b      	lsls	r3, r3, #24
 8009f82:	b09d      	sub	sp, #116	; 0x74
 8009f84:	4607      	mov	r7, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	d50e      	bpl.n	8009faa <_svfiprintf_r+0x32>
 8009f8c:	690b      	ldr	r3, [r1, #16]
 8009f8e:	b963      	cbnz	r3, 8009faa <_svfiprintf_r+0x32>
 8009f90:	2140      	movs	r1, #64	; 0x40
 8009f92:	f7fe fbc7 	bl	8008724 <_malloc_r>
 8009f96:	6028      	str	r0, [r5, #0]
 8009f98:	6128      	str	r0, [r5, #16]
 8009f9a:	b920      	cbnz	r0, 8009fa6 <_svfiprintf_r+0x2e>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	e0d0      	b.n	800a148 <_svfiprintf_r+0x1d0>
 8009fa6:	2340      	movs	r3, #64	; 0x40
 8009fa8:	616b      	str	r3, [r5, #20]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	2320      	movs	r3, #32
 8009fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb8:	2330      	movs	r3, #48	; 0x30
 8009fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a160 <_svfiprintf_r+0x1e8>
 8009fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc2:	f04f 0901 	mov.w	r9, #1
 8009fc6:	4623      	mov	r3, r4
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fce:	b10a      	cbz	r2, 8009fd4 <_svfiprintf_r+0x5c>
 8009fd0:	2a25      	cmp	r2, #37	; 0x25
 8009fd2:	d1f9      	bne.n	8009fc8 <_svfiprintf_r+0x50>
 8009fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd8:	d00b      	beq.n	8009ff2 <_svfiprintf_r+0x7a>
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff6f 	bl	8009ec4 <__ssputs_r>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f000 80a9 	beq.w	800a13e <_svfiprintf_r+0x1c6>
 8009fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fee:	445a      	add	r2, fp
 8009ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80a1 	beq.w	800a13e <_svfiprintf_r+0x1c6>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f04f 32ff 	mov.w	r2, #4294967295
 800a002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a006:	f10a 0a01 	add.w	sl, sl, #1
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a012:	931a      	str	r3, [sp, #104]	; 0x68
 800a014:	4654      	mov	r4, sl
 800a016:	2205      	movs	r2, #5
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	4850      	ldr	r0, [pc, #320]	; (800a160 <_svfiprintf_r+0x1e8>)
 800a01e:	f7f6 f8e7 	bl	80001f0 <memchr>
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	b9d8      	cbnz	r0, 800a05e <_svfiprintf_r+0xe6>
 800a026:	06d0      	lsls	r0, r2, #27
 800a028:	bf44      	itt	mi
 800a02a:	2320      	movmi	r3, #32
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a030:	0711      	lsls	r1, r2, #28
 800a032:	bf44      	itt	mi
 800a034:	232b      	movmi	r3, #43	; 0x2b
 800a036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03a:	f89a 3000 	ldrb.w	r3, [sl]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d015      	beq.n	800a06e <_svfiprintf_r+0xf6>
 800a042:	9a07      	ldr	r2, [sp, #28]
 800a044:	4654      	mov	r4, sl
 800a046:	2000      	movs	r0, #0
 800a048:	f04f 0c0a 	mov.w	ip, #10
 800a04c:	4621      	mov	r1, r4
 800a04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a052:	3b30      	subs	r3, #48	; 0x30
 800a054:	2b09      	cmp	r3, #9
 800a056:	d94d      	bls.n	800a0f4 <_svfiprintf_r+0x17c>
 800a058:	b1b0      	cbz	r0, 800a088 <_svfiprintf_r+0x110>
 800a05a:	9207      	str	r2, [sp, #28]
 800a05c:	e014      	b.n	800a088 <_svfiprintf_r+0x110>
 800a05e:	eba0 0308 	sub.w	r3, r0, r8
 800a062:	fa09 f303 	lsl.w	r3, r9, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	46a2      	mov	sl, r4
 800a06c:	e7d2      	b.n	800a014 <_svfiprintf_r+0x9c>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d19      	adds	r1, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9103      	str	r1, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfbb      	ittet	lt
 800a07a:	425b      	neglt	r3, r3
 800a07c:	f042 0202 	orrlt.w	r2, r2, #2
 800a080:	9307      	strge	r3, [sp, #28]
 800a082:	9307      	strlt	r3, [sp, #28]
 800a084:	bfb8      	it	lt
 800a086:	9204      	strlt	r2, [sp, #16]
 800a088:	7823      	ldrb	r3, [r4, #0]
 800a08a:	2b2e      	cmp	r3, #46	; 0x2e
 800a08c:	d10c      	bne.n	800a0a8 <_svfiprintf_r+0x130>
 800a08e:	7863      	ldrb	r3, [r4, #1]
 800a090:	2b2a      	cmp	r3, #42	; 0x2a
 800a092:	d134      	bne.n	800a0fe <_svfiprintf_r+0x186>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9203      	str	r2, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfb8      	it	lt
 800a0a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a4:	3402      	adds	r4, #2
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a170 <_svfiprintf_r+0x1f8>
 800a0ac:	7821      	ldrb	r1, [r4, #0]
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	f7f6 f89d 	bl	80001f0 <memchr>
 800a0b6:	b138      	cbz	r0, 800a0c8 <_svfiprintf_r+0x150>
 800a0b8:	9b04      	ldr	r3, [sp, #16]
 800a0ba:	eba0 000a 	sub.w	r0, r0, sl
 800a0be:	2240      	movs	r2, #64	; 0x40
 800a0c0:	4082      	lsls	r2, r0
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	4825      	ldr	r0, [pc, #148]	; (800a164 <_svfiprintf_r+0x1ec>)
 800a0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	f7f6 f88c 	bl	80001f0 <memchr>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d038      	beq.n	800a14e <_svfiprintf_r+0x1d6>
 800a0dc:	4b22      	ldr	r3, [pc, #136]	; (800a168 <_svfiprintf_r+0x1f0>)
 800a0de:	bb1b      	cbnz	r3, 800a128 <_svfiprintf_r+0x1b0>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	3307      	adds	r3, #7
 800a0e4:	f023 0307 	bic.w	r3, r3, #7
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	9303      	str	r3, [sp, #12]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	4433      	add	r3, r6
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	e768      	b.n	8009fc6 <_svfiprintf_r+0x4e>
 800a0f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e7a6      	b.n	800a04c <_svfiprintf_r+0xd4>
 800a0fe:	2300      	movs	r3, #0
 800a100:	3401      	adds	r4, #1
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	4619      	mov	r1, r3
 800a106:	f04f 0c0a 	mov.w	ip, #10
 800a10a:	4620      	mov	r0, r4
 800a10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a110:	3a30      	subs	r2, #48	; 0x30
 800a112:	2a09      	cmp	r2, #9
 800a114:	d903      	bls.n	800a11e <_svfiprintf_r+0x1a6>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0c6      	beq.n	800a0a8 <_svfiprintf_r+0x130>
 800a11a:	9105      	str	r1, [sp, #20]
 800a11c:	e7c4      	b.n	800a0a8 <_svfiprintf_r+0x130>
 800a11e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a122:	4604      	mov	r4, r0
 800a124:	2301      	movs	r3, #1
 800a126:	e7f0      	b.n	800a10a <_svfiprintf_r+0x192>
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	462a      	mov	r2, r5
 800a12e:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <_svfiprintf_r+0x1f4>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	4638      	mov	r0, r7
 800a134:	f7fc fbcc 	bl	80068d0 <_printf_float>
 800a138:	1c42      	adds	r2, r0, #1
 800a13a:	4606      	mov	r6, r0
 800a13c:	d1d6      	bne.n	800a0ec <_svfiprintf_r+0x174>
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	065b      	lsls	r3, r3, #25
 800a142:	f53f af2d 	bmi.w	8009fa0 <_svfiprintf_r+0x28>
 800a146:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a148:	b01d      	add	sp, #116	; 0x74
 800a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	462a      	mov	r2, r5
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <_svfiprintf_r+0x1f4>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	4638      	mov	r0, r7
 800a15a:	f7fc fe5d 	bl	8006e18 <_printf_i>
 800a15e:	e7eb      	b.n	800a138 <_svfiprintf_r+0x1c0>
 800a160:	0800b9f9 	.word	0x0800b9f9
 800a164:	0800ba03 	.word	0x0800ba03
 800a168:	080068d1 	.word	0x080068d1
 800a16c:	08009ec5 	.word	0x08009ec5
 800a170:	0800b9ff 	.word	0x0800b9ff

0800a174 <__sfputc_r>:
 800a174:	6893      	ldr	r3, [r2, #8]
 800a176:	3b01      	subs	r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	b410      	push	{r4}
 800a17c:	6093      	str	r3, [r2, #8]
 800a17e:	da08      	bge.n	800a192 <__sfputc_r+0x1e>
 800a180:	6994      	ldr	r4, [r2, #24]
 800a182:	42a3      	cmp	r3, r4
 800a184:	db01      	blt.n	800a18a <__sfputc_r+0x16>
 800a186:	290a      	cmp	r1, #10
 800a188:	d103      	bne.n	800a192 <__sfputc_r+0x1e>
 800a18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a18e:	f000 ba45 	b.w	800a61c <__swbuf_r>
 800a192:	6813      	ldr	r3, [r2, #0]
 800a194:	1c58      	adds	r0, r3, #1
 800a196:	6010      	str	r0, [r2, #0]
 800a198:	7019      	strb	r1, [r3, #0]
 800a19a:	4608      	mov	r0, r1
 800a19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <__sfputs_r>:
 800a1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	18d5      	adds	r5, r2, r3
 800a1ac:	42ac      	cmp	r4, r5
 800a1ae:	d101      	bne.n	800a1b4 <__sfputs_r+0x12>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e007      	b.n	800a1c4 <__sfputs_r+0x22>
 800a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b8:	463a      	mov	r2, r7
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7ff ffda 	bl	800a174 <__sfputc_r>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d1f3      	bne.n	800a1ac <__sfputs_r+0xa>
 800a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1c8 <_vfiprintf_r>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	b09d      	sub	sp, #116	; 0x74
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	4698      	mov	r8, r3
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	b118      	cbz	r0, 800a1e0 <_vfiprintf_r+0x18>
 800a1d8:	6a03      	ldr	r3, [r0, #32]
 800a1da:	b90b      	cbnz	r3, 800a1e0 <_vfiprintf_r+0x18>
 800a1dc:	f7fd f9c8 	bl	8007570 <__sinit>
 800a1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e2:	07d9      	lsls	r1, r3, #31
 800a1e4:	d405      	bmi.n	800a1f2 <_vfiprintf_r+0x2a>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	059a      	lsls	r2, r3, #22
 800a1ea:	d402      	bmi.n	800a1f2 <_vfiprintf_r+0x2a>
 800a1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ee:	f7fd fb95 	bl	800791c <__retarget_lock_acquire_recursive>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	071b      	lsls	r3, r3, #28
 800a1f6:	d501      	bpl.n	800a1fc <_vfiprintf_r+0x34>
 800a1f8:	692b      	ldr	r3, [r5, #16]
 800a1fa:	b99b      	cbnz	r3, 800a224 <_vfiprintf_r+0x5c>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4630      	mov	r0, r6
 800a200:	f000 fa4a 	bl	800a698 <__swsetup_r>
 800a204:	b170      	cbz	r0, 800a224 <_vfiprintf_r+0x5c>
 800a206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a208:	07dc      	lsls	r4, r3, #31
 800a20a:	d504      	bpl.n	800a216 <_vfiprintf_r+0x4e>
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	b01d      	add	sp, #116	; 0x74
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	0598      	lsls	r0, r3, #22
 800a21a:	d4f7      	bmi.n	800a20c <_vfiprintf_r+0x44>
 800a21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21e:	f7fd fb7e 	bl	800791e <__retarget_lock_release_recursive>
 800a222:	e7f3      	b.n	800a20c <_vfiprintf_r+0x44>
 800a224:	2300      	movs	r3, #0
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	2320      	movs	r3, #32
 800a22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a232:	2330      	movs	r3, #48	; 0x30
 800a234:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3e8 <_vfiprintf_r+0x220>
 800a238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a23c:	f04f 0901 	mov.w	r9, #1
 800a240:	4623      	mov	r3, r4
 800a242:	469a      	mov	sl, r3
 800a244:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a248:	b10a      	cbz	r2, 800a24e <_vfiprintf_r+0x86>
 800a24a:	2a25      	cmp	r2, #37	; 0x25
 800a24c:	d1f9      	bne.n	800a242 <_vfiprintf_r+0x7a>
 800a24e:	ebba 0b04 	subs.w	fp, sl, r4
 800a252:	d00b      	beq.n	800a26c <_vfiprintf_r+0xa4>
 800a254:	465b      	mov	r3, fp
 800a256:	4622      	mov	r2, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ffa1 	bl	800a1a2 <__sfputs_r>
 800a260:	3001      	adds	r0, #1
 800a262:	f000 80a9 	beq.w	800a3b8 <_vfiprintf_r+0x1f0>
 800a266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a268:	445a      	add	r2, fp
 800a26a:	9209      	str	r2, [sp, #36]	; 0x24
 800a26c:	f89a 3000 	ldrb.w	r3, [sl]
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80a1 	beq.w	800a3b8 <_vfiprintf_r+0x1f0>
 800a276:	2300      	movs	r3, #0
 800a278:	f04f 32ff 	mov.w	r2, #4294967295
 800a27c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a280:	f10a 0a01 	add.w	sl, sl, #1
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a28c:	931a      	str	r3, [sp, #104]	; 0x68
 800a28e:	4654      	mov	r4, sl
 800a290:	2205      	movs	r2, #5
 800a292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a296:	4854      	ldr	r0, [pc, #336]	; (800a3e8 <_vfiprintf_r+0x220>)
 800a298:	f7f5 ffaa 	bl	80001f0 <memchr>
 800a29c:	9a04      	ldr	r2, [sp, #16]
 800a29e:	b9d8      	cbnz	r0, 800a2d8 <_vfiprintf_r+0x110>
 800a2a0:	06d1      	lsls	r1, r2, #27
 800a2a2:	bf44      	itt	mi
 800a2a4:	2320      	movmi	r3, #32
 800a2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2aa:	0713      	lsls	r3, r2, #28
 800a2ac:	bf44      	itt	mi
 800a2ae:	232b      	movmi	r3, #43	; 0x2b
 800a2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ba:	d015      	beq.n	800a2e8 <_vfiprintf_r+0x120>
 800a2bc:	9a07      	ldr	r2, [sp, #28]
 800a2be:	4654      	mov	r4, sl
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f04f 0c0a 	mov.w	ip, #10
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2cc:	3b30      	subs	r3, #48	; 0x30
 800a2ce:	2b09      	cmp	r3, #9
 800a2d0:	d94d      	bls.n	800a36e <_vfiprintf_r+0x1a6>
 800a2d2:	b1b0      	cbz	r0, 800a302 <_vfiprintf_r+0x13a>
 800a2d4:	9207      	str	r2, [sp, #28]
 800a2d6:	e014      	b.n	800a302 <_vfiprintf_r+0x13a>
 800a2d8:	eba0 0308 	sub.w	r3, r0, r8
 800a2dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	46a2      	mov	sl, r4
 800a2e6:	e7d2      	b.n	800a28e <_vfiprintf_r+0xc6>
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	1d19      	adds	r1, r3, #4
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	9103      	str	r1, [sp, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfbb      	ittet	lt
 800a2f4:	425b      	neglt	r3, r3
 800a2f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fa:	9307      	strge	r3, [sp, #28]
 800a2fc:	9307      	strlt	r3, [sp, #28]
 800a2fe:	bfb8      	it	lt
 800a300:	9204      	strlt	r2, [sp, #16]
 800a302:	7823      	ldrb	r3, [r4, #0]
 800a304:	2b2e      	cmp	r3, #46	; 0x2e
 800a306:	d10c      	bne.n	800a322 <_vfiprintf_r+0x15a>
 800a308:	7863      	ldrb	r3, [r4, #1]
 800a30a:	2b2a      	cmp	r3, #42	; 0x2a
 800a30c:	d134      	bne.n	800a378 <_vfiprintf_r+0x1b0>
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	9203      	str	r2, [sp, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	bfb8      	it	lt
 800a31a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a31e:	3402      	adds	r4, #2
 800a320:	9305      	str	r3, [sp, #20]
 800a322:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3f8 <_vfiprintf_r+0x230>
 800a326:	7821      	ldrb	r1, [r4, #0]
 800a328:	2203      	movs	r2, #3
 800a32a:	4650      	mov	r0, sl
 800a32c:	f7f5 ff60 	bl	80001f0 <memchr>
 800a330:	b138      	cbz	r0, 800a342 <_vfiprintf_r+0x17a>
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	eba0 000a 	sub.w	r0, r0, sl
 800a338:	2240      	movs	r2, #64	; 0x40
 800a33a:	4082      	lsls	r2, r0
 800a33c:	4313      	orrs	r3, r2
 800a33e:	3401      	adds	r4, #1
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a346:	4829      	ldr	r0, [pc, #164]	; (800a3ec <_vfiprintf_r+0x224>)
 800a348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a34c:	2206      	movs	r2, #6
 800a34e:	f7f5 ff4f 	bl	80001f0 <memchr>
 800a352:	2800      	cmp	r0, #0
 800a354:	d03f      	beq.n	800a3d6 <_vfiprintf_r+0x20e>
 800a356:	4b26      	ldr	r3, [pc, #152]	; (800a3f0 <_vfiprintf_r+0x228>)
 800a358:	bb1b      	cbnz	r3, 800a3a2 <_vfiprintf_r+0x1da>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	3307      	adds	r3, #7
 800a35e:	f023 0307 	bic.w	r3, r3, #7
 800a362:	3308      	adds	r3, #8
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	443b      	add	r3, r7
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
 800a36c:	e768      	b.n	800a240 <_vfiprintf_r+0x78>
 800a36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a372:	460c      	mov	r4, r1
 800a374:	2001      	movs	r0, #1
 800a376:	e7a6      	b.n	800a2c6 <_vfiprintf_r+0xfe>
 800a378:	2300      	movs	r3, #0
 800a37a:	3401      	adds	r4, #1
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	4619      	mov	r1, r3
 800a380:	f04f 0c0a 	mov.w	ip, #10
 800a384:	4620      	mov	r0, r4
 800a386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38a:	3a30      	subs	r2, #48	; 0x30
 800a38c:	2a09      	cmp	r2, #9
 800a38e:	d903      	bls.n	800a398 <_vfiprintf_r+0x1d0>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0c6      	beq.n	800a322 <_vfiprintf_r+0x15a>
 800a394:	9105      	str	r1, [sp, #20]
 800a396:	e7c4      	b.n	800a322 <_vfiprintf_r+0x15a>
 800a398:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39c:	4604      	mov	r4, r0
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e7f0      	b.n	800a384 <_vfiprintf_r+0x1bc>
 800a3a2:	ab03      	add	r3, sp, #12
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <_vfiprintf_r+0x22c>)
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7fc fa8f 	bl	80068d0 <_printf_float>
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	1c78      	adds	r0, r7, #1
 800a3b6:	d1d6      	bne.n	800a366 <_vfiprintf_r+0x19e>
 800a3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ba:	07d9      	lsls	r1, r3, #31
 800a3bc:	d405      	bmi.n	800a3ca <_vfiprintf_r+0x202>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	059a      	lsls	r2, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_vfiprintf_r+0x202>
 800a3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c6:	f7fd faaa 	bl	800791e <__retarget_lock_release_recursive>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	065b      	lsls	r3, r3, #25
 800a3ce:	f53f af1d 	bmi.w	800a20c <_vfiprintf_r+0x44>
 800a3d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d4:	e71c      	b.n	800a210 <_vfiprintf_r+0x48>
 800a3d6:	ab03      	add	r3, sp, #12
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <_vfiprintf_r+0x22c>)
 800a3de:	a904      	add	r1, sp, #16
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7fc fd19 	bl	8006e18 <_printf_i>
 800a3e6:	e7e4      	b.n	800a3b2 <_vfiprintf_r+0x1ea>
 800a3e8:	0800b9f9 	.word	0x0800b9f9
 800a3ec:	0800ba03 	.word	0x0800ba03
 800a3f0:	080068d1 	.word	0x080068d1
 800a3f4:	0800a1a3 	.word	0x0800a1a3
 800a3f8:	0800b9ff 	.word	0x0800b9ff

0800a3fc <__sflush_r>:
 800a3fc:	898a      	ldrh	r2, [r1, #12]
 800a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	4605      	mov	r5, r0
 800a404:	0710      	lsls	r0, r2, #28
 800a406:	460c      	mov	r4, r1
 800a408:	d458      	bmi.n	800a4bc <__sflush_r+0xc0>
 800a40a:	684b      	ldr	r3, [r1, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc05      	bgt.n	800a41c <__sflush_r+0x20>
 800a410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	dc02      	bgt.n	800a41c <__sflush_r+0x20>
 800a416:	2000      	movs	r0, #0
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d0f9      	beq.n	800a416 <__sflush_r+0x1a>
 800a422:	2300      	movs	r3, #0
 800a424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a428:	682f      	ldr	r7, [r5, #0]
 800a42a:	6a21      	ldr	r1, [r4, #32]
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	d032      	beq.n	800a496 <__sflush_r+0x9a>
 800a430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	075a      	lsls	r2, r3, #29
 800a436:	d505      	bpl.n	800a444 <__sflush_r+0x48>
 800a438:	6863      	ldr	r3, [r4, #4]
 800a43a:	1ac0      	subs	r0, r0, r3
 800a43c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a43e:	b10b      	cbz	r3, 800a444 <__sflush_r+0x48>
 800a440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a442:	1ac0      	subs	r0, r0, r3
 800a444:	2300      	movs	r3, #0
 800a446:	4602      	mov	r2, r0
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	6a21      	ldr	r1, [r4, #32]
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	d106      	bne.n	800a464 <__sflush_r+0x68>
 800a456:	6829      	ldr	r1, [r5, #0]
 800a458:	291d      	cmp	r1, #29
 800a45a:	d82b      	bhi.n	800a4b4 <__sflush_r+0xb8>
 800a45c:	4a29      	ldr	r2, [pc, #164]	; (800a504 <__sflush_r+0x108>)
 800a45e:	410a      	asrs	r2, r1
 800a460:	07d6      	lsls	r6, r2, #31
 800a462:	d427      	bmi.n	800a4b4 <__sflush_r+0xb8>
 800a464:	2200      	movs	r2, #0
 800a466:	6062      	str	r2, [r4, #4]
 800a468:	04d9      	lsls	r1, r3, #19
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	d504      	bpl.n	800a47a <__sflush_r+0x7e>
 800a470:	1c42      	adds	r2, r0, #1
 800a472:	d101      	bne.n	800a478 <__sflush_r+0x7c>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b903      	cbnz	r3, 800a47a <__sflush_r+0x7e>
 800a478:	6560      	str	r0, [r4, #84]	; 0x54
 800a47a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a47c:	602f      	str	r7, [r5, #0]
 800a47e:	2900      	cmp	r1, #0
 800a480:	d0c9      	beq.n	800a416 <__sflush_r+0x1a>
 800a482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a486:	4299      	cmp	r1, r3
 800a488:	d002      	beq.n	800a490 <__sflush_r+0x94>
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7fe f8d6 	bl	800863c <_free_r>
 800a490:	2000      	movs	r0, #0
 800a492:	6360      	str	r0, [r4, #52]	; 0x34
 800a494:	e7c0      	b.n	800a418 <__sflush_r+0x1c>
 800a496:	2301      	movs	r3, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	1c41      	adds	r1, r0, #1
 800a49e:	d1c8      	bne.n	800a432 <__sflush_r+0x36>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c5      	beq.n	800a432 <__sflush_r+0x36>
 800a4a6:	2b1d      	cmp	r3, #29
 800a4a8:	d001      	beq.n	800a4ae <__sflush_r+0xb2>
 800a4aa:	2b16      	cmp	r3, #22
 800a4ac:	d101      	bne.n	800a4b2 <__sflush_r+0xb6>
 800a4ae:	602f      	str	r7, [r5, #0]
 800a4b0:	e7b1      	b.n	800a416 <__sflush_r+0x1a>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7ad      	b.n	800a418 <__sflush_r+0x1c>
 800a4bc:	690f      	ldr	r7, [r1, #16]
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	d0a9      	beq.n	800a416 <__sflush_r+0x1a>
 800a4c2:	0793      	lsls	r3, r2, #30
 800a4c4:	680e      	ldr	r6, [r1, #0]
 800a4c6:	bf08      	it	eq
 800a4c8:	694b      	ldreq	r3, [r1, #20]
 800a4ca:	600f      	str	r7, [r1, #0]
 800a4cc:	bf18      	it	ne
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	eba6 0807 	sub.w	r8, r6, r7
 800a4d4:	608b      	str	r3, [r1, #8]
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	dd9c      	ble.n	800a416 <__sflush_r+0x1a>
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4e0:	4643      	mov	r3, r8
 800a4e2:	463a      	mov	r2, r7
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	dc06      	bgt.n	800a4fa <__sflush_r+0xfe>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f8:	e78e      	b.n	800a418 <__sflush_r+0x1c>
 800a4fa:	4407      	add	r7, r0
 800a4fc:	eba8 0800 	sub.w	r8, r8, r0
 800a500:	e7e9      	b.n	800a4d6 <__sflush_r+0xda>
 800a502:	bf00      	nop
 800a504:	dfbffffe 	.word	0xdfbffffe

0800a508 <_fflush_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	690b      	ldr	r3, [r1, #16]
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	b913      	cbnz	r3, 800a518 <_fflush_r+0x10>
 800a512:	2500      	movs	r5, #0
 800a514:	4628      	mov	r0, r5
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	b118      	cbz	r0, 800a522 <_fflush_r+0x1a>
 800a51a:	6a03      	ldr	r3, [r0, #32]
 800a51c:	b90b      	cbnz	r3, 800a522 <_fflush_r+0x1a>
 800a51e:	f7fd f827 	bl	8007570 <__sinit>
 800a522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f3      	beq.n	800a512 <_fflush_r+0xa>
 800a52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a52c:	07d0      	lsls	r0, r2, #31
 800a52e:	d404      	bmi.n	800a53a <_fflush_r+0x32>
 800a530:	0599      	lsls	r1, r3, #22
 800a532:	d402      	bmi.n	800a53a <_fflush_r+0x32>
 800a534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a536:	f7fd f9f1 	bl	800791c <__retarget_lock_acquire_recursive>
 800a53a:	4628      	mov	r0, r5
 800a53c:	4621      	mov	r1, r4
 800a53e:	f7ff ff5d 	bl	800a3fc <__sflush_r>
 800a542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a544:	07da      	lsls	r2, r3, #31
 800a546:	4605      	mov	r5, r0
 800a548:	d4e4      	bmi.n	800a514 <_fflush_r+0xc>
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	059b      	lsls	r3, r3, #22
 800a54e:	d4e1      	bmi.n	800a514 <_fflush_r+0xc>
 800a550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a552:	f7fd f9e4 	bl	800791e <__retarget_lock_release_recursive>
 800a556:	e7dd      	b.n	800a514 <_fflush_r+0xc>

0800a558 <__swhatbuf_r>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	2900      	cmp	r1, #0
 800a562:	b096      	sub	sp, #88	; 0x58
 800a564:	4615      	mov	r5, r2
 800a566:	461e      	mov	r6, r3
 800a568:	da0d      	bge.n	800a586 <__swhatbuf_r+0x2e>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a570:	f04f 0100 	mov.w	r1, #0
 800a574:	bf0c      	ite	eq
 800a576:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a57a:	2340      	movne	r3, #64	; 0x40
 800a57c:	2000      	movs	r0, #0
 800a57e:	6031      	str	r1, [r6, #0]
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	b016      	add	sp, #88	; 0x58
 800a584:	bd70      	pop	{r4, r5, r6, pc}
 800a586:	466a      	mov	r2, sp
 800a588:	f000 f90a 	bl	800a7a0 <_fstat_r>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	dbec      	blt.n	800a56a <__swhatbuf_r+0x12>
 800a590:	9901      	ldr	r1, [sp, #4]
 800a592:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a596:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a59a:	4259      	negs	r1, r3
 800a59c:	4159      	adcs	r1, r3
 800a59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5a2:	e7eb      	b.n	800a57c <__swhatbuf_r+0x24>

0800a5a4 <__smakebuf_r>:
 800a5a4:	898b      	ldrh	r3, [r1, #12]
 800a5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5a8:	079d      	lsls	r5, r3, #30
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	d507      	bpl.n	800a5c0 <__smakebuf_r+0x1c>
 800a5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	6163      	str	r3, [r4, #20]
 800a5bc:	b002      	add	sp, #8
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	ab01      	add	r3, sp, #4
 800a5c2:	466a      	mov	r2, sp
 800a5c4:	f7ff ffc8 	bl	800a558 <__swhatbuf_r>
 800a5c8:	9900      	ldr	r1, [sp, #0]
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7fe f8a9 	bl	8008724 <_malloc_r>
 800a5d2:	b948      	cbnz	r0, 800a5e8 <__smakebuf_r+0x44>
 800a5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d4ef      	bmi.n	800a5bc <__smakebuf_r+0x18>
 800a5dc:	f023 0303 	bic.w	r3, r3, #3
 800a5e0:	f043 0302 	orr.w	r3, r3, #2
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	e7e3      	b.n	800a5b0 <__smakebuf_r+0xc>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	6163      	str	r3, [r4, #20]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	6120      	str	r0, [r4, #16]
 800a5fa:	b15b      	cbz	r3, 800a614 <__smakebuf_r+0x70>
 800a5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a600:	4630      	mov	r0, r6
 800a602:	f000 f8df 	bl	800a7c4 <_isatty_r>
 800a606:	b128      	cbz	r0, 800a614 <__smakebuf_r+0x70>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	f043 0301 	orr.w	r3, r3, #1
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	431d      	orrs	r5, r3
 800a618:	81a5      	strh	r5, [r4, #12]
 800a61a:	e7cf      	b.n	800a5bc <__smakebuf_r+0x18>

0800a61c <__swbuf_r>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	4614      	mov	r4, r2
 800a622:	4605      	mov	r5, r0
 800a624:	b118      	cbz	r0, 800a62e <__swbuf_r+0x12>
 800a626:	6a03      	ldr	r3, [r0, #32]
 800a628:	b90b      	cbnz	r3, 800a62e <__swbuf_r+0x12>
 800a62a:	f7fc ffa1 	bl	8007570 <__sinit>
 800a62e:	69a3      	ldr	r3, [r4, #24]
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	d525      	bpl.n	800a684 <__swbuf_r+0x68>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b31b      	cbz	r3, 800a684 <__swbuf_r+0x68>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	6922      	ldr	r2, [r4, #16]
 800a640:	1a98      	subs	r0, r3, r2
 800a642:	6963      	ldr	r3, [r4, #20]
 800a644:	b2f6      	uxtb	r6, r6
 800a646:	4283      	cmp	r3, r0
 800a648:	4637      	mov	r7, r6
 800a64a:	dc04      	bgt.n	800a656 <__swbuf_r+0x3a>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f7ff ff5a 	bl	800a508 <_fflush_r>
 800a654:	b9e0      	cbnz	r0, 800a690 <__swbuf_r+0x74>
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	3b01      	subs	r3, #1
 800a65a:	60a3      	str	r3, [r4, #8]
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	6022      	str	r2, [r4, #0]
 800a662:	701e      	strb	r6, [r3, #0]
 800a664:	6962      	ldr	r2, [r4, #20]
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	429a      	cmp	r2, r3
 800a66a:	d004      	beq.n	800a676 <__swbuf_r+0x5a>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	07db      	lsls	r3, r3, #31
 800a670:	d506      	bpl.n	800a680 <__swbuf_r+0x64>
 800a672:	2e0a      	cmp	r6, #10
 800a674:	d104      	bne.n	800a680 <__swbuf_r+0x64>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f7ff ff45 	bl	800a508 <_fflush_r>
 800a67e:	b938      	cbnz	r0, 800a690 <__swbuf_r+0x74>
 800a680:	4638      	mov	r0, r7
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a684:	4621      	mov	r1, r4
 800a686:	4628      	mov	r0, r5
 800a688:	f000 f806 	bl	800a698 <__swsetup_r>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d0d5      	beq.n	800a63c <__swbuf_r+0x20>
 800a690:	f04f 37ff 	mov.w	r7, #4294967295
 800a694:	e7f4      	b.n	800a680 <__swbuf_r+0x64>
	...

0800a698 <__swsetup_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <__swsetup_r+0xac>)
 800a69c:	4605      	mov	r5, r0
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	b118      	cbz	r0, 800a6ac <__swsetup_r+0x14>
 800a6a4:	6a03      	ldr	r3, [r0, #32]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <__swsetup_r+0x14>
 800a6a8:	f7fc ff62 	bl	8007570 <__sinit>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b2:	0718      	lsls	r0, r3, #28
 800a6b4:	d422      	bmi.n	800a6fc <__swsetup_r+0x64>
 800a6b6:	06d9      	lsls	r1, r3, #27
 800a6b8:	d407      	bmi.n	800a6ca <__swsetup_r+0x32>
 800a6ba:	2309      	movs	r3, #9
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	e034      	b.n	800a734 <__swsetup_r+0x9c>
 800a6ca:	0758      	lsls	r0, r3, #29
 800a6cc:	d512      	bpl.n	800a6f4 <__swsetup_r+0x5c>
 800a6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d0:	b141      	cbz	r1, 800a6e4 <__swsetup_r+0x4c>
 800a6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d002      	beq.n	800a6e0 <__swsetup_r+0x48>
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f7fd ffae 	bl	800863c <_free_r>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	6063      	str	r3, [r4, #4]
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f043 0308 	orr.w	r3, r3, #8
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	b94b      	cbnz	r3, 800a714 <__swsetup_r+0x7c>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70a:	d003      	beq.n	800a714 <__swsetup_r+0x7c>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4628      	mov	r0, r5
 800a710:	f7ff ff48 	bl	800a5a4 <__smakebuf_r>
 800a714:	89a0      	ldrh	r0, [r4, #12]
 800a716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a71a:	f010 0301 	ands.w	r3, r0, #1
 800a71e:	d00a      	beq.n	800a736 <__swsetup_r+0x9e>
 800a720:	2300      	movs	r3, #0
 800a722:	60a3      	str	r3, [r4, #8]
 800a724:	6963      	ldr	r3, [r4, #20]
 800a726:	425b      	negs	r3, r3
 800a728:	61a3      	str	r3, [r4, #24]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	b943      	cbnz	r3, 800a740 <__swsetup_r+0xa8>
 800a72e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a732:	d1c4      	bne.n	800a6be <__swsetup_r+0x26>
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	0781      	lsls	r1, r0, #30
 800a738:	bf58      	it	pl
 800a73a:	6963      	ldrpl	r3, [r4, #20]
 800a73c:	60a3      	str	r3, [r4, #8]
 800a73e:	e7f4      	b.n	800a72a <__swsetup_r+0x92>
 800a740:	2000      	movs	r0, #0
 800a742:	e7f7      	b.n	800a734 <__swsetup_r+0x9c>
 800a744:	20000064 	.word	0x20000064

0800a748 <memmove>:
 800a748:	4288      	cmp	r0, r1
 800a74a:	b510      	push	{r4, lr}
 800a74c:	eb01 0402 	add.w	r4, r1, r2
 800a750:	d902      	bls.n	800a758 <memmove+0x10>
 800a752:	4284      	cmp	r4, r0
 800a754:	4623      	mov	r3, r4
 800a756:	d807      	bhi.n	800a768 <memmove+0x20>
 800a758:	1e43      	subs	r3, r0, #1
 800a75a:	42a1      	cmp	r1, r4
 800a75c:	d008      	beq.n	800a770 <memmove+0x28>
 800a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a766:	e7f8      	b.n	800a75a <memmove+0x12>
 800a768:	4402      	add	r2, r0
 800a76a:	4601      	mov	r1, r0
 800a76c:	428a      	cmp	r2, r1
 800a76e:	d100      	bne.n	800a772 <memmove+0x2a>
 800a770:	bd10      	pop	{r4, pc}
 800a772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a77a:	e7f7      	b.n	800a76c <memmove+0x24>

0800a77c <strncmp>:
 800a77c:	b510      	push	{r4, lr}
 800a77e:	b16a      	cbz	r2, 800a79c <strncmp+0x20>
 800a780:	3901      	subs	r1, #1
 800a782:	1884      	adds	r4, r0, r2
 800a784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a788:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d103      	bne.n	800a798 <strncmp+0x1c>
 800a790:	42a0      	cmp	r0, r4
 800a792:	d001      	beq.n	800a798 <strncmp+0x1c>
 800a794:	2a00      	cmp	r2, #0
 800a796:	d1f5      	bne.n	800a784 <strncmp+0x8>
 800a798:	1ad0      	subs	r0, r2, r3
 800a79a:	bd10      	pop	{r4, pc}
 800a79c:	4610      	mov	r0, r2
 800a79e:	e7fc      	b.n	800a79a <strncmp+0x1e>

0800a7a0 <_fstat_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_fstat_r+0x20>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	f7f7 fe72 	bl	8002496 <_fstat>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	d102      	bne.n	800a7bc <_fstat_r+0x1c>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b103      	cbz	r3, 800a7bc <_fstat_r+0x1c>
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	bf00      	nop
 800a7c0:	20001b40 	.word	0x20001b40

0800a7c4 <_isatty_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_isatty_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f7 fe71 	bl	80024b6 <_isatty>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_isatty_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_isatty_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20001b40 	.word	0x20001b40

0800a7e4 <_sbrk_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d06      	ldr	r5, [pc, #24]	; (800a800 <_sbrk_r+0x1c>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7f7 fe7a 	bl	80024e8 <_sbrk>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_sbrk_r+0x1a>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_sbrk_r+0x1a>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20001b40 	.word	0x20001b40
 800a804:	00000000 	.word	0x00000000

0800a808 <nan>:
 800a808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a810 <nan+0x8>
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	00000000 	.word	0x00000000
 800a814:	7ff80000 	.word	0x7ff80000

0800a818 <__assert_func>:
 800a818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81a:	4614      	mov	r4, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <__assert_func+0x2c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4605      	mov	r5, r0
 800a824:	68d8      	ldr	r0, [r3, #12]
 800a826:	b14c      	cbz	r4, 800a83c <__assert_func+0x24>
 800a828:	4b07      	ldr	r3, [pc, #28]	; (800a848 <__assert_func+0x30>)
 800a82a:	9100      	str	r1, [sp, #0]
 800a82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a830:	4906      	ldr	r1, [pc, #24]	; (800a84c <__assert_func+0x34>)
 800a832:	462b      	mov	r3, r5
 800a834:	f000 fbca 	bl	800afcc <fiprintf>
 800a838:	f000 fbda 	bl	800aff0 <abort>
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <__assert_func+0x38>)
 800a83e:	461c      	mov	r4, r3
 800a840:	e7f3      	b.n	800a82a <__assert_func+0x12>
 800a842:	bf00      	nop
 800a844:	20000064 	.word	0x20000064
 800a848:	0800ba12 	.word	0x0800ba12
 800a84c:	0800ba1f 	.word	0x0800ba1f
 800a850:	0800ba4d 	.word	0x0800ba4d

0800a854 <_calloc_r>:
 800a854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a856:	fba1 2402 	umull	r2, r4, r1, r2
 800a85a:	b94c      	cbnz	r4, 800a870 <_calloc_r+0x1c>
 800a85c:	4611      	mov	r1, r2
 800a85e:	9201      	str	r2, [sp, #4]
 800a860:	f7fd ff60 	bl	8008724 <_malloc_r>
 800a864:	9a01      	ldr	r2, [sp, #4]
 800a866:	4605      	mov	r5, r0
 800a868:	b930      	cbnz	r0, 800a878 <_calloc_r+0x24>
 800a86a:	4628      	mov	r0, r5
 800a86c:	b003      	add	sp, #12
 800a86e:	bd30      	pop	{r4, r5, pc}
 800a870:	220c      	movs	r2, #12
 800a872:	6002      	str	r2, [r0, #0]
 800a874:	2500      	movs	r5, #0
 800a876:	e7f8      	b.n	800a86a <_calloc_r+0x16>
 800a878:	4621      	mov	r1, r4
 800a87a:	f7fc ffd2 	bl	8007822 <memset>
 800a87e:	e7f4      	b.n	800a86a <_calloc_r+0x16>

0800a880 <rshift>:
 800a880:	6903      	ldr	r3, [r0, #16]
 800a882:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a88a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a88e:	f100 0414 	add.w	r4, r0, #20
 800a892:	dd45      	ble.n	800a920 <rshift+0xa0>
 800a894:	f011 011f 	ands.w	r1, r1, #31
 800a898:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a89c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8a0:	d10c      	bne.n	800a8bc <rshift+0x3c>
 800a8a2:	f100 0710 	add.w	r7, r0, #16
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	42b1      	cmp	r1, r6
 800a8aa:	d334      	bcc.n	800a916 <rshift+0x96>
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	1eea      	subs	r2, r5, #3
 800a8b2:	4296      	cmp	r6, r2
 800a8b4:	bf38      	it	cc
 800a8b6:	2300      	movcc	r3, #0
 800a8b8:	4423      	add	r3, r4
 800a8ba:	e015      	b.n	800a8e8 <rshift+0x68>
 800a8bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8c0:	f1c1 0820 	rsb	r8, r1, #32
 800a8c4:	40cf      	lsrs	r7, r1
 800a8c6:	f105 0e04 	add.w	lr, r5, #4
 800a8ca:	46a1      	mov	r9, r4
 800a8cc:	4576      	cmp	r6, lr
 800a8ce:	46f4      	mov	ip, lr
 800a8d0:	d815      	bhi.n	800a8fe <rshift+0x7e>
 800a8d2:	1a9a      	subs	r2, r3, r2
 800a8d4:	0092      	lsls	r2, r2, #2
 800a8d6:	3a04      	subs	r2, #4
 800a8d8:	3501      	adds	r5, #1
 800a8da:	42ae      	cmp	r6, r5
 800a8dc:	bf38      	it	cc
 800a8de:	2200      	movcc	r2, #0
 800a8e0:	18a3      	adds	r3, r4, r2
 800a8e2:	50a7      	str	r7, [r4, r2]
 800a8e4:	b107      	cbz	r7, 800a8e8 <rshift+0x68>
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	1b1a      	subs	r2, r3, r4
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8f0:	bf08      	it	eq
 800a8f2:	2300      	moveq	r3, #0
 800a8f4:	6102      	str	r2, [r0, #16]
 800a8f6:	bf08      	it	eq
 800a8f8:	6143      	streq	r3, [r0, #20]
 800a8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8fe:	f8dc c000 	ldr.w	ip, [ip]
 800a902:	fa0c fc08 	lsl.w	ip, ip, r8
 800a906:	ea4c 0707 	orr.w	r7, ip, r7
 800a90a:	f849 7b04 	str.w	r7, [r9], #4
 800a90e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a912:	40cf      	lsrs	r7, r1
 800a914:	e7da      	b.n	800a8cc <rshift+0x4c>
 800a916:	f851 cb04 	ldr.w	ip, [r1], #4
 800a91a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a91e:	e7c3      	b.n	800a8a8 <rshift+0x28>
 800a920:	4623      	mov	r3, r4
 800a922:	e7e1      	b.n	800a8e8 <rshift+0x68>

0800a924 <__hexdig_fun>:
 800a924:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a928:	2b09      	cmp	r3, #9
 800a92a:	d802      	bhi.n	800a932 <__hexdig_fun+0xe>
 800a92c:	3820      	subs	r0, #32
 800a92e:	b2c0      	uxtb	r0, r0
 800a930:	4770      	bx	lr
 800a932:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a936:	2b05      	cmp	r3, #5
 800a938:	d801      	bhi.n	800a93e <__hexdig_fun+0x1a>
 800a93a:	3847      	subs	r0, #71	; 0x47
 800a93c:	e7f7      	b.n	800a92e <__hexdig_fun+0xa>
 800a93e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a942:	2b05      	cmp	r3, #5
 800a944:	d801      	bhi.n	800a94a <__hexdig_fun+0x26>
 800a946:	3827      	subs	r0, #39	; 0x27
 800a948:	e7f1      	b.n	800a92e <__hexdig_fun+0xa>
 800a94a:	2000      	movs	r0, #0
 800a94c:	4770      	bx	lr
	...

0800a950 <__gethex>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	4617      	mov	r7, r2
 800a956:	680a      	ldr	r2, [r1, #0]
 800a958:	b085      	sub	sp, #20
 800a95a:	f102 0b02 	add.w	fp, r2, #2
 800a95e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a962:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a966:	4681      	mov	r9, r0
 800a968:	468a      	mov	sl, r1
 800a96a:	9302      	str	r3, [sp, #8]
 800a96c:	32fe      	adds	r2, #254	; 0xfe
 800a96e:	eb02 030b 	add.w	r3, r2, fp
 800a972:	46d8      	mov	r8, fp
 800a974:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	2830      	cmp	r0, #48	; 0x30
 800a97c:	d0f7      	beq.n	800a96e <__gethex+0x1e>
 800a97e:	f7ff ffd1 	bl	800a924 <__hexdig_fun>
 800a982:	4604      	mov	r4, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	d138      	bne.n	800a9fa <__gethex+0xaa>
 800a988:	49a7      	ldr	r1, [pc, #668]	; (800ac28 <__gethex+0x2d8>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	4640      	mov	r0, r8
 800a98e:	f7ff fef5 	bl	800a77c <strncmp>
 800a992:	4606      	mov	r6, r0
 800a994:	2800      	cmp	r0, #0
 800a996:	d169      	bne.n	800aa6c <__gethex+0x11c>
 800a998:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a99c:	465d      	mov	r5, fp
 800a99e:	f7ff ffc1 	bl	800a924 <__hexdig_fun>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d064      	beq.n	800aa70 <__gethex+0x120>
 800a9a6:	465a      	mov	r2, fp
 800a9a8:	7810      	ldrb	r0, [r2, #0]
 800a9aa:	2830      	cmp	r0, #48	; 0x30
 800a9ac:	4690      	mov	r8, r2
 800a9ae:	f102 0201 	add.w	r2, r2, #1
 800a9b2:	d0f9      	beq.n	800a9a8 <__gethex+0x58>
 800a9b4:	f7ff ffb6 	bl	800a924 <__hexdig_fun>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	fab0 f480 	clz	r4, r0
 800a9be:	0964      	lsrs	r4, r4, #5
 800a9c0:	465e      	mov	r6, fp
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	4615      	mov	r5, r2
 800a9c8:	3201      	adds	r2, #1
 800a9ca:	7828      	ldrb	r0, [r5, #0]
 800a9cc:	f7ff ffaa 	bl	800a924 <__hexdig_fun>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d1f8      	bne.n	800a9c6 <__gethex+0x76>
 800a9d4:	4994      	ldr	r1, [pc, #592]	; (800ac28 <__gethex+0x2d8>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7ff fecf 	bl	800a77c <strncmp>
 800a9de:	b978      	cbnz	r0, 800aa00 <__gethex+0xb0>
 800a9e0:	b946      	cbnz	r6, 800a9f4 <__gethex+0xa4>
 800a9e2:	1c6e      	adds	r6, r5, #1
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	4615      	mov	r5, r2
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	7828      	ldrb	r0, [r5, #0]
 800a9ec:	f7ff ff9a 	bl	800a924 <__hexdig_fun>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d1f8      	bne.n	800a9e6 <__gethex+0x96>
 800a9f4:	1b73      	subs	r3, r6, r5
 800a9f6:	009e      	lsls	r6, r3, #2
 800a9f8:	e004      	b.n	800aa04 <__gethex+0xb4>
 800a9fa:	2400      	movs	r4, #0
 800a9fc:	4626      	mov	r6, r4
 800a9fe:	e7e1      	b.n	800a9c4 <__gethex+0x74>
 800aa00:	2e00      	cmp	r6, #0
 800aa02:	d1f7      	bne.n	800a9f4 <__gethex+0xa4>
 800aa04:	782b      	ldrb	r3, [r5, #0]
 800aa06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa0a:	2b50      	cmp	r3, #80	; 0x50
 800aa0c:	d13d      	bne.n	800aa8a <__gethex+0x13a>
 800aa0e:	786b      	ldrb	r3, [r5, #1]
 800aa10:	2b2b      	cmp	r3, #43	; 0x2b
 800aa12:	d02f      	beq.n	800aa74 <__gethex+0x124>
 800aa14:	2b2d      	cmp	r3, #45	; 0x2d
 800aa16:	d031      	beq.n	800aa7c <__gethex+0x12c>
 800aa18:	1c69      	adds	r1, r5, #1
 800aa1a:	f04f 0b00 	mov.w	fp, #0
 800aa1e:	7808      	ldrb	r0, [r1, #0]
 800aa20:	f7ff ff80 	bl	800a924 <__hexdig_fun>
 800aa24:	1e42      	subs	r2, r0, #1
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	2a18      	cmp	r2, #24
 800aa2a:	d82e      	bhi.n	800aa8a <__gethex+0x13a>
 800aa2c:	f1a0 0210 	sub.w	r2, r0, #16
 800aa30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa34:	f7ff ff76 	bl	800a924 <__hexdig_fun>
 800aa38:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa3c:	fa5f fc8c 	uxtb.w	ip, ip
 800aa40:	f1bc 0f18 	cmp.w	ip, #24
 800aa44:	d91d      	bls.n	800aa82 <__gethex+0x132>
 800aa46:	f1bb 0f00 	cmp.w	fp, #0
 800aa4a:	d000      	beq.n	800aa4e <__gethex+0xfe>
 800aa4c:	4252      	negs	r2, r2
 800aa4e:	4416      	add	r6, r2
 800aa50:	f8ca 1000 	str.w	r1, [sl]
 800aa54:	b1dc      	cbz	r4, 800aa8e <__gethex+0x13e>
 800aa56:	9b01      	ldr	r3, [sp, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bf14      	ite	ne
 800aa5c:	f04f 0800 	movne.w	r8, #0
 800aa60:	f04f 0806 	moveq.w	r8, #6
 800aa64:	4640      	mov	r0, r8
 800aa66:	b005      	add	sp, #20
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	4645      	mov	r5, r8
 800aa6e:	4626      	mov	r6, r4
 800aa70:	2401      	movs	r4, #1
 800aa72:	e7c7      	b.n	800aa04 <__gethex+0xb4>
 800aa74:	f04f 0b00 	mov.w	fp, #0
 800aa78:	1ca9      	adds	r1, r5, #2
 800aa7a:	e7d0      	b.n	800aa1e <__gethex+0xce>
 800aa7c:	f04f 0b01 	mov.w	fp, #1
 800aa80:	e7fa      	b.n	800aa78 <__gethex+0x128>
 800aa82:	230a      	movs	r3, #10
 800aa84:	fb03 0002 	mla	r0, r3, r2, r0
 800aa88:	e7d0      	b.n	800aa2c <__gethex+0xdc>
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	e7e0      	b.n	800aa50 <__gethex+0x100>
 800aa8e:	eba5 0308 	sub.w	r3, r5, r8
 800aa92:	3b01      	subs	r3, #1
 800aa94:	4621      	mov	r1, r4
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	dc0a      	bgt.n	800aab0 <__gethex+0x160>
 800aa9a:	4648      	mov	r0, r9
 800aa9c:	f7fd fece 	bl	800883c <_Balloc>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	b940      	cbnz	r0, 800aab6 <__gethex+0x166>
 800aaa4:	4b61      	ldr	r3, [pc, #388]	; (800ac2c <__gethex+0x2dc>)
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	21e4      	movs	r1, #228	; 0xe4
 800aaaa:	4861      	ldr	r0, [pc, #388]	; (800ac30 <__gethex+0x2e0>)
 800aaac:	f7ff feb4 	bl	800a818 <__assert_func>
 800aab0:	3101      	adds	r1, #1
 800aab2:	105b      	asrs	r3, r3, #1
 800aab4:	e7ef      	b.n	800aa96 <__gethex+0x146>
 800aab6:	f100 0a14 	add.w	sl, r0, #20
 800aaba:	2300      	movs	r3, #0
 800aabc:	495a      	ldr	r1, [pc, #360]	; (800ac28 <__gethex+0x2d8>)
 800aabe:	f8cd a004 	str.w	sl, [sp, #4]
 800aac2:	469b      	mov	fp, r3
 800aac4:	45a8      	cmp	r8, r5
 800aac6:	d342      	bcc.n	800ab4e <__gethex+0x1fe>
 800aac8:	9801      	ldr	r0, [sp, #4]
 800aaca:	f840 bb04 	str.w	fp, [r0], #4
 800aace:	eba0 000a 	sub.w	r0, r0, sl
 800aad2:	1080      	asrs	r0, r0, #2
 800aad4:	6120      	str	r0, [r4, #16]
 800aad6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aada:	4658      	mov	r0, fp
 800aadc:	f7fd ffa0 	bl	8008a20 <__hi0bits>
 800aae0:	683d      	ldr	r5, [r7, #0]
 800aae2:	eba8 0000 	sub.w	r0, r8, r0
 800aae6:	42a8      	cmp	r0, r5
 800aae8:	dd59      	ble.n	800ab9e <__gethex+0x24e>
 800aaea:	eba0 0805 	sub.w	r8, r0, r5
 800aaee:	4641      	mov	r1, r8
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f7fe fb2f 	bl	8009154 <__any_on>
 800aaf6:	4683      	mov	fp, r0
 800aaf8:	b1b8      	cbz	r0, 800ab2a <__gethex+0x1da>
 800aafa:	f108 33ff 	add.w	r3, r8, #4294967295
 800aafe:	1159      	asrs	r1, r3, #5
 800ab00:	f003 021f 	and.w	r2, r3, #31
 800ab04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab08:	f04f 0b01 	mov.w	fp, #1
 800ab0c:	fa0b f202 	lsl.w	r2, fp, r2
 800ab10:	420a      	tst	r2, r1
 800ab12:	d00a      	beq.n	800ab2a <__gethex+0x1da>
 800ab14:	455b      	cmp	r3, fp
 800ab16:	dd06      	ble.n	800ab26 <__gethex+0x1d6>
 800ab18:	f1a8 0102 	sub.w	r1, r8, #2
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7fe fb19 	bl	8009154 <__any_on>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d138      	bne.n	800ab98 <__gethex+0x248>
 800ab26:	f04f 0b02 	mov.w	fp, #2
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7ff fea7 	bl	800a880 <rshift>
 800ab32:	4446      	add	r6, r8
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	42b3      	cmp	r3, r6
 800ab38:	da41      	bge.n	800abbe <__gethex+0x26e>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4648      	mov	r0, r9
 800ab3e:	f7fd febd 	bl	80088bc <_Bfree>
 800ab42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab44:	2300      	movs	r3, #0
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ab4c:	e78a      	b.n	800aa64 <__gethex+0x114>
 800ab4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ab52:	2a2e      	cmp	r2, #46	; 0x2e
 800ab54:	d014      	beq.n	800ab80 <__gethex+0x230>
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	d106      	bne.n	800ab68 <__gethex+0x218>
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	f843 bb04 	str.w	fp, [r3], #4
 800ab60:	f04f 0b00 	mov.w	fp, #0
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	465b      	mov	r3, fp
 800ab68:	7828      	ldrb	r0, [r5, #0]
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	f7ff feda 	bl	800a924 <__hexdig_fun>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	f000 000f 	and.w	r0, r0, #15
 800ab76:	4098      	lsls	r0, r3
 800ab78:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	e7a1      	b.n	800aac4 <__gethex+0x174>
 800ab80:	45a8      	cmp	r8, r5
 800ab82:	d8e8      	bhi.n	800ab56 <__gethex+0x206>
 800ab84:	2201      	movs	r2, #1
 800ab86:	4628      	mov	r0, r5
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	f7ff fdf7 	bl	800a77c <strncmp>
 800ab8e:	4926      	ldr	r1, [pc, #152]	; (800ac28 <__gethex+0x2d8>)
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d1df      	bne.n	800ab56 <__gethex+0x206>
 800ab96:	e795      	b.n	800aac4 <__gethex+0x174>
 800ab98:	f04f 0b03 	mov.w	fp, #3
 800ab9c:	e7c5      	b.n	800ab2a <__gethex+0x1da>
 800ab9e:	da0b      	bge.n	800abb8 <__gethex+0x268>
 800aba0:	eba5 0800 	sub.w	r8, r5, r0
 800aba4:	4621      	mov	r1, r4
 800aba6:	4642      	mov	r2, r8
 800aba8:	4648      	mov	r0, r9
 800abaa:	f7fe f8a1 	bl	8008cf0 <__lshift>
 800abae:	eba6 0608 	sub.w	r6, r6, r8
 800abb2:	4604      	mov	r4, r0
 800abb4:	f100 0a14 	add.w	sl, r0, #20
 800abb8:	f04f 0b00 	mov.w	fp, #0
 800abbc:	e7ba      	b.n	800ab34 <__gethex+0x1e4>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	42b3      	cmp	r3, r6
 800abc2:	dd73      	ble.n	800acac <__gethex+0x35c>
 800abc4:	1b9e      	subs	r6, r3, r6
 800abc6:	42b5      	cmp	r5, r6
 800abc8:	dc34      	bgt.n	800ac34 <__gethex+0x2e4>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d023      	beq.n	800ac18 <__gethex+0x2c8>
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d025      	beq.n	800ac20 <__gethex+0x2d0>
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d115      	bne.n	800ac04 <__gethex+0x2b4>
 800abd8:	42b5      	cmp	r5, r6
 800abda:	d113      	bne.n	800ac04 <__gethex+0x2b4>
 800abdc:	2d01      	cmp	r5, #1
 800abde:	d10b      	bne.n	800abf8 <__gethex+0x2a8>
 800abe0:	9a02      	ldr	r2, [sp, #8]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	6123      	str	r3, [r4, #16]
 800abea:	f8ca 3000 	str.w	r3, [sl]
 800abee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abf0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800abf4:	601c      	str	r4, [r3, #0]
 800abf6:	e735      	b.n	800aa64 <__gethex+0x114>
 800abf8:	1e69      	subs	r1, r5, #1
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7fe faaa 	bl	8009154 <__any_on>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d1ed      	bne.n	800abe0 <__gethex+0x290>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4648      	mov	r0, r9
 800ac08:	f7fd fe58 	bl	80088bc <_Bfree>
 800ac0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ac16:	e725      	b.n	800aa64 <__gethex+0x114>
 800ac18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1f2      	bne.n	800ac04 <__gethex+0x2b4>
 800ac1e:	e7df      	b.n	800abe0 <__gethex+0x290>
 800ac20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1dc      	bne.n	800abe0 <__gethex+0x290>
 800ac26:	e7ed      	b.n	800ac04 <__gethex+0x2b4>
 800ac28:	0800b8a4 	.word	0x0800b8a4
 800ac2c:	0800b73d 	.word	0x0800b73d
 800ac30:	0800ba4e 	.word	0x0800ba4e
 800ac34:	f106 38ff 	add.w	r8, r6, #4294967295
 800ac38:	f1bb 0f00 	cmp.w	fp, #0
 800ac3c:	d133      	bne.n	800aca6 <__gethex+0x356>
 800ac3e:	f1b8 0f00 	cmp.w	r8, #0
 800ac42:	d004      	beq.n	800ac4e <__gethex+0x2fe>
 800ac44:	4641      	mov	r1, r8
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7fe fa84 	bl	8009154 <__any_on>
 800ac4c:	4683      	mov	fp, r0
 800ac4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ac52:	2301      	movs	r3, #1
 800ac54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac58:	f008 081f 	and.w	r8, r8, #31
 800ac5c:	fa03 f308 	lsl.w	r3, r3, r8
 800ac60:	4213      	tst	r3, r2
 800ac62:	4631      	mov	r1, r6
 800ac64:	4620      	mov	r0, r4
 800ac66:	bf18      	it	ne
 800ac68:	f04b 0b02 	orrne.w	fp, fp, #2
 800ac6c:	1bad      	subs	r5, r5, r6
 800ac6e:	f7ff fe07 	bl	800a880 <rshift>
 800ac72:	687e      	ldr	r6, [r7, #4]
 800ac74:	f04f 0802 	mov.w	r8, #2
 800ac78:	f1bb 0f00 	cmp.w	fp, #0
 800ac7c:	d04a      	beq.n	800ad14 <__gethex+0x3c4>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d016      	beq.n	800acb2 <__gethex+0x362>
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d018      	beq.n	800acba <__gethex+0x36a>
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d109      	bne.n	800aca0 <__gethex+0x350>
 800ac8c:	f01b 0f02 	tst.w	fp, #2
 800ac90:	d006      	beq.n	800aca0 <__gethex+0x350>
 800ac92:	f8da 3000 	ldr.w	r3, [sl]
 800ac96:	ea4b 0b03 	orr.w	fp, fp, r3
 800ac9a:	f01b 0f01 	tst.w	fp, #1
 800ac9e:	d10f      	bne.n	800acc0 <__gethex+0x370>
 800aca0:	f048 0810 	orr.w	r8, r8, #16
 800aca4:	e036      	b.n	800ad14 <__gethex+0x3c4>
 800aca6:	f04f 0b01 	mov.w	fp, #1
 800acaa:	e7d0      	b.n	800ac4e <__gethex+0x2fe>
 800acac:	f04f 0801 	mov.w	r8, #1
 800acb0:	e7e2      	b.n	800ac78 <__gethex+0x328>
 800acb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb4:	f1c3 0301 	rsb	r3, r3, #1
 800acb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0ef      	beq.n	800aca0 <__gethex+0x350>
 800acc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acc4:	f104 0214 	add.w	r2, r4, #20
 800acc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800acd2:	2300      	movs	r3, #0
 800acd4:	4694      	mov	ip, r2
 800acd6:	f852 1b04 	ldr.w	r1, [r2], #4
 800acda:	f1b1 3fff 	cmp.w	r1, #4294967295
 800acde:	d01e      	beq.n	800ad1e <__gethex+0x3ce>
 800ace0:	3101      	adds	r1, #1
 800ace2:	f8cc 1000 	str.w	r1, [ip]
 800ace6:	f1b8 0f02 	cmp.w	r8, #2
 800acea:	f104 0214 	add.w	r2, r4, #20
 800acee:	d13d      	bne.n	800ad6c <__gethex+0x41c>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	42ab      	cmp	r3, r5
 800acf6:	d10b      	bne.n	800ad10 <__gethex+0x3c0>
 800acf8:	1169      	asrs	r1, r5, #5
 800acfa:	2301      	movs	r3, #1
 800acfc:	f005 051f 	and.w	r5, r5, #31
 800ad00:	fa03 f505 	lsl.w	r5, r3, r5
 800ad04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad08:	421d      	tst	r5, r3
 800ad0a:	bf18      	it	ne
 800ad0c:	f04f 0801 	movne.w	r8, #1
 800ad10:	f048 0820 	orr.w	r8, r8, #32
 800ad14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad16:	601c      	str	r4, [r3, #0]
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	601e      	str	r6, [r3, #0]
 800ad1c:	e6a2      	b.n	800aa64 <__gethex+0x114>
 800ad1e:	4290      	cmp	r0, r2
 800ad20:	f842 3c04 	str.w	r3, [r2, #-4]
 800ad24:	d8d6      	bhi.n	800acd4 <__gethex+0x384>
 800ad26:	68a2      	ldr	r2, [r4, #8]
 800ad28:	4593      	cmp	fp, r2
 800ad2a:	db17      	blt.n	800ad5c <__gethex+0x40c>
 800ad2c:	6861      	ldr	r1, [r4, #4]
 800ad2e:	4648      	mov	r0, r9
 800ad30:	3101      	adds	r1, #1
 800ad32:	f7fd fd83 	bl	800883c <_Balloc>
 800ad36:	4682      	mov	sl, r0
 800ad38:	b918      	cbnz	r0, 800ad42 <__gethex+0x3f2>
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <__gethex+0x458>)
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	2184      	movs	r1, #132	; 0x84
 800ad40:	e6b3      	b.n	800aaaa <__gethex+0x15a>
 800ad42:	6922      	ldr	r2, [r4, #16]
 800ad44:	3202      	adds	r2, #2
 800ad46:	f104 010c 	add.w	r1, r4, #12
 800ad4a:	0092      	lsls	r2, r2, #2
 800ad4c:	300c      	adds	r0, #12
 800ad4e:	f7fc fde7 	bl	8007920 <memcpy>
 800ad52:	4621      	mov	r1, r4
 800ad54:	4648      	mov	r0, r9
 800ad56:	f7fd fdb1 	bl	80088bc <_Bfree>
 800ad5a:	4654      	mov	r4, sl
 800ad5c:	6922      	ldr	r2, [r4, #16]
 800ad5e:	1c51      	adds	r1, r2, #1
 800ad60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad64:	6121      	str	r1, [r4, #16]
 800ad66:	2101      	movs	r1, #1
 800ad68:	6151      	str	r1, [r2, #20]
 800ad6a:	e7bc      	b.n	800ace6 <__gethex+0x396>
 800ad6c:	6921      	ldr	r1, [r4, #16]
 800ad6e:	4559      	cmp	r1, fp
 800ad70:	dd0b      	ble.n	800ad8a <__gethex+0x43a>
 800ad72:	2101      	movs	r1, #1
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff fd83 	bl	800a880 <rshift>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	42b3      	cmp	r3, r6
 800ad80:	f6ff aedb 	blt.w	800ab3a <__gethex+0x1ea>
 800ad84:	f04f 0801 	mov.w	r8, #1
 800ad88:	e7c2      	b.n	800ad10 <__gethex+0x3c0>
 800ad8a:	f015 051f 	ands.w	r5, r5, #31
 800ad8e:	d0f9      	beq.n	800ad84 <__gethex+0x434>
 800ad90:	9b01      	ldr	r3, [sp, #4]
 800ad92:	441a      	add	r2, r3
 800ad94:	f1c5 0520 	rsb	r5, r5, #32
 800ad98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ad9c:	f7fd fe40 	bl	8008a20 <__hi0bits>
 800ada0:	42a8      	cmp	r0, r5
 800ada2:	dbe6      	blt.n	800ad72 <__gethex+0x422>
 800ada4:	e7ee      	b.n	800ad84 <__gethex+0x434>
 800ada6:	bf00      	nop
 800ada8:	0800b73d 	.word	0x0800b73d

0800adac <L_shift>:
 800adac:	f1c2 0208 	rsb	r2, r2, #8
 800adb0:	0092      	lsls	r2, r2, #2
 800adb2:	b570      	push	{r4, r5, r6, lr}
 800adb4:	f1c2 0620 	rsb	r6, r2, #32
 800adb8:	6843      	ldr	r3, [r0, #4]
 800adba:	6804      	ldr	r4, [r0, #0]
 800adbc:	fa03 f506 	lsl.w	r5, r3, r6
 800adc0:	432c      	orrs	r4, r5
 800adc2:	40d3      	lsrs	r3, r2
 800adc4:	6004      	str	r4, [r0, #0]
 800adc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800adca:	4288      	cmp	r0, r1
 800adcc:	d3f4      	bcc.n	800adb8 <L_shift+0xc>
 800adce:	bd70      	pop	{r4, r5, r6, pc}

0800add0 <__match>:
 800add0:	b530      	push	{r4, r5, lr}
 800add2:	6803      	ldr	r3, [r0, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adda:	b914      	cbnz	r4, 800ade2 <__match+0x12>
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	2001      	movs	r0, #1
 800ade0:	bd30      	pop	{r4, r5, pc}
 800ade2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adea:	2d19      	cmp	r5, #25
 800adec:	bf98      	it	ls
 800adee:	3220      	addls	r2, #32
 800adf0:	42a2      	cmp	r2, r4
 800adf2:	d0f0      	beq.n	800add6 <__match+0x6>
 800adf4:	2000      	movs	r0, #0
 800adf6:	e7f3      	b.n	800ade0 <__match+0x10>

0800adf8 <__hexnan>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	680b      	ldr	r3, [r1, #0]
 800adfe:	6801      	ldr	r1, [r0, #0]
 800ae00:	115e      	asrs	r6, r3, #5
 800ae02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae06:	f013 031f 	ands.w	r3, r3, #31
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	bf18      	it	ne
 800ae0e:	3604      	addne	r6, #4
 800ae10:	2500      	movs	r5, #0
 800ae12:	1f37      	subs	r7, r6, #4
 800ae14:	4682      	mov	sl, r0
 800ae16:	4690      	mov	r8, r2
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae1e:	46b9      	mov	r9, r7
 800ae20:	463c      	mov	r4, r7
 800ae22:	9502      	str	r5, [sp, #8]
 800ae24:	46ab      	mov	fp, r5
 800ae26:	784a      	ldrb	r2, [r1, #1]
 800ae28:	1c4b      	adds	r3, r1, #1
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	b342      	cbz	r2, 800ae80 <__hexnan+0x88>
 800ae2e:	4610      	mov	r0, r2
 800ae30:	9105      	str	r1, [sp, #20]
 800ae32:	9204      	str	r2, [sp, #16]
 800ae34:	f7ff fd76 	bl	800a924 <__hexdig_fun>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d14f      	bne.n	800aedc <__hexnan+0xe4>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	9905      	ldr	r1, [sp, #20]
 800ae40:	2a20      	cmp	r2, #32
 800ae42:	d818      	bhi.n	800ae76 <__hexnan+0x7e>
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	459b      	cmp	fp, r3
 800ae48:	dd13      	ble.n	800ae72 <__hexnan+0x7a>
 800ae4a:	454c      	cmp	r4, r9
 800ae4c:	d206      	bcs.n	800ae5c <__hexnan+0x64>
 800ae4e:	2d07      	cmp	r5, #7
 800ae50:	dc04      	bgt.n	800ae5c <__hexnan+0x64>
 800ae52:	462a      	mov	r2, r5
 800ae54:	4649      	mov	r1, r9
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff ffa8 	bl	800adac <L_shift>
 800ae5c:	4544      	cmp	r4, r8
 800ae5e:	d950      	bls.n	800af02 <__hexnan+0x10a>
 800ae60:	2300      	movs	r3, #0
 800ae62:	f1a4 0904 	sub.w	r9, r4, #4
 800ae66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ae6e:	464c      	mov	r4, r9
 800ae70:	461d      	mov	r5, r3
 800ae72:	9903      	ldr	r1, [sp, #12]
 800ae74:	e7d7      	b.n	800ae26 <__hexnan+0x2e>
 800ae76:	2a29      	cmp	r2, #41	; 0x29
 800ae78:	d155      	bne.n	800af26 <__hexnan+0x12e>
 800ae7a:	3102      	adds	r1, #2
 800ae7c:	f8ca 1000 	str.w	r1, [sl]
 800ae80:	f1bb 0f00 	cmp.w	fp, #0
 800ae84:	d04f      	beq.n	800af26 <__hexnan+0x12e>
 800ae86:	454c      	cmp	r4, r9
 800ae88:	d206      	bcs.n	800ae98 <__hexnan+0xa0>
 800ae8a:	2d07      	cmp	r5, #7
 800ae8c:	dc04      	bgt.n	800ae98 <__hexnan+0xa0>
 800ae8e:	462a      	mov	r2, r5
 800ae90:	4649      	mov	r1, r9
 800ae92:	4620      	mov	r0, r4
 800ae94:	f7ff ff8a 	bl	800adac <L_shift>
 800ae98:	4544      	cmp	r4, r8
 800ae9a:	d934      	bls.n	800af06 <__hexnan+0x10e>
 800ae9c:	f1a8 0204 	sub.w	r2, r8, #4
 800aea0:	4623      	mov	r3, r4
 800aea2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aea6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeaa:	429f      	cmp	r7, r3
 800aeac:	d2f9      	bcs.n	800aea2 <__hexnan+0xaa>
 800aeae:	1b3b      	subs	r3, r7, r4
 800aeb0:	f023 0303 	bic.w	r3, r3, #3
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	3e03      	subs	r6, #3
 800aeb8:	3401      	adds	r4, #1
 800aeba:	42a6      	cmp	r6, r4
 800aebc:	bf38      	it	cc
 800aebe:	2304      	movcc	r3, #4
 800aec0:	4443      	add	r3, r8
 800aec2:	2200      	movs	r2, #0
 800aec4:	f843 2b04 	str.w	r2, [r3], #4
 800aec8:	429f      	cmp	r7, r3
 800aeca:	d2fb      	bcs.n	800aec4 <__hexnan+0xcc>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	b91b      	cbnz	r3, 800aed8 <__hexnan+0xe0>
 800aed0:	4547      	cmp	r7, r8
 800aed2:	d126      	bne.n	800af22 <__hexnan+0x12a>
 800aed4:	2301      	movs	r3, #1
 800aed6:	603b      	str	r3, [r7, #0]
 800aed8:	2005      	movs	r0, #5
 800aeda:	e025      	b.n	800af28 <__hexnan+0x130>
 800aedc:	3501      	adds	r5, #1
 800aede:	2d08      	cmp	r5, #8
 800aee0:	f10b 0b01 	add.w	fp, fp, #1
 800aee4:	dd06      	ble.n	800aef4 <__hexnan+0xfc>
 800aee6:	4544      	cmp	r4, r8
 800aee8:	d9c3      	bls.n	800ae72 <__hexnan+0x7a>
 800aeea:	2300      	movs	r3, #0
 800aeec:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef0:	2501      	movs	r5, #1
 800aef2:	3c04      	subs	r4, #4
 800aef4:	6822      	ldr	r2, [r4, #0]
 800aef6:	f000 000f 	and.w	r0, r0, #15
 800aefa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aefe:	6020      	str	r0, [r4, #0]
 800af00:	e7b7      	b.n	800ae72 <__hexnan+0x7a>
 800af02:	2508      	movs	r5, #8
 800af04:	e7b5      	b.n	800ae72 <__hexnan+0x7a>
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0df      	beq.n	800aecc <__hexnan+0xd4>
 800af0c:	f1c3 0320 	rsb	r3, r3, #32
 800af10:	f04f 32ff 	mov.w	r2, #4294967295
 800af14:	40da      	lsrs	r2, r3
 800af16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af1a:	4013      	ands	r3, r2
 800af1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800af20:	e7d4      	b.n	800aecc <__hexnan+0xd4>
 800af22:	3f04      	subs	r7, #4
 800af24:	e7d2      	b.n	800aecc <__hexnan+0xd4>
 800af26:	2004      	movs	r0, #4
 800af28:	b007      	add	sp, #28
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af2e <__ascii_mbtowc>:
 800af2e:	b082      	sub	sp, #8
 800af30:	b901      	cbnz	r1, 800af34 <__ascii_mbtowc+0x6>
 800af32:	a901      	add	r1, sp, #4
 800af34:	b142      	cbz	r2, 800af48 <__ascii_mbtowc+0x1a>
 800af36:	b14b      	cbz	r3, 800af4c <__ascii_mbtowc+0x1e>
 800af38:	7813      	ldrb	r3, [r2, #0]
 800af3a:	600b      	str	r3, [r1, #0]
 800af3c:	7812      	ldrb	r2, [r2, #0]
 800af3e:	1e10      	subs	r0, r2, #0
 800af40:	bf18      	it	ne
 800af42:	2001      	movne	r0, #1
 800af44:	b002      	add	sp, #8
 800af46:	4770      	bx	lr
 800af48:	4610      	mov	r0, r2
 800af4a:	e7fb      	b.n	800af44 <__ascii_mbtowc+0x16>
 800af4c:	f06f 0001 	mvn.w	r0, #1
 800af50:	e7f8      	b.n	800af44 <__ascii_mbtowc+0x16>

0800af52 <_realloc_r>:
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	4680      	mov	r8, r0
 800af58:	4614      	mov	r4, r2
 800af5a:	460e      	mov	r6, r1
 800af5c:	b921      	cbnz	r1, 800af68 <_realloc_r+0x16>
 800af5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	4611      	mov	r1, r2
 800af64:	f7fd bbde 	b.w	8008724 <_malloc_r>
 800af68:	b92a      	cbnz	r2, 800af76 <_realloc_r+0x24>
 800af6a:	f7fd fb67 	bl	800863c <_free_r>
 800af6e:	4625      	mov	r5, r4
 800af70:	4628      	mov	r0, r5
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af76:	f000 f842 	bl	800affe <_malloc_usable_size_r>
 800af7a:	4284      	cmp	r4, r0
 800af7c:	4607      	mov	r7, r0
 800af7e:	d802      	bhi.n	800af86 <_realloc_r+0x34>
 800af80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af84:	d812      	bhi.n	800afac <_realloc_r+0x5a>
 800af86:	4621      	mov	r1, r4
 800af88:	4640      	mov	r0, r8
 800af8a:	f7fd fbcb 	bl	8008724 <_malloc_r>
 800af8e:	4605      	mov	r5, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d0ed      	beq.n	800af70 <_realloc_r+0x1e>
 800af94:	42bc      	cmp	r4, r7
 800af96:	4622      	mov	r2, r4
 800af98:	4631      	mov	r1, r6
 800af9a:	bf28      	it	cs
 800af9c:	463a      	movcs	r2, r7
 800af9e:	f7fc fcbf 	bl	8007920 <memcpy>
 800afa2:	4631      	mov	r1, r6
 800afa4:	4640      	mov	r0, r8
 800afa6:	f7fd fb49 	bl	800863c <_free_r>
 800afaa:	e7e1      	b.n	800af70 <_realloc_r+0x1e>
 800afac:	4635      	mov	r5, r6
 800afae:	e7df      	b.n	800af70 <_realloc_r+0x1e>

0800afb0 <__ascii_wctomb>:
 800afb0:	b149      	cbz	r1, 800afc6 <__ascii_wctomb+0x16>
 800afb2:	2aff      	cmp	r2, #255	; 0xff
 800afb4:	bf85      	ittet	hi
 800afb6:	238a      	movhi	r3, #138	; 0x8a
 800afb8:	6003      	strhi	r3, [r0, #0]
 800afba:	700a      	strbls	r2, [r1, #0]
 800afbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800afc0:	bf98      	it	ls
 800afc2:	2001      	movls	r0, #1
 800afc4:	4770      	bx	lr
 800afc6:	4608      	mov	r0, r1
 800afc8:	4770      	bx	lr
	...

0800afcc <fiprintf>:
 800afcc:	b40e      	push	{r1, r2, r3}
 800afce:	b503      	push	{r0, r1, lr}
 800afd0:	4601      	mov	r1, r0
 800afd2:	ab03      	add	r3, sp, #12
 800afd4:	4805      	ldr	r0, [pc, #20]	; (800afec <fiprintf+0x20>)
 800afd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afda:	6800      	ldr	r0, [r0, #0]
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	f7ff f8f3 	bl	800a1c8 <_vfiprintf_r>
 800afe2:	b002      	add	sp, #8
 800afe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe8:	b003      	add	sp, #12
 800afea:	4770      	bx	lr
 800afec:	20000064 	.word	0x20000064

0800aff0 <abort>:
 800aff0:	b508      	push	{r3, lr}
 800aff2:	2006      	movs	r0, #6
 800aff4:	f000 f834 	bl	800b060 <raise>
 800aff8:	2001      	movs	r0, #1
 800affa:	f7f7 f9fd 	bl	80023f8 <_exit>

0800affe <_malloc_usable_size_r>:
 800affe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b002:	1f18      	subs	r0, r3, #4
 800b004:	2b00      	cmp	r3, #0
 800b006:	bfbc      	itt	lt
 800b008:	580b      	ldrlt	r3, [r1, r0]
 800b00a:	18c0      	addlt	r0, r0, r3
 800b00c:	4770      	bx	lr

0800b00e <_raise_r>:
 800b00e:	291f      	cmp	r1, #31
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4604      	mov	r4, r0
 800b014:	460d      	mov	r5, r1
 800b016:	d904      	bls.n	800b022 <_raise_r+0x14>
 800b018:	2316      	movs	r3, #22
 800b01a:	6003      	str	r3, [r0, #0]
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b024:	b112      	cbz	r2, 800b02c <_raise_r+0x1e>
 800b026:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b02a:	b94b      	cbnz	r3, 800b040 <_raise_r+0x32>
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 f831 	bl	800b094 <_getpid_r>
 800b032:	462a      	mov	r2, r5
 800b034:	4601      	mov	r1, r0
 800b036:	4620      	mov	r0, r4
 800b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b03c:	f000 b818 	b.w	800b070 <_kill_r>
 800b040:	2b01      	cmp	r3, #1
 800b042:	d00a      	beq.n	800b05a <_raise_r+0x4c>
 800b044:	1c59      	adds	r1, r3, #1
 800b046:	d103      	bne.n	800b050 <_raise_r+0x42>
 800b048:	2316      	movs	r3, #22
 800b04a:	6003      	str	r3, [r0, #0]
 800b04c:	2001      	movs	r0, #1
 800b04e:	e7e7      	b.n	800b020 <_raise_r+0x12>
 800b050:	2400      	movs	r4, #0
 800b052:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b056:	4628      	mov	r0, r5
 800b058:	4798      	blx	r3
 800b05a:	2000      	movs	r0, #0
 800b05c:	e7e0      	b.n	800b020 <_raise_r+0x12>
	...

0800b060 <raise>:
 800b060:	4b02      	ldr	r3, [pc, #8]	; (800b06c <raise+0xc>)
 800b062:	4601      	mov	r1, r0
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f7ff bfd2 	b.w	800b00e <_raise_r>
 800b06a:	bf00      	nop
 800b06c:	20000064 	.word	0x20000064

0800b070 <_kill_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d07      	ldr	r5, [pc, #28]	; (800b090 <_kill_r+0x20>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	602b      	str	r3, [r5, #0]
 800b07e:	f7f7 f9ab 	bl	80023d8 <_kill>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	d102      	bne.n	800b08c <_kill_r+0x1c>
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	b103      	cbz	r3, 800b08c <_kill_r+0x1c>
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	20001b40 	.word	0x20001b40

0800b094 <_getpid_r>:
 800b094:	f7f7 b998 	b.w	80023c8 <_getpid>

0800b098 <atan2>:
 800b098:	f000 b802 	b.w	800b0a0 <__ieee754_atan2>
 800b09c:	0000      	movs	r0, r0
	...

0800b0a0 <__ieee754_atan2>:
 800b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	ec57 6b11 	vmov	r6, r7, d1
 800b0a8:	4273      	negs	r3, r6
 800b0aa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b228 <__ieee754_atan2+0x188>
 800b0ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b0b2:	4333      	orrs	r3, r6
 800b0b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b0b8:	4543      	cmp	r3, r8
 800b0ba:	ec51 0b10 	vmov	r0, r1, d0
 800b0be:	ee11 5a10 	vmov	r5, s2
 800b0c2:	d80a      	bhi.n	800b0da <__ieee754_atan2+0x3a>
 800b0c4:	4244      	negs	r4, r0
 800b0c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0ca:	4304      	orrs	r4, r0
 800b0cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b0d0:	4544      	cmp	r4, r8
 800b0d2:	ee10 9a10 	vmov	r9, s0
 800b0d6:	468e      	mov	lr, r1
 800b0d8:	d907      	bls.n	800b0ea <__ieee754_atan2+0x4a>
 800b0da:	4632      	mov	r2, r6
 800b0dc:	463b      	mov	r3, r7
 800b0de:	f7f5 f8e5 	bl	80002ac <__adddf3>
 800b0e2:	ec41 0b10 	vmov	d0, r0, r1
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b0ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b0f2:	4334      	orrs	r4, r6
 800b0f4:	d103      	bne.n	800b0fe <__ieee754_atan2+0x5e>
 800b0f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0fa:	f000 b899 	b.w	800b230 <atan>
 800b0fe:	17bc      	asrs	r4, r7, #30
 800b100:	f004 0402 	and.w	r4, r4, #2
 800b104:	ea53 0909 	orrs.w	r9, r3, r9
 800b108:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b10c:	d107      	bne.n	800b11e <__ieee754_atan2+0x7e>
 800b10e:	2c02      	cmp	r4, #2
 800b110:	d05f      	beq.n	800b1d2 <__ieee754_atan2+0x132>
 800b112:	2c03      	cmp	r4, #3
 800b114:	d1e5      	bne.n	800b0e2 <__ieee754_atan2+0x42>
 800b116:	a140      	add	r1, pc, #256	; (adr r1, 800b218 <__ieee754_atan2+0x178>)
 800b118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b11c:	e7e1      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b11e:	4315      	orrs	r5, r2
 800b120:	d106      	bne.n	800b130 <__ieee754_atan2+0x90>
 800b122:	f1be 0f00 	cmp.w	lr, #0
 800b126:	da5f      	bge.n	800b1e8 <__ieee754_atan2+0x148>
 800b128:	a13d      	add	r1, pc, #244	; (adr r1, 800b220 <__ieee754_atan2+0x180>)
 800b12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12e:	e7d8      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b130:	4542      	cmp	r2, r8
 800b132:	d10f      	bne.n	800b154 <__ieee754_atan2+0xb4>
 800b134:	4293      	cmp	r3, r2
 800b136:	f104 34ff 	add.w	r4, r4, #4294967295
 800b13a:	d107      	bne.n	800b14c <__ieee754_atan2+0xac>
 800b13c:	2c02      	cmp	r4, #2
 800b13e:	d84c      	bhi.n	800b1da <__ieee754_atan2+0x13a>
 800b140:	4b33      	ldr	r3, [pc, #204]	; (800b210 <__ieee754_atan2+0x170>)
 800b142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b14a:	e7ca      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b14c:	2c02      	cmp	r4, #2
 800b14e:	d848      	bhi.n	800b1e2 <__ieee754_atan2+0x142>
 800b150:	4b30      	ldr	r3, [pc, #192]	; (800b214 <__ieee754_atan2+0x174>)
 800b152:	e7f6      	b.n	800b142 <__ieee754_atan2+0xa2>
 800b154:	4543      	cmp	r3, r8
 800b156:	d0e4      	beq.n	800b122 <__ieee754_atan2+0x82>
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b15e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b162:	da1e      	bge.n	800b1a2 <__ieee754_atan2+0x102>
 800b164:	2f00      	cmp	r7, #0
 800b166:	da01      	bge.n	800b16c <__ieee754_atan2+0xcc>
 800b168:	323c      	adds	r2, #60	; 0x3c
 800b16a:	db1e      	blt.n	800b1aa <__ieee754_atan2+0x10a>
 800b16c:	4632      	mov	r2, r6
 800b16e:	463b      	mov	r3, r7
 800b170:	f7f5 fb7c 	bl	800086c <__aeabi_ddiv>
 800b174:	ec41 0b10 	vmov	d0, r0, r1
 800b178:	f000 f9fa 	bl	800b570 <fabs>
 800b17c:	f000 f858 	bl	800b230 <atan>
 800b180:	ec51 0b10 	vmov	r0, r1, d0
 800b184:	2c01      	cmp	r4, #1
 800b186:	d013      	beq.n	800b1b0 <__ieee754_atan2+0x110>
 800b188:	2c02      	cmp	r4, #2
 800b18a:	d015      	beq.n	800b1b8 <__ieee754_atan2+0x118>
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	d0a8      	beq.n	800b0e2 <__ieee754_atan2+0x42>
 800b190:	a317      	add	r3, pc, #92	; (adr r3, 800b1f0 <__ieee754_atan2+0x150>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 f887 	bl	80002a8 <__aeabi_dsub>
 800b19a:	a317      	add	r3, pc, #92	; (adr r3, 800b1f8 <__ieee754_atan2+0x158>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	e014      	b.n	800b1cc <__ieee754_atan2+0x12c>
 800b1a2:	a117      	add	r1, pc, #92	; (adr r1, 800b200 <__ieee754_atan2+0x160>)
 800b1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1a8:	e7ec      	b.n	800b184 <__ieee754_atan2+0xe4>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	e7e9      	b.n	800b184 <__ieee754_atan2+0xe4>
 800b1b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	e794      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1b8:	a30d      	add	r3, pc, #52	; (adr r3, 800b1f0 <__ieee754_atan2+0x150>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 f873 	bl	80002a8 <__aeabi_dsub>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	a10c      	add	r1, pc, #48	; (adr r1, 800b1f8 <__ieee754_atan2+0x158>)
 800b1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1cc:	f7f5 f86c 	bl	80002a8 <__aeabi_dsub>
 800b1d0:	e787      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1d2:	a109      	add	r1, pc, #36	; (adr r1, 800b1f8 <__ieee754_atan2+0x158>)
 800b1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d8:	e783      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1da:	a10b      	add	r1, pc, #44	; (adr r1, 800b208 <__ieee754_atan2+0x168>)
 800b1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e0:	e77f      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e77c      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1e8:	a105      	add	r1, pc, #20	; (adr r1, 800b200 <__ieee754_atan2+0x160>)
 800b1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ee:	e778      	b.n	800b0e2 <__ieee754_atan2+0x42>
 800b1f0:	33145c07 	.word	0x33145c07
 800b1f4:	3ca1a626 	.word	0x3ca1a626
 800b1f8:	54442d18 	.word	0x54442d18
 800b1fc:	400921fb 	.word	0x400921fb
 800b200:	54442d18 	.word	0x54442d18
 800b204:	3ff921fb 	.word	0x3ff921fb
 800b208:	54442d18 	.word	0x54442d18
 800b20c:	3fe921fb 	.word	0x3fe921fb
 800b210:	0800bab0 	.word	0x0800bab0
 800b214:	0800bac8 	.word	0x0800bac8
 800b218:	54442d18 	.word	0x54442d18
 800b21c:	c00921fb 	.word	0xc00921fb
 800b220:	54442d18 	.word	0x54442d18
 800b224:	bff921fb 	.word	0xbff921fb
 800b228:	7ff00000 	.word	0x7ff00000
 800b22c:	00000000 	.word	0x00000000

0800b230 <atan>:
 800b230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	ec55 4b10 	vmov	r4, r5, d0
 800b238:	4bc3      	ldr	r3, [pc, #780]	; (800b548 <atan+0x318>)
 800b23a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b23e:	429e      	cmp	r6, r3
 800b240:	46ab      	mov	fp, r5
 800b242:	dd18      	ble.n	800b276 <atan+0x46>
 800b244:	4bc1      	ldr	r3, [pc, #772]	; (800b54c <atan+0x31c>)
 800b246:	429e      	cmp	r6, r3
 800b248:	dc01      	bgt.n	800b24e <atan+0x1e>
 800b24a:	d109      	bne.n	800b260 <atan+0x30>
 800b24c:	b144      	cbz	r4, 800b260 <atan+0x30>
 800b24e:	4622      	mov	r2, r4
 800b250:	462b      	mov	r3, r5
 800b252:	4620      	mov	r0, r4
 800b254:	4629      	mov	r1, r5
 800b256:	f7f5 f829 	bl	80002ac <__adddf3>
 800b25a:	4604      	mov	r4, r0
 800b25c:	460d      	mov	r5, r1
 800b25e:	e006      	b.n	800b26e <atan+0x3e>
 800b260:	f1bb 0f00 	cmp.w	fp, #0
 800b264:	f300 8131 	bgt.w	800b4ca <atan+0x29a>
 800b268:	a59b      	add	r5, pc, #620	; (adr r5, 800b4d8 <atan+0x2a8>)
 800b26a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b26e:	ec45 4b10 	vmov	d0, r4, r5
 800b272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	4bb6      	ldr	r3, [pc, #728]	; (800b550 <atan+0x320>)
 800b278:	429e      	cmp	r6, r3
 800b27a:	dc14      	bgt.n	800b2a6 <atan+0x76>
 800b27c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b280:	429e      	cmp	r6, r3
 800b282:	dc0d      	bgt.n	800b2a0 <atan+0x70>
 800b284:	a396      	add	r3, pc, #600	; (adr r3, 800b4e0 <atan+0x2b0>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	ee10 0a10 	vmov	r0, s0
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f80c 	bl	80002ac <__adddf3>
 800b294:	4baf      	ldr	r3, [pc, #700]	; (800b554 <atan+0x324>)
 800b296:	2200      	movs	r2, #0
 800b298:	f7f5 fc4e 	bl	8000b38 <__aeabi_dcmpgt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d1e6      	bne.n	800b26e <atan+0x3e>
 800b2a0:	f04f 3aff 	mov.w	sl, #4294967295
 800b2a4:	e02b      	b.n	800b2fe <atan+0xce>
 800b2a6:	f000 f963 	bl	800b570 <fabs>
 800b2aa:	4bab      	ldr	r3, [pc, #684]	; (800b558 <atan+0x328>)
 800b2ac:	429e      	cmp	r6, r3
 800b2ae:	ec55 4b10 	vmov	r4, r5, d0
 800b2b2:	f300 80bf 	bgt.w	800b434 <atan+0x204>
 800b2b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b2ba:	429e      	cmp	r6, r3
 800b2bc:	f300 80a0 	bgt.w	800b400 <atan+0x1d0>
 800b2c0:	ee10 2a10 	vmov	r2, s0
 800b2c4:	ee10 0a10 	vmov	r0, s0
 800b2c8:	462b      	mov	r3, r5
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f4 ffee 	bl	80002ac <__adddf3>
 800b2d0:	4ba0      	ldr	r3, [pc, #640]	; (800b554 <atan+0x324>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f4 ffe8 	bl	80002a8 <__aeabi_dsub>
 800b2d8:	2200      	movs	r2, #0
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	f7f4 ffe1 	bl	80002ac <__adddf3>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	f7f5 fabb 	bl	800086c <__aeabi_ddiv>
 800b2f6:	f04f 0a00 	mov.w	sl, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	4622      	mov	r2, r4
 800b300:	462b      	mov	r3, r5
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 f987 	bl	8000618 <__aeabi_dmul>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4680      	mov	r8, r0
 800b310:	4689      	mov	r9, r1
 800b312:	f7f5 f981 	bl	8000618 <__aeabi_dmul>
 800b316:	a374      	add	r3, pc, #464	; (adr r3, 800b4e8 <atan+0x2b8>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	f7f5 f97a 	bl	8000618 <__aeabi_dmul>
 800b324:	a372      	add	r3, pc, #456	; (adr r3, 800b4f0 <atan+0x2c0>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f4 ffbf 	bl	80002ac <__adddf3>
 800b32e:	4632      	mov	r2, r6
 800b330:	463b      	mov	r3, r7
 800b332:	f7f5 f971 	bl	8000618 <__aeabi_dmul>
 800b336:	a370      	add	r3, pc, #448	; (adr r3, 800b4f8 <atan+0x2c8>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f7f4 ffb6 	bl	80002ac <__adddf3>
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	f7f5 f968 	bl	8000618 <__aeabi_dmul>
 800b348:	a36d      	add	r3, pc, #436	; (adr r3, 800b500 <atan+0x2d0>)
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f4 ffad 	bl	80002ac <__adddf3>
 800b352:	4632      	mov	r2, r6
 800b354:	463b      	mov	r3, r7
 800b356:	f7f5 f95f 	bl	8000618 <__aeabi_dmul>
 800b35a:	a36b      	add	r3, pc, #428	; (adr r3, 800b508 <atan+0x2d8>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ffa4 	bl	80002ac <__adddf3>
 800b364:	4632      	mov	r2, r6
 800b366:	463b      	mov	r3, r7
 800b368:	f7f5 f956 	bl	8000618 <__aeabi_dmul>
 800b36c:	a368      	add	r3, pc, #416	; (adr r3, 800b510 <atan+0x2e0>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ff9b 	bl	80002ac <__adddf3>
 800b376:	4642      	mov	r2, r8
 800b378:	464b      	mov	r3, r9
 800b37a:	f7f5 f94d 	bl	8000618 <__aeabi_dmul>
 800b37e:	a366      	add	r3, pc, #408	; (adr r3, 800b518 <atan+0x2e8>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	4680      	mov	r8, r0
 800b386:	4689      	mov	r9, r1
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f5 f944 	bl	8000618 <__aeabi_dmul>
 800b390:	a363      	add	r3, pc, #396	; (adr r3, 800b520 <atan+0x2f0>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff87 	bl	80002a8 <__aeabi_dsub>
 800b39a:	4632      	mov	r2, r6
 800b39c:	463b      	mov	r3, r7
 800b39e:	f7f5 f93b 	bl	8000618 <__aeabi_dmul>
 800b3a2:	a361      	add	r3, pc, #388	; (adr r3, 800b528 <atan+0x2f8>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff7e 	bl	80002a8 <__aeabi_dsub>
 800b3ac:	4632      	mov	r2, r6
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	f7f5 f932 	bl	8000618 <__aeabi_dmul>
 800b3b4:	a35e      	add	r3, pc, #376	; (adr r3, 800b530 <atan+0x300>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff75 	bl	80002a8 <__aeabi_dsub>
 800b3be:	4632      	mov	r2, r6
 800b3c0:	463b      	mov	r3, r7
 800b3c2:	f7f5 f929 	bl	8000618 <__aeabi_dmul>
 800b3c6:	a35c      	add	r3, pc, #368	; (adr r3, 800b538 <atan+0x308>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff6c 	bl	80002a8 <__aeabi_dsub>
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	f7f5 f920 	bl	8000618 <__aeabi_dmul>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f4 ff64 	bl	80002ac <__adddf3>
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	462b      	mov	r3, r5
 800b3e8:	f7f5 f916 	bl	8000618 <__aeabi_dmul>
 800b3ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	d14b      	bne.n	800b48e <atan+0x25e>
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f4 ff55 	bl	80002a8 <__aeabi_dsub>
 800b3fe:	e72c      	b.n	800b25a <atan+0x2a>
 800b400:	ee10 0a10 	vmov	r0, s0
 800b404:	4b53      	ldr	r3, [pc, #332]	; (800b554 <atan+0x324>)
 800b406:	2200      	movs	r2, #0
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f4 ff4d 	bl	80002a8 <__aeabi_dsub>
 800b40e:	4b51      	ldr	r3, [pc, #324]	; (800b554 <atan+0x324>)
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	2200      	movs	r2, #0
 800b416:	4620      	mov	r0, r4
 800b418:	4629      	mov	r1, r5
 800b41a:	f7f4 ff47 	bl	80002ac <__adddf3>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 fa21 	bl	800086c <__aeabi_ddiv>
 800b42a:	f04f 0a01 	mov.w	sl, #1
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	e764      	b.n	800b2fe <atan+0xce>
 800b434:	4b49      	ldr	r3, [pc, #292]	; (800b55c <atan+0x32c>)
 800b436:	429e      	cmp	r6, r3
 800b438:	da1d      	bge.n	800b476 <atan+0x246>
 800b43a:	ee10 0a10 	vmov	r0, s0
 800b43e:	4b48      	ldr	r3, [pc, #288]	; (800b560 <atan+0x330>)
 800b440:	2200      	movs	r2, #0
 800b442:	4629      	mov	r1, r5
 800b444:	f7f4 ff30 	bl	80002a8 <__aeabi_dsub>
 800b448:	4b45      	ldr	r3, [pc, #276]	; (800b560 <atan+0x330>)
 800b44a:	4606      	mov	r6, r0
 800b44c:	460f      	mov	r7, r1
 800b44e:	2200      	movs	r2, #0
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f5 f8e0 	bl	8000618 <__aeabi_dmul>
 800b458:	4b3e      	ldr	r3, [pc, #248]	; (800b554 <atan+0x324>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7f4 ff26 	bl	80002ac <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 fa00 	bl	800086c <__aeabi_ddiv>
 800b46c:	f04f 0a02 	mov.w	sl, #2
 800b470:	4604      	mov	r4, r0
 800b472:	460d      	mov	r5, r1
 800b474:	e743      	b.n	800b2fe <atan+0xce>
 800b476:	462b      	mov	r3, r5
 800b478:	ee10 2a10 	vmov	r2, s0
 800b47c:	4939      	ldr	r1, [pc, #228]	; (800b564 <atan+0x334>)
 800b47e:	2000      	movs	r0, #0
 800b480:	f7f5 f9f4 	bl	800086c <__aeabi_ddiv>
 800b484:	f04f 0a03 	mov.w	sl, #3
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	e737      	b.n	800b2fe <atan+0xce>
 800b48e:	4b36      	ldr	r3, [pc, #216]	; (800b568 <atan+0x338>)
 800b490:	4e36      	ldr	r6, [pc, #216]	; (800b56c <atan+0x33c>)
 800b492:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 ff05 	bl	80002a8 <__aeabi_dsub>
 800b49e:	4622      	mov	r2, r4
 800b4a0:	462b      	mov	r3, r5
 800b4a2:	f7f4 ff01 	bl	80002a8 <__aeabi_dsub>
 800b4a6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b4b2:	f7f4 fef9 	bl	80002a8 <__aeabi_dsub>
 800b4b6:	f1bb 0f00 	cmp.w	fp, #0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	460d      	mov	r5, r1
 800b4be:	f6bf aed6 	bge.w	800b26e <atan+0x3e>
 800b4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c6:	461d      	mov	r5, r3
 800b4c8:	e6d1      	b.n	800b26e <atan+0x3e>
 800b4ca:	a51d      	add	r5, pc, #116	; (adr r5, 800b540 <atan+0x310>)
 800b4cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4d0:	e6cd      	b.n	800b26e <atan+0x3e>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	54442d18 	.word	0x54442d18
 800b4dc:	bff921fb 	.word	0xbff921fb
 800b4e0:	8800759c 	.word	0x8800759c
 800b4e4:	7e37e43c 	.word	0x7e37e43c
 800b4e8:	e322da11 	.word	0xe322da11
 800b4ec:	3f90ad3a 	.word	0x3f90ad3a
 800b4f0:	24760deb 	.word	0x24760deb
 800b4f4:	3fa97b4b 	.word	0x3fa97b4b
 800b4f8:	a0d03d51 	.word	0xa0d03d51
 800b4fc:	3fb10d66 	.word	0x3fb10d66
 800b500:	c54c206e 	.word	0xc54c206e
 800b504:	3fb745cd 	.word	0x3fb745cd
 800b508:	920083ff 	.word	0x920083ff
 800b50c:	3fc24924 	.word	0x3fc24924
 800b510:	5555550d 	.word	0x5555550d
 800b514:	3fd55555 	.word	0x3fd55555
 800b518:	2c6a6c2f 	.word	0x2c6a6c2f
 800b51c:	bfa2b444 	.word	0xbfa2b444
 800b520:	52defd9a 	.word	0x52defd9a
 800b524:	3fadde2d 	.word	0x3fadde2d
 800b528:	af749a6d 	.word	0xaf749a6d
 800b52c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b530:	fe231671 	.word	0xfe231671
 800b534:	3fbc71c6 	.word	0x3fbc71c6
 800b538:	9998ebc4 	.word	0x9998ebc4
 800b53c:	3fc99999 	.word	0x3fc99999
 800b540:	54442d18 	.word	0x54442d18
 800b544:	3ff921fb 	.word	0x3ff921fb
 800b548:	440fffff 	.word	0x440fffff
 800b54c:	7ff00000 	.word	0x7ff00000
 800b550:	3fdbffff 	.word	0x3fdbffff
 800b554:	3ff00000 	.word	0x3ff00000
 800b558:	3ff2ffff 	.word	0x3ff2ffff
 800b55c:	40038000 	.word	0x40038000
 800b560:	3ff80000 	.word	0x3ff80000
 800b564:	bff00000 	.word	0xbff00000
 800b568:	0800bb00 	.word	0x0800bb00
 800b56c:	0800bae0 	.word	0x0800bae0

0800b570 <fabs>:
 800b570:	ec51 0b10 	vmov	r0, r1, d0
 800b574:	ee10 2a10 	vmov	r2, s0
 800b578:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b57c:	ec43 2b10 	vmov	d0, r2, r3
 800b580:	4770      	bx	lr
	...

0800b584 <_init>:
 800b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b586:	bf00      	nop
 800b588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b58a:	bc08      	pop	{r3}
 800b58c:	469e      	mov	lr, r3
 800b58e:	4770      	bx	lr

0800b590 <_fini>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	bf00      	nop
 800b594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b596:	bc08      	pop	{r3}
 800b598:	469e      	mov	lr, r3
 800b59a:	4770      	bx	lr
