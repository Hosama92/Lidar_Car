
LIDAR_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000c54  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cc4  20000cc4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f1  00000000  00000000  000360f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  000389f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  00039c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026152  00000000  00000000  0003ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014026  00000000  00000000  00060e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e479e  00000000  00000000  00074ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015965e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005608  00000000  00000000  001596b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ec4 	.word	0x08005ec4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005ec4 	.word	0x08005ec4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 ff14 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f848 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f9d0 	bl	8000944 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a4:	f000 f8ae 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f974 	bl	8000894 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f99c 	bl	80008e8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_TIM1_Init>
  MX_UART5_Init();
 80005b4:	f000 f944 	bl	8000840 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  RX_Struct_Init();
 80005b8:	f000 fadc 	bl	8000b74 <RX_Struct_Init>
  RX_Init();
 80005bc:	f000 fae6 	bl	8000b8c <RX_Init>
  printf(" Init OK!!\n\n\r"); // 리셋 버튼 누를때마다 Init이 출력되게 함
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <main+0x84>)
 80005c2:	f004 fc23 	bl	8004e0c <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <main+0x88>)
 80005c8:	f002 fc42 	bl	8002e50 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // RX MSG Check
	  RX_Doing();
 80005cc:	f000 faf6 	bl	8000bbc <RX_Doing>

	  // LED Timer
	  if (led_1) // LED동작과 동시진행하는지 여부 판단용
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0x8c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d006      	beq.n	80005e6 <main+0x52>
	  {
		  led_1 = false;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <main+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005de:	2101      	movs	r1, #1
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0x90>)
 80005e2:	f001 fe16 	bl	8002212 <HAL_GPIO_TogglePin>
	  }

	  if (led_2)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0x94>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <main+0x68>
	  {
		  led_2 = false;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x90>)
 80005f8:	f001 fe0b 	bl	8002212 <HAL_GPIO_TogglePin>
	  }

	  if (led_3)
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <main+0x98>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0e3      	beq.n	80005cc <main+0x38>
	  {
		  led_3 = false;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <main+0x90>)
 8000610:	f001 fdff 	bl	8002212 <HAL_GPIO_TogglePin>
	  RX_Doing();
 8000614:	e7da      	b.n	80005cc <main+0x38>
 8000616:	bf00      	nop
 8000618:	08005edc 	.word	0x08005edc
 800061c:	200002b4 	.word	0x200002b4
 8000620:	20000894 	.word	0x20000894
 8000624:	40020400 	.word	0x40020400
 8000628:	20000895 	.word	0x20000895
 800062c:	20000896 	.word	0x20000896

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fbdc 	bl	8004dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fee3 	bl	8002480 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fa52 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f944 	bl	8002970 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fa3b 	bl	8000b68 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x84>)
 8000756:	f001 f86f 	bl	8001838 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 fa02 	bl	8000b68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_ETH_Init+0x98>)
 800076a:	f004 fb47 	bl	8004dfc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	; 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000204 	.word	0x20000204
 800078c:	40028000 	.word	0x40028000
 8000790:	20000898 	.word	0x20000898
 8000794:	20000164 	.word	0x20000164
 8000798:	200000c4 	.word	0x200000c4
 800079c:	2000008c 	.word	0x2000008c

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM1_Init+0x98>)
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <MX_TIM1_Init+0x9c>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM1_Init+0x98>)
 80007c4:	2253      	movs	r2, #83	; 0x53
 80007c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM1_Init+0x98>)
 80007d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM1_Init+0x98>)
 80007ea:	f002 fae1 	bl	8002db0 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f9b8 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM1_Init+0x98>)
 8000806:	f002 fc9b 	bl	8003140 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 f9aa 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM1_Init+0x98>)
 8000822:	f002 feb7 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 f99c 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002b4 	.word	0x200002b4
 800083c:	40010000 	.word	0x40010000

08000840 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_UART5_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_UART5_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_UART5_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_UART5_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_UART5_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_UART5_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_UART5_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_UART5_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_UART5_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_UART5_Init+0x4c>)
 8000878:	f002 ff1c 	bl	80036b4 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f971 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002fc 	.word	0x200002fc
 8000890:	40005000 	.word	0x40005000

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART3_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008cc:	f002 fef2 	bl	80036b4 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f947 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000340 	.word	0x20000340
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2202      	movs	r2, #2
 800090a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2201      	movs	r2, #1
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	f001 fc8b 	bl	8002246 <HAL_PCD_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f917 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000384 	.word	0x20000384

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4b      	ldr	r2, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3d      	ldr	r2, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_GPIO_Init+0x150>)
 8000a0a:	f001 fbe9 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a14:	f001 fbe4 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <MX_GPIO_Init+0x158>)
 8000a30:	f001 fa2a 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0x150>)
 8000a4e:	f001 fa1b 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a6a:	f001 fa0d 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a82:	f001 fa01 	bl	8001e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	// basic 100[us]
	if (htim->Instance == TIM1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d146      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		time_1ms++;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aba:	6013      	str	r3, [r2, #0]
		time_1ms %= MAX_TIME;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000ac6:	bf2c      	ite	cs
 8000ac8:	2301      	movcs	r3, #1
 8000aca:	2300      	movcc	r3, #0
 8000acc:	425b      	negs	r3, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ad4:	601a      	str	r2, [r3, #0]

		if (!(time_1ms % 200)) led_1 = true;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000adc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ae0:	1199      	asrs	r1, r3, #6
 8000ae2:	17d3      	asrs	r3, r2, #31
 8000ae4:	1acb      	subs	r3, r1, r3
 8000ae6:	21c8      	movs	r1, #200	; 0xc8
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
		if (!(time_1ms % 400)) led_2 = true;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000afe:	fb83 1302 	smull	r1, r3, r3, r2
 8000b02:	11d9      	asrs	r1, r3, #7
 8000b04:	17d3      	asrs	r3, r2, #31
 8000b06:	1acb      	subs	r3, r1, r3
 8000b08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000b0c:	fb01 f303 	mul.w	r3, r1, r3
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
		if (!(time_1ms % 600)) led_3 = true;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b22:	fb83 1302 	smull	r1, r3, r3, r2
 8000b26:	1199      	asrs	r1, r3, #6
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1acb      	subs	r3, r1, r3
 8000b2c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000b30:	fb01 f303 	mul.w	r3, r1, r3
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	20000890 	.word	0x20000890
 8000b54:	51eb851f 	.word	0x51eb851f
 8000b58:	20000894 	.word	0x20000894
 8000b5c:	20000895 	.word	0x20000895
 8000b60:	1b4e81b5 	.word	0x1b4e81b5
 8000b64:	20000896 	.word	0x20000896

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <RX_Struct_Init>:
extern UART_HandleTypeDef huart3; // STM과 PC의 통신을 위한 포트
//
_sRX sRX; // 구조체 선언

void RX_Struct_Init() // 구조체 sRX의 맴버 값을 전부 0으로 초기화
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	memset(&sRX, 0, sizeof(struct _sRX));
 8000b78:	f240 420c 	movw	r2, #1036	; 0x40c
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <RX_Struct_Init+0x14>)
 8000b80:	f004 f93c 	bl	8004dfc <memset>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200008a0 	.word	0x200008a0

08000b8c <RX_Init>:

void RX_Init() // 출력버퍼를 초기화한후 인터럽트 발생시 sRX.tmp에 그 값을 1바이트씩 저장
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	setvbuf(stdout, NULL, _IONBF, 0);
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <RX_Init+0x24>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6898      	ldr	r0, [r3, #8]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2202      	movs	r2, #2
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f004 f94e 	bl	8004e3c <setvbuf>
	HAL_UART_Receive_IT(&huart5, &sRX.tmp, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <RX_Init+0x28>)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <RX_Init+0x2c>)
 8000ba6:	f002 fe64 	bl	8003872 <HAL_UART_Receive_IT>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	200008a0 	.word	0x200008a0
 8000bb8:	200002fc 	.word	0x200002fc

08000bbc <RX_Doing>:

void RX_Doing()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	if (sRX.pop_cnt != sRX.push_cnt) // pop와 push가 다를때
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <RX_Doing+0x80>)
 8000bc4:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <RX_Doing+0x80>)
 8000bca:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d030      	beq.n	8000c34 <RX_Doing+0x78>
	{
		sRX.pop_cnt++;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <RX_Doing+0x80>)
 8000bd4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <RX_Doing+0x80>)
 8000bde:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		uint8_t tmp = sRX.rxbuf[sRX.strpt_cnt]; // tmp에 rxbuf값을 넣어준다
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <RX_Doing+0x80>)
 8000be4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <RX_Doing+0x80>)
 8000bec:	4413      	add	r3, r2
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	71fb      	strb	r3, [r7, #7]
		sRX.pop_cnt %= RX_SIZE; // pop카운트는 계속 증가하지만 1024를 넘으면 초기화된다
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <RX_Doing+0x80>)
 8000bf4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <RX_Doing+0x80>)
 8000c00:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		// debug check
		if(tmp != 0xAA)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2baa      	cmp	r3, #170	; 0xaa
 8000c08:	d002      	beq.n	8000c10 <RX_Doing+0x54>
			printf("*******************************************************");
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <RX_Doing+0x84>)
 8000c0c:	f004 f8fe 	bl	8004e0c <iprintf>
		printf(" %02X", tmp);// tmp에 값은 1바이트씩 저장되있고 그걸 2자리의 16진수로 프린트한다
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	4619      	mov	r1, r3
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <RX_Doing+0x88>)
 8000c16:	f004 f8f9 	bl	8004e0c <iprintf>
		printf("\n\r");
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <RX_Doing+0x8c>)
 8000c1c:	f004 f8f6 	bl	8004e0c <iprintf>
		printf("strpt_cnt = %04d",sRX.strpt_cnt);
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <RX_Doing+0x80>)
 8000c22:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000c26:	4619      	mov	r1, r3
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <RX_Doing+0x90>)
 8000c2a:	f004 f8ef 	bl	8004e0c <iprintf>
		printf("\n\r");
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <RX_Doing+0x8c>)
 8000c30:	f004 f8ec 	bl	8004e0c <iprintf>
//		if (!(sRX.pop_cnt % 10)) // 값을 10개 출력할때마다 줄바꿈을 해준다
//		{
//			printf("\n\r");
//		}
	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200008a0 	.word	0x200008a0
 8000c40:	08005eec 	.word	0x08005eec
 8000c44:	08005f24 	.word	0x08005f24
 8000c48:	08005f2c 	.word	0x08005f2c
 8000c4c:	08005f30 	.word	0x08005f30

08000c50 <__io_putchar>:


int __io_putchar(int ch)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	while (HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1) != HAL_OK);
 8000c58:	bf00      	nop
 8000c5a:	1d39      	adds	r1, r7, #4
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <__io_putchar+0x28>)
 8000c62:	f002 fd74 	bl	800374e <HAL_UART_Transmit>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f6      	bne.n	8000c5a <__io_putchar+0xa>
	return ch;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000340 	.word	0x20000340

08000c7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // 인터럽트로 값을 저장
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart5.Instance) // UART5에서 instance가 발생하면
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_UART_RxCpltCallback+0x90>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d138      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x86>
	{
		sRX.rxbuf[sRX.push_cnt++] = sRX.tmp;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000c92:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	b291      	uxth	r1, r2
 8000c9a:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000c9c:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000ca8:	440b      	add	r3, r1
 8000caa:	705a      	strb	r2, [r3, #1]
		if (sRX.tmp == 0XAA)
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2baa      	cmp	r3, #170	; 0xaa
 8000cb2:	d103      	bne.n	8000cbc <HAL_UART_RxCpltCallback+0x40>
			sRX.strpt_step = 1;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		if (sRX.tmp == 0X55 && sRX.strpt_step == 1)
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b55      	cmp	r3, #85	; 0x55
 8000cc2:	d110      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x6a>
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cc6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x6a>
		{
			sRX.strpt_cnt = sRX.push_cnt-2;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cd0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cda:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
			sRX.strpt_step = 0;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		}

		// tmp에 저장된 값을 rxbuf로 수신
		sRX.push_cnt %= RX_SIZE; // 오버플로우 방지를 위해 1024넘어가면 자릿수 초기화
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000ce8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cf4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		HAL_UART_Receive_IT(&huart5, &sRX.tmp, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4905      	ldr	r1, [pc, #20]	; (8000d10 <HAL_UART_RxCpltCallback+0x94>)
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <HAL_UART_RxCpltCallback+0x90>)
 8000cfe:	f002 fdb8 	bl	8003872 <HAL_UART_Receive_IT>
		// 데이터 도착할때마다 계속 인터럽트 발생시킴
	}
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200002fc 	.word	0x200002fc
 8000d10:	200008a0 	.word	0x200008a0

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a55      	ldr	r2, [pc, #340]	; (8000ed8 <HAL_ETH_MspInit+0x174>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f040 80a4 	bne.w	8000ed0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b50      	ldr	r3, [pc, #320]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b49      	ldr	r3, [pc, #292]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a44      	ldr	r2, [pc, #272]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a36      	ldr	r2, [pc, #216]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_ETH_MspInit+0x178>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <HAL_ETH_MspInit+0x17c>)
 8000e68:	f001 f80e 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6c:	2386      	movs	r3, #134	; 0x86
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <HAL_ETH_MspInit+0x180>)
 8000e88:	f000 fffe 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_ETH_MspInit+0x184>)
 8000eaa:	f000 ffed 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000ecc:	f000 ffdc 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40028000 	.word	0x40028000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_TIM_Base_MspInit+0x58>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11d      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_TIM_Base_MspInit+0x5c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_TIM_Base_MspInit+0x5c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_TIM_Base_MspInit+0x5c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2018      	movs	r0, #24
 8000f24:	f000 fbbf 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f28:	2018      	movs	r0, #24
 8000f2a:	f000 fbd8 	bl	80016de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 fbb7 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f38:	2019      	movs	r0, #25
 8000f3a:	f000 fbd0 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_UART_MspInit+0x148>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d153      	bne.n	800101a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a41      	ldr	r2, [pc, #260]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a3a      	ldr	r2, [pc, #232]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_UART_MspInit+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482f      	ldr	r0, [pc, #188]	; (80010a0 <HAL_UART_MspInit+0x150>)
 8000fe4:	f000 ff50 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4828      	ldr	r0, [pc, #160]	; (80010a4 <HAL_UART_MspInit+0x154>)
 8001004:	f000 ff40 	bl	8001e88 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2035      	movs	r0, #53	; 0x35
 800100e:	f000 fb4a 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001012:	2035      	movs	r0, #53	; 0x35
 8001014:	f000 fb63 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001018:	e039      	b.n	800108e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_UART_MspInit+0x158>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d134      	bne.n	800108e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_UART_MspInit+0x14c>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_UART_MspInit+0x14c>)
 800102e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_UART_MspInit+0x14c>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x14c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_UART_MspInit+0x14c>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_UART_MspInit+0x14c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800105c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106e:	2307      	movs	r3, #7
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <HAL_UART_MspInit+0x154>)
 800107a:	f000 ff05 	bl	8001e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2027      	movs	r0, #39	; 0x27
 8001084:	f000 fb0f 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001088:	2027      	movs	r0, #39	; 0x27
 800108a:	f000 fb28 	bl	80016de <HAL_NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005000 	.word	0x40005000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40004800 	.word	0x40004800

080010ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010cc:	d13f      	bne.n	800114e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <HAL_PCD_MspInit+0xac>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010fc:	230a      	movs	r3, #10
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <HAL_PCD_MspInit+0xb0>)
 8001108:	f000 febe 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <HAL_PCD_MspInit+0xb0>)
 8001122:	f000 feb1 	bl	8001e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_PCD_MspInit+0xac>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6353      	str	r3, [r2, #52]	; 0x34
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_PCD_MspInit+0xac>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_PCD_MspInit+0xac>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f95c 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011ba:	f001 feb9 	bl	8002f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002b4 	.word	0x200002b4

080011c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ce:	f001 feaf 	bl	8002f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002b4 	.word	0x200002b4

080011dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <USART3_IRQHandler+0x10>)
 80011e2:	f002 fb77 	bl	80038d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000340 	.word	0x20000340

080011f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <UART5_IRQHandler+0x10>)
 80011f6:	f002 fb6d 	bl	80038d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002fc 	.word	0x200002fc

08001204 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e00a      	b.n	800122c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001216:	f3af 8000 	nop.w
 800121a:	4601      	mov	r1, r0
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	b2ca      	uxtb	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf0      	blt.n	8001216 <_read+0x12>
  }

  return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e009      	b.n	8001264 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60ba      	str	r2, [r7, #8]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fcf9 	bl	8000c50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf1      	blt.n	8001250 <_write+0x12>
  }
  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_close>:

int _close(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129e:	605a      	str	r2, [r3, #4]
  return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f003 fd4a 	bl	8004da8 <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20030000 	.word	0x20030000
 8001340:	00000400 	.word	0x00000400
 8001344:	20000cac 	.word	0x20000cac
 8001348:	20000cc8 	.word	0x20000cc8

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800138c:	4c0b      	ldr	r4, [pc, #44]	; (80013bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139a:	f7ff ffd7 	bl	800134c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f003 fd09 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff f8f7 	bl	8000594 <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013b4:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 80013b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013bc:	20000cc4 	.word	0x20000cc4

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f94f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff fc8c 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f967 	bl	80016fa <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f92f 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	20000cb0 	.word	0x20000cb0

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000cb0 	.word	0x20000cb0

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff feb6 	bl	8001490 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d008      	beq.n	8001744 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e052      	b.n	80017ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0216 	bic.w	r2, r2, #22
 8001752:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001762:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <HAL_DMA_Abort+0x62>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0208 	bic.w	r2, r2, #8
 8001782:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	e013      	b.n	80017be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001796:	f7ff fe7b 	bl	8001490 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d90c      	bls.n	80017be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e015      	b.n	80017ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e4      	bne.n	8001796 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	223f      	movs	r2, #63	; 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d004      	beq.n	8001810 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e00c      	b.n	800182a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2205      	movs	r2, #5
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06c      	b.n	8001924 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2223      	movs	r2, #35	; 0x23
 8001858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fa81 	bl	8000d64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_ETH_Init+0xf4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_ETH_Init+0xf4>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_ETH_Init+0xf4>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_ETH_Init+0xf8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <HAL_ETH_Init+0xf8>)
 8001884:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001888:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_ETH_Init+0xf8>)
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4927      	ldr	r1, [pc, #156]	; (8001930 <HAL_ETH_Init+0xf8>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_ETH_Init+0xf8>)
 800189a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff fdec 	bl	8001490 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ba:	e011      	b.n	80018e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018bc:	f7ff fde8 	bl	8001490 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018ca:	d909      	bls.n	80018e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2204      	movs	r2, #4
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	22e0      	movs	r2, #224	; 0xe0
 80018d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e021      	b.n	8001924 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e4      	bne.n	80018bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f958 	bl	8001ba8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f9ff 	bl	8001cfc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fa55 	bl	8001dae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	461a      	mov	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f9bd 	bl	8001c8c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2210      	movs	r2, #16
 800191e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40013800 	.word	0x40013800

08001934 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <ETH_SetMACConfig+0x15c>)
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	7c1b      	ldrb	r3, [r3, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <ETH_SetMACConfig+0x28>
 8001956:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800195a:	e000      	b.n	800195e <ETH_SetMACConfig+0x2a>
 800195c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7c5b      	ldrb	r3, [r3, #17]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <ETH_SetMACConfig+0x38>
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	e000      	b.n	800196e <ETH_SetMACConfig+0x3a>
 800196c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800196e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7fdb      	ldrb	r3, [r3, #31]
 800197a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800197c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001982:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	7f92      	ldrb	r2, [r2, #30]
 8001988:	2a00      	cmp	r2, #0
 800198a:	d102      	bne.n	8001992 <ETH_SetMACConfig+0x5e>
 800198c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001990:	e000      	b.n	8001994 <ETH_SetMACConfig+0x60>
 8001992:	2200      	movs	r2, #0
                        macconf->Speed |
 8001994:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	7f1b      	ldrb	r3, [r3, #28]
 800199a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800199c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019b2:	2a00      	cmp	r2, #0
 80019b4:	d102      	bne.n	80019bc <ETH_SetMACConfig+0x88>
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	e000      	b.n	80019be <ETH_SetMACConfig+0x8a>
 80019bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	7bdb      	ldrb	r3, [r3, #15]
 80019c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fd5a 	bl	80014a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d101      	bne.n	8001a22 <ETH_SetMACConfig+0xee>
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0xf0>
 8001a22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a32:	2a01      	cmp	r2, #1
 8001a34:	d101      	bne.n	8001a3a <ETH_SetMACConfig+0x106>
 8001a36:	2208      	movs	r2, #8
 8001a38:	e000      	b.n	8001a3c <ETH_SetMACConfig+0x108>
 8001a3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a44:	2a01      	cmp	r2, #1
 8001a46:	d101      	bne.n	8001a4c <ETH_SetMACConfig+0x118>
 8001a48:	2204      	movs	r2, #4
 8001a4a:	e000      	b.n	8001a4e <ETH_SetMACConfig+0x11a>
 8001a4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a56:	2a01      	cmp	r2, #1
 8001a58:	d101      	bne.n	8001a5e <ETH_SetMACConfig+0x12a>
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x12c>
 8001a5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fd15 	bl	80014a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	ff20810f 	.word	0xff20810f

08001a94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <ETH_SetDMAConfig+0x110>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7b1b      	ldrb	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <ETH_SetDMAConfig+0x2c>
 8001aba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001abe:	e000      	b.n	8001ac2 <ETH_SetDMAConfig+0x2e>
 8001ac0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	7b5b      	ldrb	r3, [r3, #13]
 8001ac6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ac8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	7f52      	ldrb	r2, [r2, #29]
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	d102      	bne.n	8001ad8 <ETH_SetDMAConfig+0x44>
 8001ad2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ad6:	e000      	b.n	8001ada <ETH_SetDMAConfig+0x46>
 8001ad8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ada:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	7b9b      	ldrb	r3, [r3, #14]
 8001ae0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ae2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ae8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7f1b      	ldrb	r3, [r3, #28]
 8001aee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001af0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	7f9b      	ldrb	r3, [r3, #30]
 8001af6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001af8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001afe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fcbc 	bl	80014a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff fc8d 	bl	80014a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	f8de3f23 	.word	0xf8de3f23

08001ba8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0a6      	sub	sp, #152	; 0x98
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001be4:	2300      	movs	r3, #0
 8001be6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fe86 	bl	8001934 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff08 	bl	8001a94 <ETH_SetDMAConfig>
}
 8001c84:	bf00      	nop
 8001c86:	3798      	adds	r7, #152	; 0x98
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	3204      	adds	r2, #4
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <ETH_MACAddressConfig+0x68>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	061a      	lsls	r2, r3, #24
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <ETH_MACAddressConfig+0x6c>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40028040 	.word	0x40028040
 8001cf8:	40028044 	.word	0x40028044

08001cfc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e03e      	b.n	8001d88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	3206      	adds	r2, #6
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d80c      	bhi.n	8001d6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68d9      	ldr	r1, [r3, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e004      	b.n	8001d76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	461a      	mov	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d9bd      	bls.n	8001d0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	611a      	str	r2, [r3, #16]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	e046      	b.n	8001e4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6919      	ldr	r1, [r3, #16]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001df8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	3212      	adds	r2, #18
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d80c      	bhi.n	8001e3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6919      	ldr	r1, [r3, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	e004      	b.n	8001e44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d9b5      	bls.n	8001dbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	60da      	str	r2, [r3, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e177      	b.n	8002194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 8166 	bne.w	800218e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d130      	bne.n	8001f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d017      	beq.n	8001f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d123      	bne.n	8001fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80c0 	beq.w	800218e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a65      	ldr	r2, [pc, #404]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202a:	4a61      	ldr	r2, [pc, #388]	; (80021b0 <HAL_GPIO_Init+0x328>)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_GPIO_Init+0x32c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d037      	beq.n	80020c6 <HAL_GPIO_Init+0x23e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <HAL_GPIO_Init+0x330>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d031      	beq.n	80020c2 <HAL_GPIO_Init+0x23a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_GPIO_Init+0x334>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02b      	beq.n	80020be <HAL_GPIO_Init+0x236>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_GPIO_Init+0x338>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x232>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a54      	ldr	r2, [pc, #336]	; (80021c4 <HAL_GPIO_Init+0x33c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x22e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_GPIO_Init+0x340>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x22a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_GPIO_Init+0x344>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x226>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <HAL_GPIO_Init+0x348>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x222>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_GPIO_Init+0x34c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x21e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x21a>
 800209e:	2309      	movs	r3, #9
 80020a0:	e012      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020a2:	230a      	movs	r3, #10
 80020a4:	e010      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e00e      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x240>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x328>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_GPIO_Init+0x354>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a34      	ldr	r2, [pc, #208]	; (80021dc <HAL_GPIO_Init+0x354>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <HAL_GPIO_Init+0x354>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_GPIO_Init+0x354>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_GPIO_Init+0x354>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215e:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_GPIO_Init+0x354>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_GPIO_Init+0x354>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_GPIO_Init+0x354>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae84 	bls.w	8001ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021c00 	.word	0x40021c00
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40022400 	.word	0x40022400
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021fc:	e003      	b.n	8002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	619a      	str	r2, [r3, #24]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43d9      	mvns	r1, r3
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	400b      	ands	r3, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002248:	b08f      	sub	sp, #60	; 0x3c
 800224a:	af0a      	add	r7, sp, #40	; 0x28
 800224c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e10f      	b.n	8002478 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe ff1a 	bl	80010ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2203      	movs	r2, #3
 800227c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fae5 	bl	8004866 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	687e      	ldr	r6, [r7, #4]
 80022a4:	466d      	mov	r5, sp
 80022a6:	f106 0410 	add.w	r4, r6, #16
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ba:	1d33      	adds	r3, r6, #4
 80022bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022be:	6838      	ldr	r0, [r7, #0]
 80022c0:	f002 fa70 	bl	80047a4 <USB_CoreInit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0d0      	b.n	8002478 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fad3 	bl	8004888 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e04a      	b.n	800237e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	333d      	adds	r3, #61	; 0x3d
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	333c      	adds	r3, #60	; 0x3c
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	b298      	uxth	r0, r3
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	4602      	mov	r2, r0
 8002326:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3340      	adds	r3, #64	; 0x40
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3348      	adds	r3, #72	; 0x48
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	; 0x4c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3354      	adds	r3, #84	; 0x54
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	3301      	adds	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3af      	bcc.n	80022e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e044      	b.n	8002418 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3b5      	bcc.n	800238e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	687e      	ldr	r6, [r7, #4]
 800242a:	466d      	mov	r5, sp
 800242c:	f106 0410 	add.w	r4, r6, #16
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002440:	1d33      	adds	r3, r6, #4
 8002442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002444:	6838      	ldr	r0, [r7, #0]
 8002446:	f002 fa6b 	bl	8004920 <USB_DevInit>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e00d      	b.n	8002478 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fc36 	bl	8004ce2 <USB_DevDisconnect>

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e267      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b85      	ldr	r3, [pc, #532]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e242      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe ffaa 	bl	8001490 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe ffa6 	bl	8001490 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e207      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe ff96 	bl	8001490 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe ff92 	bl	8001490 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1f3      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1c7      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe ff4b 	bl	8001490 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe ff47 	bl	8001490 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1a8      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe ff2a 	bl	8001490 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe ff26 	bl	8001490 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e187      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe ff0a 	bl	8001490 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe ff06 	bl	8001490 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e167      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fef3 	bl	8001490 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fe feef 	bl	8001490 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e150      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a73      	ldr	r2, [pc, #460]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe feaf 	bl	8001490 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe feab 	bl	8001490 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e10c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x2ea>
 800275c:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x30c>
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5e      	ldr	r2, [pc, #376]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a5b      	ldr	r2, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800278c:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fe70 	bl	8001490 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fe6c 	bl	8001490 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0cb      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x334>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fe5a 	bl	8001490 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fe56 	bl	8001490 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b5      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d05c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d141      	bne.n	80028b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fe2a 	bl	8001490 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fe26 	bl	8001490 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	491b      	ldr	r1, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fdff 	bl	8001490 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fdfb 	bl	8001490 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x416>
 80028b4:	e054      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fde8 	bl	8001490 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fde4 	bl	8001490 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e045      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d028      	beq.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11a      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fd16 	bl	8001490 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fd12 	bl	8001490 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fc76 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08005f44 	.word	0x08005f44
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b094      	sub	sp, #80	; 0x50
 8002b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b54:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	f200 80e1 	bhi.w	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6e:	e0db      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b74:	e0db      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7a:	e0d8      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8002baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	1a51      	subs	r1, r2, r1
 8002bca:	6139      	str	r1, [r7, #16]
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	018b      	lsls	r3, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bea:	4651      	mov	r1, sl
 8002bec:	018a      	lsls	r2, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	eb49 0303 	adc.w	r3, r9, r3
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	024b      	lsls	r3, r1, #9
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c38:	4621      	mov	r1, r4
 8002c3a:	024a      	lsls	r2, r1, #9
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c4c:	f7fd fb20 	bl	8000290 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	4611      	mov	r1, r2
 8002c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c92:	4649      	mov	r1, r9
 8002c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cac:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	00eb      	lsls	r3, r5, #3
 8002cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4643      	mov	r3, r8
 8002cca:	18e3      	adds	r3, r4, r3
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	f7fd fac6 	bl	8000290 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3750      	adds	r7, #80	; 0x50
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005f54 	.word	0x08005f54

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08005f54 	.word	0x08005f54

08002db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e041      	b.n	8002e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe f88a 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fa96 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e04e      	b.n	8002f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d01d      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x80>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e007      	b.n	8002f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40010400 	.word	0x40010400
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40001800 	.word	0x40001800

08002f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0202 	mvn.w	r2, #2
 8002f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9b5 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9a7 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9b8 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d122      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0204 	mvn.w	r2, #4
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f98b 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f97d 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f98e 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d122      	bne.n	8003034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d11b      	bne.n	8003034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0208 	mvn.w	r2, #8
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f961 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f953 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f964 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b10      	cmp	r3, #16
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b10      	cmp	r3, #16
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0210 	mvn.w	r2, #16
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2208      	movs	r2, #8
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f937 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f929 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f93a 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0201 	mvn.w	r2, #1
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fcf6 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fae0 	bl	80036a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8ff 	bl	800330a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b20      	cmp	r3, #32
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0220 	mvn.w	r2, #32
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 faaa 	bl	800368c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x1c>
 8003158:	2302      	movs	r3, #2
 800315a:	e0b4      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x186>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d03e      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xd4>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	f200 8087 	bhi.w	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f000 8086 	beq.w	80032b2 <HAL_TIM_ConfigClockSource+0x172>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d87f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d01a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0xa6>
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d87b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d050      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x11a>
 80031b8:	2b60      	cmp	r3, #96	; 0x60
 80031ba:	d877      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b50      	cmp	r3, #80	; 0x50
 80031be:	d03c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xfa>
 80031c0:	2b50      	cmp	r3, #80	; 0x50
 80031c2:	d873      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d058      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x13a>
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d86f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d064      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b30      	cmp	r3, #48	; 0x30
 80031d2:	d86b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d060      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d867      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d05a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	e062      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f000 f9ad 	bl	8003554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e04f      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f000 f996 	bl	8003554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003236:	609a      	str	r2, [r3, #8]
      break;
 8003238:	e03c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f90a 	bl	8003460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2150      	movs	r1, #80	; 0x50
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f963 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8003258:	e02c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f929 	bl	80034be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2160      	movs	r1, #96	; 0x60
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f953 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8003278:	e01c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 f8ea 	bl	8003460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f943 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 8003298:	e00c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 f93a 	bl	800351e <TIM_ITRx_SetConfig>
      break;
 80032aa:	e003      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e000      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a40      	ldr	r2, [pc, #256]	; (8003434 <TIM_Base_SetConfig+0x114>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d00f      	beq.n	8003360 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <TIM_Base_SetConfig+0x118>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3c      	ldr	r2, [pc, #240]	; (800343c <TIM_Base_SetConfig+0x11c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3b      	ldr	r2, [pc, #236]	; (8003440 <TIM_Base_SetConfig+0x120>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3a      	ldr	r2, [pc, #232]	; (8003444 <TIM_Base_SetConfig+0x124>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <TIM_Base_SetConfig+0x114>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02b      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d027      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2c      	ldr	r2, [pc, #176]	; (8003438 <TIM_Base_SetConfig+0x118>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d023      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2b      	ldr	r2, [pc, #172]	; (800343c <TIM_Base_SetConfig+0x11c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01f      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <TIM_Base_SetConfig+0x120>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01b      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <TIM_Base_SetConfig+0x124>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d017      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a28      	ldr	r2, [pc, #160]	; (8003448 <TIM_Base_SetConfig+0x128>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <TIM_Base_SetConfig+0x12c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00f      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <TIM_Base_SetConfig+0x130>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a25      	ldr	r2, [pc, #148]	; (8003454 <TIM_Base_SetConfig+0x134>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a24      	ldr	r2, [pc, #144]	; (8003458 <TIM_Base_SetConfig+0x138>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a23      	ldr	r2, [pc, #140]	; (800345c <TIM_Base_SetConfig+0x13c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d108      	bne.n	80033e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <TIM_Base_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_Base_SetConfig+0xf8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <TIM_Base_SetConfig+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	615a      	str	r2, [r3, #20]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40010000 	.word	0x40010000
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40010400 	.word	0x40010400
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	40001800 	.word	0x40001800
 8003458:	40001c00 	.word	0x40001c00
 800345c:	40002000 	.word	0x40002000

08003460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 030a 	bic.w	r3, r3, #10
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034be:	b480      	push	{r7}
 80034c0:	b087      	sub	sp, #28
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0210 	bic.w	r2, r3, #16
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	f043 0307 	orr.w	r3, r3, #7
 8003540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800356e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	021a      	lsls	r2, r3, #8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	431a      	orrs	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e05a      	b.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a21      	ldr	r2, [pc, #132]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d01d      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a15      	ldr	r2, [pc, #84]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10c      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4313      	orrs	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e03f      	b.n	8003746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fc38 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fddf 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	; 0x28
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d17c      	bne.n	8003868 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Transmit+0x2c>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e075      	b.n	800386a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UART_Transmit+0x3e>
 8003788:	2302      	movs	r3, #2
 800378a:	e06e      	b.n	800386a <HAL_UART_Transmit+0x11c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2221      	movs	r2, #33	; 0x21
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a2:	f7fd fe75 	bl	8001490 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d108      	bne.n	80037d0 <HAL_UART_Transmit+0x82>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	e003      	b.n	80037d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037e0:	e02a      	b.n	8003838 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fb1f 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3302      	adds	r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	e007      	b.n	800382a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	3301      	adds	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1cf      	bne.n	80037e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	2140      	movs	r1, #64	; 0x40
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 faef 	bl	8003e30 <UART_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e006      	b.n	800386a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	4613      	mov	r3, r2
 800387e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	d11d      	bne.n	80038c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Receive_IT+0x26>
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e016      	b.n	80038ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Receive_IT+0x38>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e00f      	b.n	80038ca <HAL_UART_Receive_IT+0x58>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fb24 	bl	8003f0c <UART_Start_Receive_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0ba      	sub	sp, #232	; 0xe8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_UART_IRQHandler+0x66>
 8003926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc07 	bl	8004146 <UART_Receive_IT>
      return;
 8003938:	e256      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800393a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80de 	beq.w	8003b00 <HAL_UART_IRQHandler+0x22c>
 8003944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003954:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80d1 	beq.w	8003b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_UART_IRQHandler+0xae>
 800396a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0xd2>
 800398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
 80039b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0204 	orr.w	r2, r3, #4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
 80039d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 81ed 	beq.w	8003dde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_UART_IRQHandler+0x14e>
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb92 	bl	8004146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <HAL_UART_IRQHandler+0x17a>
 8003a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d04f      	beq.n	8003aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa9a 	bl	8003f88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d141      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1d9      	bne.n	8003a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4a7d      	ldr	r2, [pc, #500]	; (8003cb0 <HAL_UART_IRQHandler+0x3dc>)
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fe95 	bl	80017f2 <HAL_DMA_Abort_IT>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e00e      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f990 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e00a      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f98c 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e006      	b.n	8003afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f988 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003afa:	e170      	b.n	8003dde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	bf00      	nop
    return;
 8003afe:	e16e      	b.n	8003dde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 814a 	bne.w	8003d9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8143 	beq.w	8003d9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 813c 	beq.w	8003d9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	f040 80b4 	bne.w	8003cb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8140 	beq.w	8003de2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f080 8139 	bcs.w	8003de2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	f000 8088 	beq.w	8003c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1d9      	bne.n	8003b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e1      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e3      	bne.n	8003c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c66:	f023 0310 	bic.w	r3, r3, #16
 8003c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e3      	bne.n	8003c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd fd3e 	bl	8001712 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8b6 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cac:	e099      	b.n	8003de2 <HAL_UART_IRQHandler+0x50e>
 8003cae:	bf00      	nop
 8003cb0:	0800404f 	.word	0x0800404f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 808b 	beq.w	8003de6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8086 	beq.w	8003de6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	623b      	str	r3, [r7, #32]
   return(result);
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d36:	633a      	str	r2, [r7, #48]	; 0x30
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e3      	bne.n	8003d12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d7c:	61fa      	str	r2, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	617b      	str	r3, [r7, #20]
   return(result);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e3      	bne.n	8003d58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f83e 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d9c:	e023      	b.n	8003de6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x4ea>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f95d 	bl	8004076 <UART_Transmit_IT>
    return;
 8003dbc:	e014      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <HAL_UART_IRQHandler+0x514>
 8003dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f99d 	bl	8004116 <UART_EndTransmit_IT>
    return;
 8003ddc:	e004      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
    return;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
      return;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_UART_IRQHandler+0x514>
      return;
 8003de6:	bf00      	nop
  }
}
 8003de8:	37e8      	adds	r7, #232	; 0xe8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b090      	sub	sp, #64	; 0x40
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	e050      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d04c      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e50:	f7fd fb1e 	bl	8001490 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d241      	bcs.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e80:	637a      	str	r2, [r7, #52]	; 0x34
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eb4:	623a      	str	r2, [r7, #32]
 8003eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	69f9      	ldr	r1, [r7, #28]
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e00f      	b.n	8003f04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d09f      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3740      	adds	r7, #64	; 0x40
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2222      	movs	r2, #34	; 0x22
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0220 	orr.w	r2, r2, #32
 8003f78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b095      	sub	sp, #84	; 0x54
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d119      	bne.n	8004034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	647b      	str	r3, [r7, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004020:	61ba      	str	r2, [r7, #24]
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004042:	bf00      	nop
 8004044:	3754      	adds	r7, #84	; 0x54
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fecb 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b21      	cmp	r3, #33	; 0x21
 8004088:	d13e      	bne.n	8004108 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d114      	bne.n	80040be <UART_Transmit_IT+0x48>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d110      	bne.n	80040be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	e008      	b.n	80040d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6211      	str	r1, [r2, #32]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004102:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fe5a 	bl	8003df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b08c      	sub	sp, #48	; 0x30
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b22      	cmp	r3, #34	; 0x22
 8004158:	f040 80ab 	bne.w	80042b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d117      	bne.n	8004196 <UART_Receive_IT+0x50>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d113      	bne.n	8004196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	b29a      	uxth	r2, r3
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
 8004194:	e026      	b.n	80041e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d007      	beq.n	80041ba <UART_Receive_IT+0x74>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <UART_Receive_IT+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e008      	b.n	80041da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15a      	bne.n	80042ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0220 	bic.w	r2, r2, #32
 8004206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d135      	bne.n	80042a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	613b      	str	r3, [r7, #16]
   return(result);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	623a      	str	r2, [r7, #32]
 8004260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	61bb      	str	r3, [r7, #24]
   return(result);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d10a      	bne.n	8004296 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fdbb 	bl	8003e18 <HAL_UARTEx_RxEventCallback>
 80042a2:	e002      	b.n	80042aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fc fce9 	bl	8000c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e002      	b.n	80042b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3730      	adds	r7, #48	; 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b0c0      	sub	sp, #256	; 0x100
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	ea40 0301 	orr.w	r3, r0, r1
 80042e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004314:	f021 010c 	bic.w	r1, r1, #12
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	ea40 0301 	orr.w	r3, r0, r1
 8004342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8f      	ldr	r3, [pc, #572]	; (8004588 <UART_SetConfig+0x2cc>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d005      	beq.n	800435c <UART_SetConfig+0xa0>
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b8d      	ldr	r3, [pc, #564]	; (800458c <UART_SetConfig+0x2d0>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d104      	bne.n	8004366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fd14 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8004360:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004364:	e003      	b.n	800436e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fe fcfb 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 800436a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	f040 810c 	bne.w	8004594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004386:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800438a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	1891      	adds	r1, r2, r2
 8004394:	65b9      	str	r1, [r7, #88]	; 0x58
 8004396:	415b      	adcs	r3, r3
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800439e:	4621      	mov	r1, r4
 80043a0:	eb12 0801 	adds.w	r8, r2, r1
 80043a4:	4629      	mov	r1, r5
 80043a6:	eb43 0901 	adc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043cc:	462b      	mov	r3, r5
 80043ce:	eb49 0303 	adc.w	r3, r9, r3
 80043d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ea:	460b      	mov	r3, r1
 80043ec:	18db      	adds	r3, r3, r3
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
 80043f0:	4613      	mov	r3, r2
 80043f2:	eb42 0303 	adc.w	r3, r2, r3
 80043f6:	657b      	str	r3, [r7, #84]	; 0x54
 80043f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004400:	f7fb ff46 	bl	8000290 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <UART_SetConfig+0x2d4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800441c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	64b9      	str	r1, [r7, #72]	; 0x48
 800442c:	415b      	adcs	r3, r3
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004434:	4641      	mov	r1, r8
 8004436:	eb12 0a01 	adds.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb43 0b01 	adc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800444c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	4692      	mov	sl, r2
 8004456:	469b      	mov	fp, r3
 8004458:	4643      	mov	r3, r8
 800445a:	eb1a 0303 	adds.w	r3, sl, r3
 800445e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004462:	464b      	mov	r3, r9
 8004464:	eb4b 0303 	adc.w	r3, fp, r3
 8004468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004478:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800447c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004496:	f7fb fefb 	bl	8000290 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <UART_SetConfig+0x2d4>)
 80044a2:	fba3 2301 	umull	r2, r3, r3, r1
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2264      	movs	r2, #100	; 0x64
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	1acb      	subs	r3, r1, r3
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <UART_SetConfig+0x2d4>)
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	63b9      	str	r1, [r7, #56]	; 0x38
 80044e0:	415b      	adcs	r3, r3
 80044e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6339      	str	r1, [r7, #48]	; 0x30
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451c:	464b      	mov	r3, r9
 800451e:	460a      	mov	r2, r1
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004534:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800453c:	460b      	mov	r3, r1
 800453e:	18db      	adds	r3, r3, r3
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 8004542:	4613      	mov	r3, r2
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800454e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004552:	f7fb fe9d 	bl	8000290 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <UART_SetConfig+0x2d4>)
 800455c:	fba3 1302 	umull	r1, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	2164      	movs	r1, #100	; 0x64
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	3332      	adds	r3, #50	; 0x32
 800456e:	4a08      	ldr	r2, [pc, #32]	; (8004590 <UART_SetConfig+0x2d4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4422      	add	r2, r4
 8004582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004584:	e105      	b.n	8004792 <UART_SetConfig+0x4d6>
 8004586:	bf00      	nop
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800459e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	6239      	str	r1, [r7, #32]
 80045ae:	415b      	adcs	r3, r3
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045b6:	4641      	mov	r1, r8
 80045b8:	1854      	adds	r4, r2, r1
 80045ba:	4649      	mov	r1, r9
 80045bc:	eb43 0501 	adc.w	r5, r3, r1
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	00eb      	lsls	r3, r5, #3
 80045ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ce:	00e2      	lsls	r2, r4, #3
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	18e3      	adds	r3, r4, r3
 80045d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045dc:	464b      	mov	r3, r9
 80045de:	eb45 0303 	adc.w	r3, r5, r3
 80045e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004602:	4629      	mov	r1, r5
 8004604:	008b      	lsls	r3, r1, #2
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460c:	4621      	mov	r1, r4
 800460e:	008a      	lsls	r2, r1, #2
 8004610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004614:	f7fb fe3c 	bl	8000290 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <UART_SetConfig+0x4e4>)
 800461e:	fba3 2302 	umull	r2, r3, r3, r2
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	011c      	lsls	r4, r3, #4
 8004626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	1891      	adds	r1, r2, r2
 800463e:	61b9      	str	r1, [r7, #24]
 8004640:	415b      	adcs	r3, r3
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004648:	4641      	mov	r1, r8
 800464a:	1851      	adds	r1, r2, r1
 800464c:	6139      	str	r1, [r7, #16]
 800464e:	4649      	mov	r1, r9
 8004650:	414b      	adcs	r3, r1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004660:	4659      	mov	r1, fp
 8004662:	00cb      	lsls	r3, r1, #3
 8004664:	4651      	mov	r1, sl
 8004666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466a:	4651      	mov	r1, sl
 800466c:	00ca      	lsls	r2, r1, #3
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	4603      	mov	r3, r0
 8004674:	4642      	mov	r2, r8
 8004676:	189b      	adds	r3, r3, r2
 8004678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	67bb      	str	r3, [r7, #120]	; 0x78
 8004692:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046a0:	4649      	mov	r1, r9
 80046a2:	008b      	lsls	r3, r1, #2
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046aa:	4641      	mov	r1, r8
 80046ac:	008a      	lsls	r2, r1, #2
 80046ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046b2:	f7fb fded 	bl	8000290 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <UART_SetConfig+0x4e4>)
 80046bc:	fba3 1302 	umull	r1, r3, r3, r2
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	2164      	movs	r1, #100	; 0x64
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	3332      	adds	r3, #50	; 0x32
 80046ce:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <UART_SetConfig+0x4e4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046da:	441c      	add	r4, r3
 80046dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e0:	2200      	movs	r2, #0
 80046e2:	673b      	str	r3, [r7, #112]	; 0x70
 80046e4:	677a      	str	r2, [r7, #116]	; 0x74
 80046e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046ea:	4642      	mov	r2, r8
 80046ec:	464b      	mov	r3, r9
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	415b      	adcs	r3, r3
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fa:	4641      	mov	r1, r8
 80046fc:	1851      	adds	r1, r2, r1
 80046fe:	6039      	str	r1, [r7, #0]
 8004700:	4649      	mov	r1, r9
 8004702:	414b      	adcs	r3, r1
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004712:	4659      	mov	r1, fp
 8004714:	00cb      	lsls	r3, r1, #3
 8004716:	4651      	mov	r1, sl
 8004718:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471c:	4651      	mov	r1, sl
 800471e:	00ca      	lsls	r2, r1, #3
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	4603      	mov	r3, r0
 8004726:	4642      	mov	r2, r8
 8004728:	189b      	adds	r3, r3, r2
 800472a:	66bb      	str	r3, [r7, #104]	; 0x68
 800472c:	464b      	mov	r3, r9
 800472e:	460a      	mov	r2, r1
 8004730:	eb42 0303 	adc.w	r3, r2, r3
 8004734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	663b      	str	r3, [r7, #96]	; 0x60
 8004740:	667a      	str	r2, [r7, #100]	; 0x64
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800474e:	4649      	mov	r1, r9
 8004750:	008b      	lsls	r3, r1, #2
 8004752:	4641      	mov	r1, r8
 8004754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004758:	4641      	mov	r1, r8
 800475a:	008a      	lsls	r2, r1, #2
 800475c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004760:	f7fb fd96 	bl	8000290 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <UART_SetConfig+0x4e4>)
 800476a:	fba3 1302 	umull	r1, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2164      	movs	r1, #100	; 0x64
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	3332      	adds	r3, #50	; 0x32
 800477c:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <UART_SetConfig+0x4e4>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4422      	add	r2, r4
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	bf00      	nop
 8004794:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	51eb851f 	.word	0x51eb851f

080047a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047a4:	b084      	sub	sp, #16
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	f107 001c 	add.w	r0, r7, #28
 80047b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d122      	bne.n	8004802 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 faa2 	bl	8004d40 <USB_CoreReset>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e01a      	b.n	8004838 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa96 	bl	8004d40 <USB_CoreReset>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
 800482a:	e005      	b.n	8004838 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10b      	bne.n	8004856 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f043 0206 	orr.w	r2, r3, #6
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004862:	b004      	add	sp, #16
 8004864:	4770      	bx	lr

08004866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d115      	bne.n	80048d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f7fc fdf6 	bl	80014a8 <HAL_Delay>
      ms++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa2e 	bl	8004d24 <USB_GetMode>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d01e      	beq.n	800490c <USB_SetCurrentMode+0x84>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b31      	cmp	r3, #49	; 0x31
 80048d2:	d9f0      	bls.n	80048b6 <USB_SetCurrentMode+0x2e>
 80048d4:	e01a      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fc fddd 	bl	80014a8 <HAL_Delay>
      ms++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fa15 	bl	8004d24 <USB_GetMode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <USB_SetCurrentMode+0x84>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b31      	cmp	r3, #49	; 0x31
 8004904:	d9f0      	bls.n	80048e8 <USB_SetCurrentMode+0x60>
 8004906:	e001      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e005      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b32      	cmp	r3, #50	; 0x32
 8004910:	d101      	bne.n	8004916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e009      	b.n	8004954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3340      	adds	r3, #64	; 0x40
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3301      	adds	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0e      	cmp	r3, #14
 8004958:	d9f2      	bls.n	8004940 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11c      	bne.n	800499a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496e:	f043 0302 	orr.w	r3, r3, #2
 8004972:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
 8004998:	e00b      	b.n	80049b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	4619      	mov	r1, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	461a      	mov	r2, r3
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10c      	bne.n	80049f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049de:	2100      	movs	r1, #0
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f965 	bl	8004cb0 <USB_SetDevSpeed>
 80049e6:	e008      	b.n	80049fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049e8:	2101      	movs	r1, #1
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f960 	bl	8004cb0 <USB_SetDevSpeed>
 80049f0:	e003      	b.n	80049fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049f2:	2103      	movs	r1, #3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f95b 	bl	8004cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049fa:	2110      	movs	r1, #16
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8f3 	bl	8004be8 <USB_FlushTxFifo>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f91f 	bl	8004c50 <USB_FlushRxFifo>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e043      	b.n	8004ace <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5c:	d118      	bne.n	8004a90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e013      	b.n	8004aa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e008      	b.n	8004aa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3301      	adds	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3b7      	bcc.n	8004a46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e043      	b.n	8004b64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af2:	d118      	bne.n	8004b26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e013      	b.n	8004b38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e008      	b.n	8004b38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	461a      	mov	r2, r3
 8004b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3301      	adds	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3b7      	bcc.n	8004adc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <USB_DevInit+0x2c4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be0:	b004      	add	sp, #16
 8004be2:	4770      	bx	lr
 8004be4:	803c3800 	.word	0x803c3800

08004be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <USB_FlushTxFifo+0x64>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e01b      	b.n	8004c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	daf2      	bge.n	8004bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	019b      	lsls	r3, r3, #6
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <USB_FlushTxFifo+0x64>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d0f0      	beq.n	8004c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	00030d40 	.word	0x00030d40

08004c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <USB_FlushRxFifo+0x5c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e018      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	daf2      	bge.n	8004c5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <USB_FlushRxFifo+0x5c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d0f0      	beq.n	8004c80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <USB_CoreReset+0x64>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e01b      	b.n	8004d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	daf2      	bge.n	8004d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <USB_CoreReset+0x64>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d0f0      	beq.n	8004d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	00030d40 	.word	0x00030d40

08004da8 <__errno>:
 8004da8:	4b01      	ldr	r3, [pc, #4]	; (8004db0 <__errno+0x8>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000000c 	.word	0x2000000c

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	; (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	; (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	; (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	; (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f001 f87c 	bl	8005ec4 <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08005ffc 	.word	0x08005ffc
 8004df0:	08005ffc 	.word	0x08005ffc
 8004df4:	08005ffc 	.word	0x08005ffc
 8004df8:	08006000 	.word	0x08006000

08004dfc <memset>:
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <iprintf>:
 8004e0c:	b40f      	push	{r0, r1, r2, r3}
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <iprintf+0x2c>)
 8004e10:	b513      	push	{r0, r1, r4, lr}
 8004e12:	681c      	ldr	r4, [r3, #0]
 8004e14:	b124      	cbz	r4, 8004e20 <iprintf+0x14>
 8004e16:	69a3      	ldr	r3, [r4, #24]
 8004e18:	b913      	cbnz	r3, 8004e20 <iprintf+0x14>
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f9ee 	bl	80051fc <__sinit>
 8004e20:	ab05      	add	r3, sp, #20
 8004e22:	9a04      	ldr	r2, [sp, #16]
 8004e24:	68a1      	ldr	r1, [r4, #8]
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fbff 	bl	800562c <_vfiprintf_r>
 8004e2e:	b002      	add	sp, #8
 8004e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e34:	b004      	add	sp, #16
 8004e36:	4770      	bx	lr
 8004e38:	2000000c 	.word	0x2000000c

08004e3c <setvbuf>:
 8004e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e40:	461d      	mov	r5, r3
 8004e42:	4b5d      	ldr	r3, [pc, #372]	; (8004fb8 <setvbuf+0x17c>)
 8004e44:	681f      	ldr	r7, [r3, #0]
 8004e46:	4604      	mov	r4, r0
 8004e48:	460e      	mov	r6, r1
 8004e4a:	4690      	mov	r8, r2
 8004e4c:	b127      	cbz	r7, 8004e58 <setvbuf+0x1c>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	b913      	cbnz	r3, 8004e58 <setvbuf+0x1c>
 8004e52:	4638      	mov	r0, r7
 8004e54:	f000 f9d2 	bl	80051fc <__sinit>
 8004e58:	4b58      	ldr	r3, [pc, #352]	; (8004fbc <setvbuf+0x180>)
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d167      	bne.n	8004f2e <setvbuf+0xf2>
 8004e5e:	687c      	ldr	r4, [r7, #4]
 8004e60:	f1b8 0f02 	cmp.w	r8, #2
 8004e64:	d006      	beq.n	8004e74 <setvbuf+0x38>
 8004e66:	f1b8 0f01 	cmp.w	r8, #1
 8004e6a:	f200 809f 	bhi.w	8004fac <setvbuf+0x170>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	f2c0 809c 	blt.w	8004fac <setvbuf+0x170>
 8004e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e76:	07db      	lsls	r3, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <setvbuf+0x4a>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	0598      	lsls	r0, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <setvbuf+0x4a>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f000 fa59 	bl	8005338 <__retarget_lock_acquire_recursive>
 8004e86:	4621      	mov	r1, r4
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f000 f923 	bl	80050d4 <_fflush_r>
 8004e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e90:	b141      	cbz	r1, 8004ea4 <setvbuf+0x68>
 8004e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e96:	4299      	cmp	r1, r3
 8004e98:	d002      	beq.n	8004ea0 <setvbuf+0x64>
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f000 fabc 	bl	8005418 <_free_r>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61a3      	str	r3, [r4, #24]
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	0619      	lsls	r1, r3, #24
 8004eae:	d503      	bpl.n	8004eb8 <setvbuf+0x7c>
 8004eb0:	6921      	ldr	r1, [r4, #16]
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f000 fab0 	bl	8005418 <_free_r>
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	f1b8 0f02 	cmp.w	r8, #2
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	d06c      	beq.n	8004fa4 <setvbuf+0x168>
 8004eca:	ab01      	add	r3, sp, #4
 8004ecc:	466a      	mov	r2, sp
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f000 fa33 	bl	800533c <__swhatbuf_r>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	4318      	orrs	r0, r3
 8004eda:	81a0      	strh	r0, [r4, #12]
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	d130      	bne.n	8004f42 <setvbuf+0x106>
 8004ee0:	9d00      	ldr	r5, [sp, #0]
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 fa90 	bl	8005408 <malloc>
 8004ee8:	4606      	mov	r6, r0
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d155      	bne.n	8004f9a <setvbuf+0x15e>
 8004eee:	f8dd 9000 	ldr.w	r9, [sp]
 8004ef2:	45a9      	cmp	r9, r5
 8004ef4:	d14a      	bne.n	8004f8c <setvbuf+0x150>
 8004ef6:	f04f 35ff 	mov.w	r5, #4294967295
 8004efa:	2200      	movs	r2, #0
 8004efc:	60a2      	str	r2, [r4, #8]
 8004efe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	6122      	str	r2, [r4, #16]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0c:	6162      	str	r2, [r4, #20]
 8004f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	07d2      	lsls	r2, r2, #31
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	d405      	bmi.n	8004f26 <setvbuf+0xea>
 8004f1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004f1e:	d102      	bne.n	8004f26 <setvbuf+0xea>
 8004f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f22:	f000 fa0a 	bl	800533a <__retarget_lock_release_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	b003      	add	sp, #12
 8004f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <setvbuf+0x184>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	d101      	bne.n	8004f38 <setvbuf+0xfc>
 8004f34:	68bc      	ldr	r4, [r7, #8]
 8004f36:	e793      	b.n	8004e60 <setvbuf+0x24>
 8004f38:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <setvbuf+0x188>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	bf08      	it	eq
 8004f3e:	68fc      	ldreq	r4, [r7, #12]
 8004f40:	e78e      	b.n	8004e60 <setvbuf+0x24>
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	d0cd      	beq.n	8004ee2 <setvbuf+0xa6>
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	b913      	cbnz	r3, 8004f50 <setvbuf+0x114>
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f000 f956 	bl	80051fc <__sinit>
 8004f50:	f1b8 0f01 	cmp.w	r8, #1
 8004f54:	bf08      	it	eq
 8004f56:	89a3      	ldrheq	r3, [r4, #12]
 8004f58:	6026      	str	r6, [r4, #0]
 8004f5a:	bf04      	itt	eq
 8004f5c:	f043 0301 	orreq.w	r3, r3, #1
 8004f60:	81a3      	strheq	r3, [r4, #12]
 8004f62:	89a2      	ldrh	r2, [r4, #12]
 8004f64:	f012 0308 	ands.w	r3, r2, #8
 8004f68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004f6c:	d01c      	beq.n	8004fa8 <setvbuf+0x16c>
 8004f6e:	07d3      	lsls	r3, r2, #31
 8004f70:	bf41      	itttt	mi
 8004f72:	2300      	movmi	r3, #0
 8004f74:	426d      	negmi	r5, r5
 8004f76:	60a3      	strmi	r3, [r4, #8]
 8004f78:	61a5      	strmi	r5, [r4, #24]
 8004f7a:	bf58      	it	pl
 8004f7c:	60a5      	strpl	r5, [r4, #8]
 8004f7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004f80:	f015 0501 	ands.w	r5, r5, #1
 8004f84:	d115      	bne.n	8004fb2 <setvbuf+0x176>
 8004f86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004f8a:	e7c8      	b.n	8004f1e <setvbuf+0xe2>
 8004f8c:	4648      	mov	r0, r9
 8004f8e:	f000 fa3b 	bl	8005408 <malloc>
 8004f92:	4606      	mov	r6, r0
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d0ae      	beq.n	8004ef6 <setvbuf+0xba>
 8004f98:	464d      	mov	r5, r9
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	e7d0      	b.n	8004f46 <setvbuf+0x10a>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	e7a8      	b.n	8004efa <setvbuf+0xbe>
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	e7e8      	b.n	8004f7e <setvbuf+0x142>
 8004fac:	f04f 35ff 	mov.w	r5, #4294967295
 8004fb0:	e7b9      	b.n	8004f26 <setvbuf+0xea>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	e7b7      	b.n	8004f26 <setvbuf+0xea>
 8004fb6:	bf00      	nop
 8004fb8:	2000000c 	.word	0x2000000c
 8004fbc:	08005f80 	.word	0x08005f80
 8004fc0:	08005fa0 	.word	0x08005fa0
 8004fc4:	08005f60 	.word	0x08005f60

08004fc8 <__sflush_r>:
 8004fc8:	898a      	ldrh	r2, [r1, #12]
 8004fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fce:	4605      	mov	r5, r0
 8004fd0:	0710      	lsls	r0, r2, #28
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	d458      	bmi.n	8005088 <__sflush_r+0xc0>
 8004fd6:	684b      	ldr	r3, [r1, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	dc05      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dc02      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	d0f9      	beq.n	8004fe2 <__sflush_r+0x1a>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ff4:	682f      	ldr	r7, [r5, #0]
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	d032      	beq.n	8005060 <__sflush_r+0x98>
 8004ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	075a      	lsls	r2, r3, #29
 8005000:	d505      	bpl.n	800500e <__sflush_r+0x46>
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	1ac0      	subs	r0, r0, r3
 8005006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005008:	b10b      	cbz	r3, 800500e <__sflush_r+0x46>
 800500a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800500c:	1ac0      	subs	r0, r0, r3
 800500e:	2300      	movs	r3, #0
 8005010:	4602      	mov	r2, r0
 8005012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	4628      	mov	r0, r5
 8005018:	47b0      	blx	r6
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	d106      	bne.n	800502e <__sflush_r+0x66>
 8005020:	6829      	ldr	r1, [r5, #0]
 8005022:	291d      	cmp	r1, #29
 8005024:	d82c      	bhi.n	8005080 <__sflush_r+0xb8>
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <__sflush_r+0x108>)
 8005028:	40ca      	lsrs	r2, r1
 800502a:	07d6      	lsls	r6, r2, #31
 800502c:	d528      	bpl.n	8005080 <__sflush_r+0xb8>
 800502e:	2200      	movs	r2, #0
 8005030:	6062      	str	r2, [r4, #4]
 8005032:	04d9      	lsls	r1, r3, #19
 8005034:	6922      	ldr	r2, [r4, #16]
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	d504      	bpl.n	8005044 <__sflush_r+0x7c>
 800503a:	1c42      	adds	r2, r0, #1
 800503c:	d101      	bne.n	8005042 <__sflush_r+0x7a>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b903      	cbnz	r3, 8005044 <__sflush_r+0x7c>
 8005042:	6560      	str	r0, [r4, #84]	; 0x54
 8005044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005046:	602f      	str	r7, [r5, #0]
 8005048:	2900      	cmp	r1, #0
 800504a:	d0ca      	beq.n	8004fe2 <__sflush_r+0x1a>
 800504c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005050:	4299      	cmp	r1, r3
 8005052:	d002      	beq.n	800505a <__sflush_r+0x92>
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f9df 	bl	8005418 <_free_r>
 800505a:	2000      	movs	r0, #0
 800505c:	6360      	str	r0, [r4, #52]	; 0x34
 800505e:	e7c1      	b.n	8004fe4 <__sflush_r+0x1c>
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	2301      	movs	r3, #1
 8005064:	4628      	mov	r0, r5
 8005066:	47b0      	blx	r6
 8005068:	1c41      	adds	r1, r0, #1
 800506a:	d1c7      	bne.n	8004ffc <__sflush_r+0x34>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0c4      	beq.n	8004ffc <__sflush_r+0x34>
 8005072:	2b1d      	cmp	r3, #29
 8005074:	d001      	beq.n	800507a <__sflush_r+0xb2>
 8005076:	2b16      	cmp	r3, #22
 8005078:	d101      	bne.n	800507e <__sflush_r+0xb6>
 800507a:	602f      	str	r7, [r5, #0]
 800507c:	e7b1      	b.n	8004fe2 <__sflush_r+0x1a>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	e7ad      	b.n	8004fe4 <__sflush_r+0x1c>
 8005088:	690f      	ldr	r7, [r1, #16]
 800508a:	2f00      	cmp	r7, #0
 800508c:	d0a9      	beq.n	8004fe2 <__sflush_r+0x1a>
 800508e:	0793      	lsls	r3, r2, #30
 8005090:	680e      	ldr	r6, [r1, #0]
 8005092:	bf08      	it	eq
 8005094:	694b      	ldreq	r3, [r1, #20]
 8005096:	600f      	str	r7, [r1, #0]
 8005098:	bf18      	it	ne
 800509a:	2300      	movne	r3, #0
 800509c:	eba6 0807 	sub.w	r8, r6, r7
 80050a0:	608b      	str	r3, [r1, #8]
 80050a2:	f1b8 0f00 	cmp.w	r8, #0
 80050a6:	dd9c      	ble.n	8004fe2 <__sflush_r+0x1a>
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050ac:	4643      	mov	r3, r8
 80050ae:	463a      	mov	r2, r7
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b0      	blx	r6
 80050b4:	2800      	cmp	r0, #0
 80050b6:	dc06      	bgt.n	80050c6 <__sflush_r+0xfe>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e78e      	b.n	8004fe4 <__sflush_r+0x1c>
 80050c6:	4407      	add	r7, r0
 80050c8:	eba8 0800 	sub.w	r8, r8, r0
 80050cc:	e7e9      	b.n	80050a2 <__sflush_r+0xda>
 80050ce:	bf00      	nop
 80050d0:	20400001 	.word	0x20400001

080050d4 <_fflush_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b913      	cbnz	r3, 80050e4 <_fflush_r+0x10>
 80050de:	2500      	movs	r5, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	b118      	cbz	r0, 80050ee <_fflush_r+0x1a>
 80050e6:	6983      	ldr	r3, [r0, #24]
 80050e8:	b90b      	cbnz	r3, 80050ee <_fflush_r+0x1a>
 80050ea:	f000 f887 	bl	80051fc <__sinit>
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <_fflush_r+0x6c>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d11b      	bne.n	800512c <_fflush_r+0x58>
 80050f4:	686c      	ldr	r4, [r5, #4]
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ef      	beq.n	80050de <_fflush_r+0xa>
 80050fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005100:	07d0      	lsls	r0, r2, #31
 8005102:	d404      	bmi.n	800510e <_fflush_r+0x3a>
 8005104:	0599      	lsls	r1, r3, #22
 8005106:	d402      	bmi.n	800510e <_fflush_r+0x3a>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f000 f915 	bl	8005338 <__retarget_lock_acquire_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff ff59 	bl	8004fc8 <__sflush_r>
 8005116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005118:	07da      	lsls	r2, r3, #31
 800511a:	4605      	mov	r5, r0
 800511c:	d4e0      	bmi.n	80050e0 <_fflush_r+0xc>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d4dd      	bmi.n	80050e0 <_fflush_r+0xc>
 8005124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005126:	f000 f908 	bl	800533a <__retarget_lock_release_recursive>
 800512a:	e7d9      	b.n	80050e0 <_fflush_r+0xc>
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <_fflush_r+0x70>)
 800512e:	429c      	cmp	r4, r3
 8005130:	d101      	bne.n	8005136 <_fflush_r+0x62>
 8005132:	68ac      	ldr	r4, [r5, #8]
 8005134:	e7df      	b.n	80050f6 <_fflush_r+0x22>
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <_fflush_r+0x74>)
 8005138:	429c      	cmp	r4, r3
 800513a:	bf08      	it	eq
 800513c:	68ec      	ldreq	r4, [r5, #12]
 800513e:	e7da      	b.n	80050f6 <_fflush_r+0x22>
 8005140:	08005f80 	.word	0x08005f80
 8005144:	08005fa0 	.word	0x08005fa0
 8005148:	08005f60 	.word	0x08005f60

0800514c <std>:
 800514c:	2300      	movs	r3, #0
 800514e:	b510      	push	{r4, lr}
 8005150:	4604      	mov	r4, r0
 8005152:	e9c0 3300 	strd	r3, r3, [r0]
 8005156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800515a:	6083      	str	r3, [r0, #8]
 800515c:	8181      	strh	r1, [r0, #12]
 800515e:	6643      	str	r3, [r0, #100]	; 0x64
 8005160:	81c2      	strh	r2, [r0, #14]
 8005162:	6183      	str	r3, [r0, #24]
 8005164:	4619      	mov	r1, r3
 8005166:	2208      	movs	r2, #8
 8005168:	305c      	adds	r0, #92	; 0x5c
 800516a:	f7ff fe47 	bl	8004dfc <memset>
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <std+0x38>)
 8005170:	6263      	str	r3, [r4, #36]	; 0x24
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <std+0x3c>)
 8005174:	62a3      	str	r3, [r4, #40]	; 0x28
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <std+0x40>)
 8005178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <std+0x44>)
 800517c:	6224      	str	r4, [r4, #32]
 800517e:	6323      	str	r3, [r4, #48]	; 0x30
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	08005bd5 	.word	0x08005bd5
 8005188:	08005bf7 	.word	0x08005bf7
 800518c:	08005c2f 	.word	0x08005c2f
 8005190:	08005c53 	.word	0x08005c53

08005194 <_cleanup_r>:
 8005194:	4901      	ldr	r1, [pc, #4]	; (800519c <_cleanup_r+0x8>)
 8005196:	f000 b8af 	b.w	80052f8 <_fwalk_reent>
 800519a:	bf00      	nop
 800519c:	080050d5 	.word	0x080050d5

080051a0 <__sfmoreglue>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	2268      	movs	r2, #104	; 0x68
 80051a4:	1e4d      	subs	r5, r1, #1
 80051a6:	4355      	muls	r5, r2
 80051a8:	460e      	mov	r6, r1
 80051aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051ae:	f000 f99f 	bl	80054f0 <_malloc_r>
 80051b2:	4604      	mov	r4, r0
 80051b4:	b140      	cbz	r0, 80051c8 <__sfmoreglue+0x28>
 80051b6:	2100      	movs	r1, #0
 80051b8:	e9c0 1600 	strd	r1, r6, [r0]
 80051bc:	300c      	adds	r0, #12
 80051be:	60a0      	str	r0, [r4, #8]
 80051c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051c4:	f7ff fe1a 	bl	8004dfc <memset>
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd70      	pop	{r4, r5, r6, pc}

080051cc <__sfp_lock_acquire>:
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <__sfp_lock_acquire+0x8>)
 80051ce:	f000 b8b3 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80051d2:	bf00      	nop
 80051d4:	20000cb5 	.word	0x20000cb5

080051d8 <__sfp_lock_release>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__sfp_lock_release+0x8>)
 80051da:	f000 b8ae 	b.w	800533a <__retarget_lock_release_recursive>
 80051de:	bf00      	nop
 80051e0:	20000cb5 	.word	0x20000cb5

080051e4 <__sinit_lock_acquire>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__sinit_lock_acquire+0x8>)
 80051e6:	f000 b8a7 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	20000cb6 	.word	0x20000cb6

080051f0 <__sinit_lock_release>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__sinit_lock_release+0x8>)
 80051f2:	f000 b8a2 	b.w	800533a <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	20000cb6 	.word	0x20000cb6

080051fc <__sinit>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	f7ff fff0 	bl	80051e4 <__sinit_lock_acquire>
 8005204:	69a3      	ldr	r3, [r4, #24]
 8005206:	b11b      	cbz	r3, 8005210 <__sinit+0x14>
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f7ff bff0 	b.w	80051f0 <__sinit_lock_release>
 8005210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005214:	6523      	str	r3, [r4, #80]	; 0x50
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <__sinit+0x68>)
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <__sinit+0x6c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	62a2      	str	r2, [r4, #40]	; 0x28
 800521e:	42a3      	cmp	r3, r4
 8005220:	bf04      	itt	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	61a3      	streq	r3, [r4, #24]
 8005226:	4620      	mov	r0, r4
 8005228:	f000 f820 	bl	800526c <__sfp>
 800522c:	6060      	str	r0, [r4, #4]
 800522e:	4620      	mov	r0, r4
 8005230:	f000 f81c 	bl	800526c <__sfp>
 8005234:	60a0      	str	r0, [r4, #8]
 8005236:	4620      	mov	r0, r4
 8005238:	f000 f818 	bl	800526c <__sfp>
 800523c:	2200      	movs	r2, #0
 800523e:	60e0      	str	r0, [r4, #12]
 8005240:	2104      	movs	r1, #4
 8005242:	6860      	ldr	r0, [r4, #4]
 8005244:	f7ff ff82 	bl	800514c <std>
 8005248:	68a0      	ldr	r0, [r4, #8]
 800524a:	2201      	movs	r2, #1
 800524c:	2109      	movs	r1, #9
 800524e:	f7ff ff7d 	bl	800514c <std>
 8005252:	68e0      	ldr	r0, [r4, #12]
 8005254:	2202      	movs	r2, #2
 8005256:	2112      	movs	r1, #18
 8005258:	f7ff ff78 	bl	800514c <std>
 800525c:	2301      	movs	r3, #1
 800525e:	61a3      	str	r3, [r4, #24]
 8005260:	e7d2      	b.n	8005208 <__sinit+0xc>
 8005262:	bf00      	nop
 8005264:	08005f5c 	.word	0x08005f5c
 8005268:	08005195 	.word	0x08005195

0800526c <__sfp>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	4607      	mov	r7, r0
 8005270:	f7ff ffac 	bl	80051cc <__sfp_lock_acquire>
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <__sfp+0x84>)
 8005276:	681e      	ldr	r6, [r3, #0]
 8005278:	69b3      	ldr	r3, [r6, #24]
 800527a:	b913      	cbnz	r3, 8005282 <__sfp+0x16>
 800527c:	4630      	mov	r0, r6
 800527e:	f7ff ffbd 	bl	80051fc <__sinit>
 8005282:	3648      	adds	r6, #72	; 0x48
 8005284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	d503      	bpl.n	8005294 <__sfp+0x28>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	b30b      	cbz	r3, 80052d4 <__sfp+0x68>
 8005290:	6836      	ldr	r6, [r6, #0]
 8005292:	e7f7      	b.n	8005284 <__sfp+0x18>
 8005294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005298:	b9d5      	cbnz	r5, 80052d0 <__sfp+0x64>
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <__sfp+0x88>)
 800529c:	60e3      	str	r3, [r4, #12]
 800529e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052a2:	6665      	str	r5, [r4, #100]	; 0x64
 80052a4:	f000 f847 	bl	8005336 <__retarget_lock_init_recursive>
 80052a8:	f7ff ff96 	bl	80051d8 <__sfp_lock_release>
 80052ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052b4:	6025      	str	r5, [r4, #0]
 80052b6:	61a5      	str	r5, [r4, #24]
 80052b8:	2208      	movs	r2, #8
 80052ba:	4629      	mov	r1, r5
 80052bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052c0:	f7ff fd9c 	bl	8004dfc <memset>
 80052c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052cc:	4620      	mov	r0, r4
 80052ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d0:	3468      	adds	r4, #104	; 0x68
 80052d2:	e7d9      	b.n	8005288 <__sfp+0x1c>
 80052d4:	2104      	movs	r1, #4
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7ff ff62 	bl	80051a0 <__sfmoreglue>
 80052dc:	4604      	mov	r4, r0
 80052de:	6030      	str	r0, [r6, #0]
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d1d5      	bne.n	8005290 <__sfp+0x24>
 80052e4:	f7ff ff78 	bl	80051d8 <__sfp_lock_release>
 80052e8:	230c      	movs	r3, #12
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	e7ee      	b.n	80052cc <__sfp+0x60>
 80052ee:	bf00      	nop
 80052f0:	08005f5c 	.word	0x08005f5c
 80052f4:	ffff0001 	.word	0xffff0001

080052f8 <_fwalk_reent>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4606      	mov	r6, r0
 80052fe:	4688      	mov	r8, r1
 8005300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005304:	2700      	movs	r7, #0
 8005306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800530a:	f1b9 0901 	subs.w	r9, r9, #1
 800530e:	d505      	bpl.n	800531c <_fwalk_reent+0x24>
 8005310:	6824      	ldr	r4, [r4, #0]
 8005312:	2c00      	cmp	r4, #0
 8005314:	d1f7      	bne.n	8005306 <_fwalk_reent+0xe>
 8005316:	4638      	mov	r0, r7
 8005318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531c:	89ab      	ldrh	r3, [r5, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d907      	bls.n	8005332 <_fwalk_reent+0x3a>
 8005322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005326:	3301      	adds	r3, #1
 8005328:	d003      	beq.n	8005332 <_fwalk_reent+0x3a>
 800532a:	4629      	mov	r1, r5
 800532c:	4630      	mov	r0, r6
 800532e:	47c0      	blx	r8
 8005330:	4307      	orrs	r7, r0
 8005332:	3568      	adds	r5, #104	; 0x68
 8005334:	e7e9      	b.n	800530a <_fwalk_reent+0x12>

08005336 <__retarget_lock_init_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_acquire_recursive>:
 8005338:	4770      	bx	lr

0800533a <__retarget_lock_release_recursive>:
 800533a:	4770      	bx	lr

0800533c <__swhatbuf_r>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	460e      	mov	r6, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2900      	cmp	r1, #0
 8005346:	b096      	sub	sp, #88	; 0x58
 8005348:	4614      	mov	r4, r2
 800534a:	461d      	mov	r5, r3
 800534c:	da08      	bge.n	8005360 <__swhatbuf_r+0x24>
 800534e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	602a      	str	r2, [r5, #0]
 8005356:	061a      	lsls	r2, r3, #24
 8005358:	d410      	bmi.n	800537c <__swhatbuf_r+0x40>
 800535a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800535e:	e00e      	b.n	800537e <__swhatbuf_r+0x42>
 8005360:	466a      	mov	r2, sp
 8005362:	f000 fd5d 	bl	8005e20 <_fstat_r>
 8005366:	2800      	cmp	r0, #0
 8005368:	dbf1      	blt.n	800534e <__swhatbuf_r+0x12>
 800536a:	9a01      	ldr	r2, [sp, #4]
 800536c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005374:	425a      	negs	r2, r3
 8005376:	415a      	adcs	r2, r3
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	e7ee      	b.n	800535a <__swhatbuf_r+0x1e>
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	2000      	movs	r0, #0
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	b016      	add	sp, #88	; 0x58
 8005384:	bd70      	pop	{r4, r5, r6, pc}
	...

08005388 <__smakebuf_r>:
 8005388:	898b      	ldrh	r3, [r1, #12]
 800538a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800538c:	079d      	lsls	r5, r3, #30
 800538e:	4606      	mov	r6, r0
 8005390:	460c      	mov	r4, r1
 8005392:	d507      	bpl.n	80053a4 <__smakebuf_r+0x1c>
 8005394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2301      	movs	r3, #1
 800539e:	6163      	str	r3, [r4, #20]
 80053a0:	b002      	add	sp, #8
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	ab01      	add	r3, sp, #4
 80053a6:	466a      	mov	r2, sp
 80053a8:	f7ff ffc8 	bl	800533c <__swhatbuf_r>
 80053ac:	9900      	ldr	r1, [sp, #0]
 80053ae:	4605      	mov	r5, r0
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f89d 	bl	80054f0 <_malloc_r>
 80053b6:	b948      	cbnz	r0, 80053cc <__smakebuf_r+0x44>
 80053b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053bc:	059a      	lsls	r2, r3, #22
 80053be:	d4ef      	bmi.n	80053a0 <__smakebuf_r+0x18>
 80053c0:	f023 0303 	bic.w	r3, r3, #3
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	e7e3      	b.n	8005394 <__smakebuf_r+0xc>
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <__smakebuf_r+0x7c>)
 80053ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	6020      	str	r0, [r4, #0]
 80053d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	9b00      	ldr	r3, [sp, #0]
 80053dc:	6163      	str	r3, [r4, #20]
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	6120      	str	r0, [r4, #16]
 80053e2:	b15b      	cbz	r3, 80053fc <__smakebuf_r+0x74>
 80053e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 fd2b 	bl	8005e44 <_isatty_r>
 80053ee:	b128      	cbz	r0, 80053fc <__smakebuf_r+0x74>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	89a0      	ldrh	r0, [r4, #12]
 80053fe:	4305      	orrs	r5, r0
 8005400:	81a5      	strh	r5, [r4, #12]
 8005402:	e7cd      	b.n	80053a0 <__smakebuf_r+0x18>
 8005404:	08005195 	.word	0x08005195

08005408 <malloc>:
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <malloc+0xc>)
 800540a:	4601      	mov	r1, r0
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f000 b86f 	b.w	80054f0 <_malloc_r>
 8005412:	bf00      	nop
 8005414:	2000000c 	.word	0x2000000c

08005418 <_free_r>:
 8005418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541a:	2900      	cmp	r1, #0
 800541c:	d044      	beq.n	80054a8 <_free_r+0x90>
 800541e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005422:	9001      	str	r0, [sp, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f1a1 0404 	sub.w	r4, r1, #4
 800542a:	bfb8      	it	lt
 800542c:	18e4      	addlt	r4, r4, r3
 800542e:	f000 fd2b 	bl	8005e88 <__malloc_lock>
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <_free_r+0x94>)
 8005434:	9801      	ldr	r0, [sp, #4]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	b933      	cbnz	r3, 8005448 <_free_r+0x30>
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6014      	str	r4, [r2, #0]
 800543e:	b003      	add	sp, #12
 8005440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005444:	f000 bd26 	b.w	8005e94 <__malloc_unlock>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d908      	bls.n	800545e <_free_r+0x46>
 800544c:	6825      	ldr	r5, [r4, #0]
 800544e:	1961      	adds	r1, r4, r5
 8005450:	428b      	cmp	r3, r1
 8005452:	bf01      	itttt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	e7ed      	b.n	800543a <_free_r+0x22>
 800545e:	461a      	mov	r2, r3
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b10b      	cbz	r3, 8005468 <_free_r+0x50>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d9fa      	bls.n	800545e <_free_r+0x46>
 8005468:	6811      	ldr	r1, [r2, #0]
 800546a:	1855      	adds	r5, r2, r1
 800546c:	42a5      	cmp	r5, r4
 800546e:	d10b      	bne.n	8005488 <_free_r+0x70>
 8005470:	6824      	ldr	r4, [r4, #0]
 8005472:	4421      	add	r1, r4
 8005474:	1854      	adds	r4, r2, r1
 8005476:	42a3      	cmp	r3, r4
 8005478:	6011      	str	r1, [r2, #0]
 800547a:	d1e0      	bne.n	800543e <_free_r+0x26>
 800547c:	681c      	ldr	r4, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	4421      	add	r1, r4
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	e7da      	b.n	800543e <_free_r+0x26>
 8005488:	d902      	bls.n	8005490 <_free_r+0x78>
 800548a:	230c      	movs	r3, #12
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	e7d6      	b.n	800543e <_free_r+0x26>
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	1961      	adds	r1, r4, r5
 8005494:	428b      	cmp	r3, r1
 8005496:	bf04      	itt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	bf04      	itt	eq
 80054a0:	1949      	addeq	r1, r1, r5
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	6054      	str	r4, [r2, #4]
 80054a6:	e7ca      	b.n	800543e <_free_r+0x26>
 80054a8:	b003      	add	sp, #12
 80054aa:	bd30      	pop	{r4, r5, pc}
 80054ac:	20000cb8 	.word	0x20000cb8

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0e      	ldr	r6, [pc, #56]	; (80054ec <sbrk_aligned+0x3c>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 fb7a 	bl	8005bb4 <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fb75 	bl	8005bb4 <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d00a      	beq.n	80054e4 <sbrk_aligned+0x34>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d007      	beq.n	80054e8 <sbrk_aligned+0x38>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fb6a 	bl	8005bb4 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d101      	bne.n	80054e8 <sbrk_aligned+0x38>
 80054e4:	f04f 34ff 	mov.w	r4, #4294967295
 80054e8:	4620      	mov	r0, r4
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	20000cbc 	.word	0x20000cbc

080054f0 <_malloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	2d00      	cmp	r5, #0
 8005504:	4607      	mov	r7, r0
 8005506:	db01      	blt.n	800550c <_malloc_r+0x1c>
 8005508:	42a9      	cmp	r1, r5
 800550a:	d905      	bls.n	8005518 <_malloc_r+0x28>
 800550c:	230c      	movs	r3, #12
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	2600      	movs	r6, #0
 8005512:	4630      	mov	r0, r6
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	4e2e      	ldr	r6, [pc, #184]	; (80055d4 <_malloc_r+0xe4>)
 800551a:	f000 fcb5 	bl	8005e88 <__malloc_lock>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	461c      	mov	r4, r3
 8005522:	bb34      	cbnz	r4, 8005572 <_malloc_r+0x82>
 8005524:	4629      	mov	r1, r5
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff ffc2 	bl	80054b0 <sbrk_aligned>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	4604      	mov	r4, r0
 8005530:	d14d      	bne.n	80055ce <_malloc_r+0xde>
 8005532:	6834      	ldr	r4, [r6, #0]
 8005534:	4626      	mov	r6, r4
 8005536:	2e00      	cmp	r6, #0
 8005538:	d140      	bne.n	80055bc <_malloc_r+0xcc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4631      	mov	r1, r6
 800553e:	4638      	mov	r0, r7
 8005540:	eb04 0803 	add.w	r8, r4, r3
 8005544:	f000 fb36 	bl	8005bb4 <_sbrk_r>
 8005548:	4580      	cmp	r8, r0
 800554a:	d13a      	bne.n	80055c2 <_malloc_r+0xd2>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	3503      	adds	r5, #3
 8005550:	1a6d      	subs	r5, r5, r1
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	4629      	mov	r1, r5
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff ffa5 	bl	80054b0 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d02b      	beq.n	80055c2 <_malloc_r+0xd2>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e00e      	b.n	8005590 <_malloc_r+0xa0>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	d41e      	bmi.n	80055b6 <_malloc_r+0xc6>
 8005578:	2a0b      	cmp	r2, #11
 800557a:	d916      	bls.n	80055aa <_malloc_r+0xba>
 800557c:	1961      	adds	r1, r4, r5
 800557e:	42a3      	cmp	r3, r4
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	bf18      	it	ne
 8005584:	6059      	strne	r1, [r3, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	bf08      	it	eq
 800558a:	6031      	streq	r1, [r6, #0]
 800558c:	5162      	str	r2, [r4, r5]
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	4638      	mov	r0, r7
 8005592:	f104 060b 	add.w	r6, r4, #11
 8005596:	f000 fc7d 	bl	8005e94 <__malloc_unlock>
 800559a:	f026 0607 	bic.w	r6, r6, #7
 800559e:	1d23      	adds	r3, r4, #4
 80055a0:	1af2      	subs	r2, r6, r3
 80055a2:	d0b6      	beq.n	8005512 <_malloc_r+0x22>
 80055a4:	1b9b      	subs	r3, r3, r6
 80055a6:	50a3      	str	r3, [r4, r2]
 80055a8:	e7b3      	b.n	8005512 <_malloc_r+0x22>
 80055aa:	6862      	ldr	r2, [r4, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	bf0c      	ite	eq
 80055b0:	6032      	streq	r2, [r6, #0]
 80055b2:	605a      	strne	r2, [r3, #4]
 80055b4:	e7ec      	b.n	8005590 <_malloc_r+0xa0>
 80055b6:	4623      	mov	r3, r4
 80055b8:	6864      	ldr	r4, [r4, #4]
 80055ba:	e7b2      	b.n	8005522 <_malloc_r+0x32>
 80055bc:	4634      	mov	r4, r6
 80055be:	6876      	ldr	r6, [r6, #4]
 80055c0:	e7b9      	b.n	8005536 <_malloc_r+0x46>
 80055c2:	230c      	movs	r3, #12
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4638      	mov	r0, r7
 80055c8:	f000 fc64 	bl	8005e94 <__malloc_unlock>
 80055cc:	e7a1      	b.n	8005512 <_malloc_r+0x22>
 80055ce:	6025      	str	r5, [r4, #0]
 80055d0:	e7de      	b.n	8005590 <_malloc_r+0xa0>
 80055d2:	bf00      	nop
 80055d4:	20000cb8 	.word	0x20000cb8

080055d8 <__sfputc_r>:
 80055d8:	6893      	ldr	r3, [r2, #8]
 80055da:	3b01      	subs	r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	b410      	push	{r4}
 80055e0:	6093      	str	r3, [r2, #8]
 80055e2:	da08      	bge.n	80055f6 <__sfputc_r+0x1e>
 80055e4:	6994      	ldr	r4, [r2, #24]
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	db01      	blt.n	80055ee <__sfputc_r+0x16>
 80055ea:	290a      	cmp	r1, #10
 80055ec:	d103      	bne.n	80055f6 <__sfputc_r+0x1e>
 80055ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f2:	f000 bb33 	b.w	8005c5c <__swbuf_r>
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	1c58      	adds	r0, r3, #1
 80055fa:	6010      	str	r0, [r2, #0]
 80055fc:	7019      	strb	r1, [r3, #0]
 80055fe:	4608      	mov	r0, r1
 8005600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005604:	4770      	bx	lr

08005606 <__sfputs_r>:
 8005606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005608:	4606      	mov	r6, r0
 800560a:	460f      	mov	r7, r1
 800560c:	4614      	mov	r4, r2
 800560e:	18d5      	adds	r5, r2, r3
 8005610:	42ac      	cmp	r4, r5
 8005612:	d101      	bne.n	8005618 <__sfputs_r+0x12>
 8005614:	2000      	movs	r0, #0
 8005616:	e007      	b.n	8005628 <__sfputs_r+0x22>
 8005618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561c:	463a      	mov	r2, r7
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff ffda 	bl	80055d8 <__sfputc_r>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d1f3      	bne.n	8005610 <__sfputs_r+0xa>
 8005628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800562c <_vfiprintf_r>:
 800562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005630:	460d      	mov	r5, r1
 8005632:	b09d      	sub	sp, #116	; 0x74
 8005634:	4614      	mov	r4, r2
 8005636:	4698      	mov	r8, r3
 8005638:	4606      	mov	r6, r0
 800563a:	b118      	cbz	r0, 8005644 <_vfiprintf_r+0x18>
 800563c:	6983      	ldr	r3, [r0, #24]
 800563e:	b90b      	cbnz	r3, 8005644 <_vfiprintf_r+0x18>
 8005640:	f7ff fddc 	bl	80051fc <__sinit>
 8005644:	4b89      	ldr	r3, [pc, #548]	; (800586c <_vfiprintf_r+0x240>)
 8005646:	429d      	cmp	r5, r3
 8005648:	d11b      	bne.n	8005682 <_vfiprintf_r+0x56>
 800564a:	6875      	ldr	r5, [r6, #4]
 800564c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800564e:	07d9      	lsls	r1, r3, #31
 8005650:	d405      	bmi.n	800565e <_vfiprintf_r+0x32>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	059a      	lsls	r2, r3, #22
 8005656:	d402      	bmi.n	800565e <_vfiprintf_r+0x32>
 8005658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800565a:	f7ff fe6d 	bl	8005338 <__retarget_lock_acquire_recursive>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	d501      	bpl.n	8005668 <_vfiprintf_r+0x3c>
 8005664:	692b      	ldr	r3, [r5, #16]
 8005666:	b9eb      	cbnz	r3, 80056a4 <_vfiprintf_r+0x78>
 8005668:	4629      	mov	r1, r5
 800566a:	4630      	mov	r0, r6
 800566c:	f000 fb5a 	bl	8005d24 <__swsetup_r>
 8005670:	b1c0      	cbz	r0, 80056a4 <_vfiprintf_r+0x78>
 8005672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005674:	07dc      	lsls	r4, r3, #31
 8005676:	d50e      	bpl.n	8005696 <_vfiprintf_r+0x6a>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b01d      	add	sp, #116	; 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	4b7b      	ldr	r3, [pc, #492]	; (8005870 <_vfiprintf_r+0x244>)
 8005684:	429d      	cmp	r5, r3
 8005686:	d101      	bne.n	800568c <_vfiprintf_r+0x60>
 8005688:	68b5      	ldr	r5, [r6, #8]
 800568a:	e7df      	b.n	800564c <_vfiprintf_r+0x20>
 800568c:	4b79      	ldr	r3, [pc, #484]	; (8005874 <_vfiprintf_r+0x248>)
 800568e:	429d      	cmp	r5, r3
 8005690:	bf08      	it	eq
 8005692:	68f5      	ldreq	r5, [r6, #12]
 8005694:	e7da      	b.n	800564c <_vfiprintf_r+0x20>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	0598      	lsls	r0, r3, #22
 800569a:	d4ed      	bmi.n	8005678 <_vfiprintf_r+0x4c>
 800569c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800569e:	f7ff fe4c 	bl	800533a <__retarget_lock_release_recursive>
 80056a2:	e7e9      	b.n	8005678 <_vfiprintf_r+0x4c>
 80056a4:	2300      	movs	r3, #0
 80056a6:	9309      	str	r3, [sp, #36]	; 0x24
 80056a8:	2320      	movs	r3, #32
 80056aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b2:	2330      	movs	r3, #48	; 0x30
 80056b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005878 <_vfiprintf_r+0x24c>
 80056b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056bc:	f04f 0901 	mov.w	r9, #1
 80056c0:	4623      	mov	r3, r4
 80056c2:	469a      	mov	sl, r3
 80056c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c8:	b10a      	cbz	r2, 80056ce <_vfiprintf_r+0xa2>
 80056ca:	2a25      	cmp	r2, #37	; 0x25
 80056cc:	d1f9      	bne.n	80056c2 <_vfiprintf_r+0x96>
 80056ce:	ebba 0b04 	subs.w	fp, sl, r4
 80056d2:	d00b      	beq.n	80056ec <_vfiprintf_r+0xc0>
 80056d4:	465b      	mov	r3, fp
 80056d6:	4622      	mov	r2, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	4630      	mov	r0, r6
 80056dc:	f7ff ff93 	bl	8005606 <__sfputs_r>
 80056e0:	3001      	adds	r0, #1
 80056e2:	f000 80aa 	beq.w	800583a <_vfiprintf_r+0x20e>
 80056e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e8:	445a      	add	r2, fp
 80056ea:	9209      	str	r2, [sp, #36]	; 0x24
 80056ec:	f89a 3000 	ldrb.w	r3, [sl]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80a2 	beq.w	800583a <_vfiprintf_r+0x20e>
 80056f6:	2300      	movs	r3, #0
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005700:	f10a 0a01 	add.w	sl, sl, #1
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	9307      	str	r3, [sp, #28]
 8005708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800570c:	931a      	str	r3, [sp, #104]	; 0x68
 800570e:	4654      	mov	r4, sl
 8005710:	2205      	movs	r2, #5
 8005712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005716:	4858      	ldr	r0, [pc, #352]	; (8005878 <_vfiprintf_r+0x24c>)
 8005718:	f7fa fd6a 	bl	80001f0 <memchr>
 800571c:	9a04      	ldr	r2, [sp, #16]
 800571e:	b9d8      	cbnz	r0, 8005758 <_vfiprintf_r+0x12c>
 8005720:	06d1      	lsls	r1, r2, #27
 8005722:	bf44      	itt	mi
 8005724:	2320      	movmi	r3, #32
 8005726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572a:	0713      	lsls	r3, r2, #28
 800572c:	bf44      	itt	mi
 800572e:	232b      	movmi	r3, #43	; 0x2b
 8005730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005734:	f89a 3000 	ldrb.w	r3, [sl]
 8005738:	2b2a      	cmp	r3, #42	; 0x2a
 800573a:	d015      	beq.n	8005768 <_vfiprintf_r+0x13c>
 800573c:	9a07      	ldr	r2, [sp, #28]
 800573e:	4654      	mov	r4, sl
 8005740:	2000      	movs	r0, #0
 8005742:	f04f 0c0a 	mov.w	ip, #10
 8005746:	4621      	mov	r1, r4
 8005748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574c:	3b30      	subs	r3, #48	; 0x30
 800574e:	2b09      	cmp	r3, #9
 8005750:	d94e      	bls.n	80057f0 <_vfiprintf_r+0x1c4>
 8005752:	b1b0      	cbz	r0, 8005782 <_vfiprintf_r+0x156>
 8005754:	9207      	str	r2, [sp, #28]
 8005756:	e014      	b.n	8005782 <_vfiprintf_r+0x156>
 8005758:	eba0 0308 	sub.w	r3, r0, r8
 800575c:	fa09 f303 	lsl.w	r3, r9, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	46a2      	mov	sl, r4
 8005766:	e7d2      	b.n	800570e <_vfiprintf_r+0xe2>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	1d19      	adds	r1, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	9103      	str	r1, [sp, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfbb      	ittet	lt
 8005774:	425b      	neglt	r3, r3
 8005776:	f042 0202 	orrlt.w	r2, r2, #2
 800577a:	9307      	strge	r3, [sp, #28]
 800577c:	9307      	strlt	r3, [sp, #28]
 800577e:	bfb8      	it	lt
 8005780:	9204      	strlt	r2, [sp, #16]
 8005782:	7823      	ldrb	r3, [r4, #0]
 8005784:	2b2e      	cmp	r3, #46	; 0x2e
 8005786:	d10c      	bne.n	80057a2 <_vfiprintf_r+0x176>
 8005788:	7863      	ldrb	r3, [r4, #1]
 800578a:	2b2a      	cmp	r3, #42	; 0x2a
 800578c:	d135      	bne.n	80057fa <_vfiprintf_r+0x1ce>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	9203      	str	r2, [sp, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfb8      	it	lt
 800579a:	f04f 33ff 	movlt.w	r3, #4294967295
 800579e:	3402      	adds	r4, #2
 80057a0:	9305      	str	r3, [sp, #20]
 80057a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005888 <_vfiprintf_r+0x25c>
 80057a6:	7821      	ldrb	r1, [r4, #0]
 80057a8:	2203      	movs	r2, #3
 80057aa:	4650      	mov	r0, sl
 80057ac:	f7fa fd20 	bl	80001f0 <memchr>
 80057b0:	b140      	cbz	r0, 80057c4 <_vfiprintf_r+0x198>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	eba0 000a 	sub.w	r0, r0, sl
 80057b8:	fa03 f000 	lsl.w	r0, r3, r0
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	4303      	orrs	r3, r0
 80057c0:	3401      	adds	r4, #1
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c8:	482c      	ldr	r0, [pc, #176]	; (800587c <_vfiprintf_r+0x250>)
 80057ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ce:	2206      	movs	r2, #6
 80057d0:	f7fa fd0e 	bl	80001f0 <memchr>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d03f      	beq.n	8005858 <_vfiprintf_r+0x22c>
 80057d8:	4b29      	ldr	r3, [pc, #164]	; (8005880 <_vfiprintf_r+0x254>)
 80057da:	bb1b      	cbnz	r3, 8005824 <_vfiprintf_r+0x1f8>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	3307      	adds	r3, #7
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	3308      	adds	r3, #8
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ea:	443b      	add	r3, r7
 80057ec:	9309      	str	r3, [sp, #36]	; 0x24
 80057ee:	e767      	b.n	80056c0 <_vfiprintf_r+0x94>
 80057f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f4:	460c      	mov	r4, r1
 80057f6:	2001      	movs	r0, #1
 80057f8:	e7a5      	b.n	8005746 <_vfiprintf_r+0x11a>
 80057fa:	2300      	movs	r3, #0
 80057fc:	3401      	adds	r4, #1
 80057fe:	9305      	str	r3, [sp, #20]
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0c0a 	mov.w	ip, #10
 8005806:	4620      	mov	r0, r4
 8005808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800580c:	3a30      	subs	r2, #48	; 0x30
 800580e:	2a09      	cmp	r2, #9
 8005810:	d903      	bls.n	800581a <_vfiprintf_r+0x1ee>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c5      	beq.n	80057a2 <_vfiprintf_r+0x176>
 8005816:	9105      	str	r1, [sp, #20]
 8005818:	e7c3      	b.n	80057a2 <_vfiprintf_r+0x176>
 800581a:	fb0c 2101 	mla	r1, ip, r1, r2
 800581e:	4604      	mov	r4, r0
 8005820:	2301      	movs	r3, #1
 8005822:	e7f0      	b.n	8005806 <_vfiprintf_r+0x1da>
 8005824:	ab03      	add	r3, sp, #12
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	462a      	mov	r2, r5
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <_vfiprintf_r+0x258>)
 800582c:	a904      	add	r1, sp, #16
 800582e:	4630      	mov	r0, r6
 8005830:	f3af 8000 	nop.w
 8005834:	4607      	mov	r7, r0
 8005836:	1c78      	adds	r0, r7, #1
 8005838:	d1d6      	bne.n	80057e8 <_vfiprintf_r+0x1bc>
 800583a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800583c:	07d9      	lsls	r1, r3, #31
 800583e:	d405      	bmi.n	800584c <_vfiprintf_r+0x220>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	059a      	lsls	r2, r3, #22
 8005844:	d402      	bmi.n	800584c <_vfiprintf_r+0x220>
 8005846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005848:	f7ff fd77 	bl	800533a <__retarget_lock_release_recursive>
 800584c:	89ab      	ldrh	r3, [r5, #12]
 800584e:	065b      	lsls	r3, r3, #25
 8005850:	f53f af12 	bmi.w	8005678 <_vfiprintf_r+0x4c>
 8005854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005856:	e711      	b.n	800567c <_vfiprintf_r+0x50>
 8005858:	ab03      	add	r3, sp, #12
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	462a      	mov	r2, r5
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <_vfiprintf_r+0x258>)
 8005860:	a904      	add	r1, sp, #16
 8005862:	4630      	mov	r0, r6
 8005864:	f000 f880 	bl	8005968 <_printf_i>
 8005868:	e7e4      	b.n	8005834 <_vfiprintf_r+0x208>
 800586a:	bf00      	nop
 800586c:	08005f80 	.word	0x08005f80
 8005870:	08005fa0 	.word	0x08005fa0
 8005874:	08005f60 	.word	0x08005f60
 8005878:	08005fc0 	.word	0x08005fc0
 800587c:	08005fca 	.word	0x08005fca
 8005880:	00000000 	.word	0x00000000
 8005884:	08005607 	.word	0x08005607
 8005888:	08005fc6 	.word	0x08005fc6

0800588c <_printf_common>:
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	4616      	mov	r6, r2
 8005892:	4699      	mov	r9, r3
 8005894:	688a      	ldr	r2, [r1, #8]
 8005896:	690b      	ldr	r3, [r1, #16]
 8005898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800589c:	4293      	cmp	r3, r2
 800589e:	bfb8      	it	lt
 80058a0:	4613      	movlt	r3, r2
 80058a2:	6033      	str	r3, [r6, #0]
 80058a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058a8:	4607      	mov	r7, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	b10a      	cbz	r2, 80058b2 <_printf_common+0x26>
 80058ae:	3301      	adds	r3, #1
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	0699      	lsls	r1, r3, #26
 80058b6:	bf42      	ittt	mi
 80058b8:	6833      	ldrmi	r3, [r6, #0]
 80058ba:	3302      	addmi	r3, #2
 80058bc:	6033      	strmi	r3, [r6, #0]
 80058be:	6825      	ldr	r5, [r4, #0]
 80058c0:	f015 0506 	ands.w	r5, r5, #6
 80058c4:	d106      	bne.n	80058d4 <_printf_common+0x48>
 80058c6:	f104 0a19 	add.w	sl, r4, #25
 80058ca:	68e3      	ldr	r3, [r4, #12]
 80058cc:	6832      	ldr	r2, [r6, #0]
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	dc26      	bgt.n	8005922 <_printf_common+0x96>
 80058d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058d8:	1e13      	subs	r3, r2, #0
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	bf18      	it	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	0692      	lsls	r2, r2, #26
 80058e2:	d42b      	bmi.n	800593c <_printf_common+0xb0>
 80058e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058e8:	4649      	mov	r1, r9
 80058ea:	4638      	mov	r0, r7
 80058ec:	47c0      	blx	r8
 80058ee:	3001      	adds	r0, #1
 80058f0:	d01e      	beq.n	8005930 <_printf_common+0xa4>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	68e5      	ldr	r5, [r4, #12]
 80058f6:	6832      	ldr	r2, [r6, #0]
 80058f8:	f003 0306 	and.w	r3, r3, #6
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	bf08      	it	eq
 8005900:	1aad      	subeq	r5, r5, r2
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	bf0c      	ite	eq
 8005908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800590c:	2500      	movne	r5, #0
 800590e:	4293      	cmp	r3, r2
 8005910:	bfc4      	itt	gt
 8005912:	1a9b      	subgt	r3, r3, r2
 8005914:	18ed      	addgt	r5, r5, r3
 8005916:	2600      	movs	r6, #0
 8005918:	341a      	adds	r4, #26
 800591a:	42b5      	cmp	r5, r6
 800591c:	d11a      	bne.n	8005954 <_printf_common+0xc8>
 800591e:	2000      	movs	r0, #0
 8005920:	e008      	b.n	8005934 <_printf_common+0xa8>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4649      	mov	r1, r9
 8005928:	4638      	mov	r0, r7
 800592a:	47c0      	blx	r8
 800592c:	3001      	adds	r0, #1
 800592e:	d103      	bne.n	8005938 <_printf_common+0xac>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	3501      	adds	r5, #1
 800593a:	e7c6      	b.n	80058ca <_printf_common+0x3e>
 800593c:	18e1      	adds	r1, r4, r3
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	2030      	movs	r0, #48	; 0x30
 8005942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005946:	4422      	add	r2, r4
 8005948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800594c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005950:	3302      	adds	r3, #2
 8005952:	e7c7      	b.n	80058e4 <_printf_common+0x58>
 8005954:	2301      	movs	r3, #1
 8005956:	4622      	mov	r2, r4
 8005958:	4649      	mov	r1, r9
 800595a:	4638      	mov	r0, r7
 800595c:	47c0      	blx	r8
 800595e:	3001      	adds	r0, #1
 8005960:	d0e6      	beq.n	8005930 <_printf_common+0xa4>
 8005962:	3601      	adds	r6, #1
 8005964:	e7d9      	b.n	800591a <_printf_common+0x8e>
	...

08005968 <_printf_i>:
 8005968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	7e0f      	ldrb	r7, [r1, #24]
 800596e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005970:	2f78      	cmp	r7, #120	; 0x78
 8005972:	4691      	mov	r9, r2
 8005974:	4680      	mov	r8, r0
 8005976:	460c      	mov	r4, r1
 8005978:	469a      	mov	sl, r3
 800597a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800597e:	d807      	bhi.n	8005990 <_printf_i+0x28>
 8005980:	2f62      	cmp	r7, #98	; 0x62
 8005982:	d80a      	bhi.n	800599a <_printf_i+0x32>
 8005984:	2f00      	cmp	r7, #0
 8005986:	f000 80d8 	beq.w	8005b3a <_printf_i+0x1d2>
 800598a:	2f58      	cmp	r7, #88	; 0x58
 800598c:	f000 80a3 	beq.w	8005ad6 <_printf_i+0x16e>
 8005990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005998:	e03a      	b.n	8005a10 <_printf_i+0xa8>
 800599a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800599e:	2b15      	cmp	r3, #21
 80059a0:	d8f6      	bhi.n	8005990 <_printf_i+0x28>
 80059a2:	a101      	add	r1, pc, #4	; (adr r1, 80059a8 <_printf_i+0x40>)
 80059a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005991 	.word	0x08005991
 80059b4:	08005991 	.word	0x08005991
 80059b8:	08005991 	.word	0x08005991
 80059bc:	08005991 	.word	0x08005991
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005991 	.word	0x08005991
 80059c8:	08005991 	.word	0x08005991
 80059cc:	08005991 	.word	0x08005991
 80059d0:	08005991 	.word	0x08005991
 80059d4:	08005b21 	.word	0x08005b21
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005b03 	.word	0x08005b03
 80059e0:	08005991 	.word	0x08005991
 80059e4:	08005991 	.word	0x08005991
 80059e8:	08005b43 	.word	0x08005b43
 80059ec:	08005991 	.word	0x08005991
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	08005991 	.word	0x08005991
 80059f8:	08005991 	.word	0x08005991
 80059fc:	08005b0b 	.word	0x08005b0b
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	602a      	str	r2, [r5, #0]
 8005a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0a3      	b.n	8005b5c <_printf_i+0x1f4>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	6829      	ldr	r1, [r5, #0]
 8005a18:	0606      	lsls	r6, r0, #24
 8005a1a:	f101 0304 	add.w	r3, r1, #4
 8005a1e:	d50a      	bpl.n	8005a36 <_printf_i+0xce>
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	2e00      	cmp	r6, #0
 8005a26:	da03      	bge.n	8005a30 <_printf_i+0xc8>
 8005a28:	232d      	movs	r3, #45	; 0x2d
 8005a2a:	4276      	negs	r6, r6
 8005a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a30:	485e      	ldr	r0, [pc, #376]	; (8005bac <_printf_i+0x244>)
 8005a32:	230a      	movs	r3, #10
 8005a34:	e019      	b.n	8005a6a <_printf_i+0x102>
 8005a36:	680e      	ldr	r6, [r1, #0]
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a3e:	bf18      	it	ne
 8005a40:	b236      	sxthne	r6, r6
 8005a42:	e7ef      	b.n	8005a24 <_printf_i+0xbc>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1d19      	adds	r1, r3, #4
 8005a4a:	6029      	str	r1, [r5, #0]
 8005a4c:	0601      	lsls	r1, r0, #24
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0xec>
 8005a50:	681e      	ldr	r6, [r3, #0]
 8005a52:	e002      	b.n	8005a5a <_printf_i+0xf2>
 8005a54:	0646      	lsls	r6, r0, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0xe8>
 8005a58:	881e      	ldrh	r6, [r3, #0]
 8005a5a:	4854      	ldr	r0, [pc, #336]	; (8005bac <_printf_i+0x244>)
 8005a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a5e:	bf0c      	ite	eq
 8005a60:	2308      	moveq	r3, #8
 8005a62:	230a      	movne	r3, #10
 8005a64:	2100      	movs	r1, #0
 8005a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6a:	6865      	ldr	r5, [r4, #4]
 8005a6c:	60a5      	str	r5, [r4, #8]
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	bfa2      	ittt	ge
 8005a72:	6821      	ldrge	r1, [r4, #0]
 8005a74:	f021 0104 	bicge.w	r1, r1, #4
 8005a78:	6021      	strge	r1, [r4, #0]
 8005a7a:	b90e      	cbnz	r6, 8005a80 <_printf_i+0x118>
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	d04d      	beq.n	8005b1c <_printf_i+0x1b4>
 8005a80:	4615      	mov	r5, r2
 8005a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a86:	fb03 6711 	mls	r7, r3, r1, r6
 8005a8a:	5dc7      	ldrb	r7, [r0, r7]
 8005a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a90:	4637      	mov	r7, r6
 8005a92:	42bb      	cmp	r3, r7
 8005a94:	460e      	mov	r6, r1
 8005a96:	d9f4      	bls.n	8005a82 <_printf_i+0x11a>
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d10b      	bne.n	8005ab4 <_printf_i+0x14c>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	07de      	lsls	r6, r3, #31
 8005aa0:	d508      	bpl.n	8005ab4 <_printf_i+0x14c>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	6861      	ldr	r1, [r4, #4]
 8005aa6:	4299      	cmp	r1, r3
 8005aa8:	bfde      	ittt	le
 8005aaa:	2330      	movle	r3, #48	; 0x30
 8005aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ab4:	1b52      	subs	r2, r2, r5
 8005ab6:	6122      	str	r2, [r4, #16]
 8005ab8:	f8cd a000 	str.w	sl, [sp]
 8005abc:	464b      	mov	r3, r9
 8005abe:	aa03      	add	r2, sp, #12
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f7ff fee2 	bl	800588c <_printf_common>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d14c      	bne.n	8005b66 <_printf_i+0x1fe>
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	b004      	add	sp, #16
 8005ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad6:	4835      	ldr	r0, [pc, #212]	; (8005bac <_printf_i+0x244>)
 8005ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005adc:	6829      	ldr	r1, [r5, #0]
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ae4:	6029      	str	r1, [r5, #0]
 8005ae6:	061d      	lsls	r5, r3, #24
 8005ae8:	d514      	bpl.n	8005b14 <_printf_i+0x1ac>
 8005aea:	07df      	lsls	r7, r3, #31
 8005aec:	bf44      	itt	mi
 8005aee:	f043 0320 	orrmi.w	r3, r3, #32
 8005af2:	6023      	strmi	r3, [r4, #0]
 8005af4:	b91e      	cbnz	r6, 8005afe <_printf_i+0x196>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	f023 0320 	bic.w	r3, r3, #32
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	2310      	movs	r3, #16
 8005b00:	e7b0      	b.n	8005a64 <_printf_i+0xfc>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f043 0320 	orr.w	r3, r3, #32
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	2378      	movs	r3, #120	; 0x78
 8005b0c:	4828      	ldr	r0, [pc, #160]	; (8005bb0 <_printf_i+0x248>)
 8005b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b12:	e7e3      	b.n	8005adc <_printf_i+0x174>
 8005b14:	0659      	lsls	r1, r3, #25
 8005b16:	bf48      	it	mi
 8005b18:	b2b6      	uxthmi	r6, r6
 8005b1a:	e7e6      	b.n	8005aea <_printf_i+0x182>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	e7bb      	b.n	8005a98 <_printf_i+0x130>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	6826      	ldr	r6, [r4, #0]
 8005b24:	6961      	ldr	r1, [r4, #20]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6028      	str	r0, [r5, #0]
 8005b2a:	0635      	lsls	r5, r6, #24
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0x1cc>
 8005b30:	6019      	str	r1, [r3, #0]
 8005b32:	e002      	b.n	8005b3a <_printf_i+0x1d2>
 8005b34:	0670      	lsls	r0, r6, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0x1c8>
 8005b38:	8019      	strh	r1, [r3, #0]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	4615      	mov	r5, r2
 8005b40:	e7ba      	b.n	8005ab8 <_printf_i+0x150>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	1d1a      	adds	r2, r3, #4
 8005b46:	602a      	str	r2, [r5, #0]
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f7fa fb4e 	bl	80001f0 <memchr>
 8005b54:	b108      	cbz	r0, 8005b5a <_printf_i+0x1f2>
 8005b56:	1b40      	subs	r0, r0, r5
 8005b58:	6060      	str	r0, [r4, #4]
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b64:	e7a8      	b.n	8005ab8 <_printf_i+0x150>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0ab      	beq.n	8005acc <_printf_i+0x164>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	079b      	lsls	r3, r3, #30
 8005b78:	d413      	bmi.n	8005ba2 <_printf_i+0x23a>
 8005b7a:	68e0      	ldr	r0, [r4, #12]
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	4298      	cmp	r0, r3
 8005b80:	bfb8      	it	lt
 8005b82:	4618      	movlt	r0, r3
 8005b84:	e7a4      	b.n	8005ad0 <_printf_i+0x168>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	47d0      	blx	sl
 8005b90:	3001      	adds	r0, #1
 8005b92:	d09b      	beq.n	8005acc <_printf_i+0x164>
 8005b94:	3501      	adds	r5, #1
 8005b96:	68e3      	ldr	r3, [r4, #12]
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	1a5b      	subs	r3, r3, r1
 8005b9c:	42ab      	cmp	r3, r5
 8005b9e:	dcf2      	bgt.n	8005b86 <_printf_i+0x21e>
 8005ba0:	e7eb      	b.n	8005b7a <_printf_i+0x212>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	f104 0619 	add.w	r6, r4, #25
 8005ba8:	e7f5      	b.n	8005b96 <_printf_i+0x22e>
 8005baa:	bf00      	nop
 8005bac:	08005fd1 	.word	0x08005fd1
 8005bb0:	08005fe2 	.word	0x08005fe2

08005bb4 <_sbrk_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d06      	ldr	r5, [pc, #24]	; (8005bd0 <_sbrk_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb fb8e 	bl	80012e0 <_sbrk>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_sbrk_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_sbrk_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000cc0 	.word	0x20000cc0

08005bd4 <__sread>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	f000 f960 	bl	8005ea0 <_read_r>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	bfab      	itete	ge
 8005be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005be6:	89a3      	ldrhlt	r3, [r4, #12]
 8005be8:	181b      	addge	r3, r3, r0
 8005bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bee:	bfac      	ite	ge
 8005bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bf2:	81a3      	strhlt	r3, [r4, #12]
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <__swrite>:
 8005bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	4605      	mov	r5, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	4616      	mov	r6, r2
 8005c06:	d505      	bpl.n	8005c14 <__swrite+0x1e>
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f000 f928 	bl	8005e64 <_lseek_r>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	4628      	mov	r0, r5
 8005c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	f000 b869 	b.w	8005d00 <_write_r>

08005c2e <__sseek>:
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	460c      	mov	r4, r1
 8005c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c36:	f000 f915 	bl	8005e64 <_lseek_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	bf15      	itete	ne
 8005c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c4a:	81a3      	strheq	r3, [r4, #12]
 8005c4c:	bf18      	it	ne
 8005c4e:	81a3      	strhne	r3, [r4, #12]
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <__sclose>:
 8005c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c56:	f000 b8d3 	b.w	8005e00 <_close_r>
	...

08005c5c <__swbuf_r>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	460e      	mov	r6, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	4605      	mov	r5, r0
 8005c64:	b118      	cbz	r0, 8005c6e <__swbuf_r+0x12>
 8005c66:	6983      	ldr	r3, [r0, #24]
 8005c68:	b90b      	cbnz	r3, 8005c6e <__swbuf_r+0x12>
 8005c6a:	f7ff fac7 	bl	80051fc <__sinit>
 8005c6e:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <__swbuf_r+0x98>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	d12b      	bne.n	8005ccc <__swbuf_r+0x70>
 8005c74:	686c      	ldr	r4, [r5, #4]
 8005c76:	69a3      	ldr	r3, [r4, #24]
 8005c78:	60a3      	str	r3, [r4, #8]
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	071a      	lsls	r2, r3, #28
 8005c7e:	d52f      	bpl.n	8005ce0 <__swbuf_r+0x84>
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	b36b      	cbz	r3, 8005ce0 <__swbuf_r+0x84>
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	1ac0      	subs	r0, r0, r3
 8005c8a:	6963      	ldr	r3, [r4, #20]
 8005c8c:	b2f6      	uxtb	r6, r6
 8005c8e:	4283      	cmp	r3, r0
 8005c90:	4637      	mov	r7, r6
 8005c92:	dc04      	bgt.n	8005c9e <__swbuf_r+0x42>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7ff fa1c 	bl	80050d4 <_fflush_r>
 8005c9c:	bb30      	cbnz	r0, 8005cec <__swbuf_r+0x90>
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	60a3      	str	r3, [r4, #8]
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	701e      	strb	r6, [r3, #0]
 8005cac:	6963      	ldr	r3, [r4, #20]
 8005cae:	3001      	adds	r0, #1
 8005cb0:	4283      	cmp	r3, r0
 8005cb2:	d004      	beq.n	8005cbe <__swbuf_r+0x62>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d506      	bpl.n	8005cc8 <__swbuf_r+0x6c>
 8005cba:	2e0a      	cmp	r6, #10
 8005cbc:	d104      	bne.n	8005cc8 <__swbuf_r+0x6c>
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7ff fa07 	bl	80050d4 <_fflush_r>
 8005cc6:	b988      	cbnz	r0, 8005cec <__swbuf_r+0x90>
 8005cc8:	4638      	mov	r0, r7
 8005cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <__swbuf_r+0x9c>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d101      	bne.n	8005cd6 <__swbuf_r+0x7a>
 8005cd2:	68ac      	ldr	r4, [r5, #8]
 8005cd4:	e7cf      	b.n	8005c76 <__swbuf_r+0x1a>
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <__swbuf_r+0xa0>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	bf08      	it	eq
 8005cdc:	68ec      	ldreq	r4, [r5, #12]
 8005cde:	e7ca      	b.n	8005c76 <__swbuf_r+0x1a>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 f81e 	bl	8005d24 <__swsetup_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0cb      	beq.n	8005c84 <__swbuf_r+0x28>
 8005cec:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf0:	e7ea      	b.n	8005cc8 <__swbuf_r+0x6c>
 8005cf2:	bf00      	nop
 8005cf4:	08005f80 	.word	0x08005f80
 8005cf8:	08005fa0 	.word	0x08005fa0
 8005cfc:	08005f60 	.word	0x08005f60

08005d00 <_write_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	; (8005d20 <_write_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb fa95 	bl	800123e <_write>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_write_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_write_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000cc0 	.word	0x20000cc0

08005d24 <__swsetup_r>:
 8005d24:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <__swsetup_r+0xcc>)
 8005d26:	b570      	push	{r4, r5, r6, lr}
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	b125      	cbz	r5, 8005d3a <__swsetup_r+0x16>
 8005d30:	69ab      	ldr	r3, [r5, #24]
 8005d32:	b913      	cbnz	r3, 8005d3a <__swsetup_r+0x16>
 8005d34:	4628      	mov	r0, r5
 8005d36:	f7ff fa61 	bl	80051fc <__sinit>
 8005d3a:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <__swsetup_r+0xd0>)
 8005d3c:	429c      	cmp	r4, r3
 8005d3e:	d10f      	bne.n	8005d60 <__swsetup_r+0x3c>
 8005d40:	686c      	ldr	r4, [r5, #4]
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d48:	0719      	lsls	r1, r3, #28
 8005d4a:	d42c      	bmi.n	8005da6 <__swsetup_r+0x82>
 8005d4c:	06dd      	lsls	r5, r3, #27
 8005d4e:	d411      	bmi.n	8005d74 <__swsetup_r+0x50>
 8005d50:	2309      	movs	r3, #9
 8005d52:	6033      	str	r3, [r6, #0]
 8005d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5e:	e03e      	b.n	8005dde <__swsetup_r+0xba>
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <__swsetup_r+0xd4>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <__swsetup_r+0x46>
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	e7eb      	b.n	8005d42 <__swsetup_r+0x1e>
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <__swsetup_r+0xd8>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68ec      	ldreq	r4, [r5, #12]
 8005d72:	e7e6      	b.n	8005d42 <__swsetup_r+0x1e>
 8005d74:	0758      	lsls	r0, r3, #29
 8005d76:	d512      	bpl.n	8005d9e <__swsetup_r+0x7a>
 8005d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d7a:	b141      	cbz	r1, 8005d8e <__swsetup_r+0x6a>
 8005d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <__swsetup_r+0x66>
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff fb47 	bl	8005418 <_free_r>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	b94b      	cbnz	r3, 8005dbe <__swsetup_r+0x9a>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db4:	d003      	beq.n	8005dbe <__swsetup_r+0x9a>
 8005db6:	4621      	mov	r1, r4
 8005db8:	4630      	mov	r0, r6
 8005dba:	f7ff fae5 	bl	8005388 <__smakebuf_r>
 8005dbe:	89a0      	ldrh	r0, [r4, #12]
 8005dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dc4:	f010 0301 	ands.w	r3, r0, #1
 8005dc8:	d00a      	beq.n	8005de0 <__swsetup_r+0xbc>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	6963      	ldr	r3, [r4, #20]
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	61a3      	str	r3, [r4, #24]
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	b943      	cbnz	r3, 8005dea <__swsetup_r+0xc6>
 8005dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ddc:	d1ba      	bne.n	8005d54 <__swsetup_r+0x30>
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	0781      	lsls	r1, r0, #30
 8005de2:	bf58      	it	pl
 8005de4:	6963      	ldrpl	r3, [r4, #20]
 8005de6:	60a3      	str	r3, [r4, #8]
 8005de8:	e7f4      	b.n	8005dd4 <__swsetup_r+0xb0>
 8005dea:	2000      	movs	r0, #0
 8005dec:	e7f7      	b.n	8005dde <__swsetup_r+0xba>
 8005dee:	bf00      	nop
 8005df0:	2000000c 	.word	0x2000000c
 8005df4:	08005f80 	.word	0x08005f80
 8005df8:	08005fa0 	.word	0x08005fa0
 8005dfc:	08005f60 	.word	0x08005f60

08005e00 <_close_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	; (8005e1c <_close_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fb fa33 	bl	8001276 <_close>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_close_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_close_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000cc0 	.word	0x20000cc0

08005e20 <_fstat_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_fstat_r+0x20>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f7fb fa2e 	bl	800128e <_fstat>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d102      	bne.n	8005e3c <_fstat_r+0x1c>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	b103      	cbz	r3, 8005e3c <_fstat_r+0x1c>
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000cc0 	.word	0x20000cc0

08005e44 <_isatty_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	; (8005e60 <_isatty_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fb fa2d 	bl	80012ae <_isatty>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_isatty_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_isatty_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000cc0 	.word	0x20000cc0

08005e64 <_lseek_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d07      	ldr	r5, [pc, #28]	; (8005e84 <_lseek_r+0x20>)
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fb fa26 	bl	80012c4 <_lseek>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_lseek_r+0x1e>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_lseek_r+0x1e>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	20000cc0 	.word	0x20000cc0

08005e88 <__malloc_lock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_lock+0x8>)
 8005e8a:	f7ff ba55 	b.w	8005338 <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	20000cb4 	.word	0x20000cb4

08005e94 <__malloc_unlock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__malloc_unlock+0x8>)
 8005e96:	f7ff ba50 	b.w	800533a <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	20000cb4 	.word	0x20000cb4

08005ea0 <_read_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d07      	ldr	r5, [pc, #28]	; (8005ec0 <_read_r+0x20>)
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fb f9a8 	bl	8001204 <_read>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_read_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_read_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20000cc0 	.word	0x20000cc0

08005ec4 <_init>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	bf00      	nop
 8005ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	469e      	mov	lr, r3
 8005ece:	4770      	bx	lr

08005ed0 <_fini>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr
